/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_touchvg(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_touchvg(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_touchvg(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include <mgbox.h>
#include <mgmat.h>
#include <mgbase.h>
#include <mgcurv.h>
#include <mglnrel.h>
#include <mgnear.h>

#include <gigraph.h>
#include <gicanvas.h>
#include <mgpath.h>

#include <mgstorage.h>
#include <mgvector.h>
#include <mgjsonstorage.h>

#include <mgcshapes.h>
#include <mgshapetype.h>
#include <mgarc.h>
#include <mgdiamond.h>
#include <mgdot.h>
#include <mgellipse.h>
#include <mggrid.h>
#include <mgline.h>
#include <mglines.h>
#include <mgparallel.h>
#include <mgpathsp.h>
#include <mgrdrect.h>
#include <mgrect.h>
#include <mgsplines.h>

#include <mgshapes.h>
#include <mgcomposite.h>
#include <mgspfactory.h>
#include <mgimagesp.h>

#include <mgsnap.h>
#include <mgselect.h>
#include <mgaction.h>
#include <mgcmd.h>
#include <cmdsubject.h>

#include <mgdrawarc.h>
#include <mgdrawrect.h>

#include <mgcmdmgr.h>
#include <mgcmdmgrfactory.h>

#include <mglayer.h>
#include <mgshapedoc.h>

#include "gicoreview.h"
#include "gimousehelper.h"
#include "testcanvas.h"
#include "giplaying.h"
#include "gicoreviewdata.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "touchvg_csharp_wrap.h"

SwigDirector_GiCanvas::SwigDirector_GiCanvas() : GiCanvas(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_GiCanvas::~SwigDirector_GiCanvas() {
  
}


void SwigDirector_GiCanvas::setPen(int argb, float width, int style, float phase, float orgw) {
  int jargb  ;
  float jwidth  ;
  int jstyle  ;
  float jphase  ;
  float jorgw  ;
  
  if (!swig_callbacksetPen) {
    throw Swig::DirectorPureVirtualException("GiCanvas::setPen");
  } else {
    jargb = argb;
    jwidth = width;
    jstyle = style;
    jphase = phase;
    jorgw = orgw;
    swig_callbacksetPen(jargb, jwidth, jstyle, jphase, jorgw);
  }
}

void SwigDirector_GiCanvas::setBrush(int argb, int style) {
  int jargb  ;
  int jstyle  ;
  
  if (!swig_callbacksetBrush) {
    throw Swig::DirectorPureVirtualException("GiCanvas::setBrush");
  } else {
    jargb = argb;
    jstyle = style;
    swig_callbacksetBrush(jargb, jstyle);
  }
}

void SwigDirector_GiCanvas::clearRect(float x, float y, float w, float h) {
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  
  if (!swig_callbackclearRect) {
    throw Swig::DirectorPureVirtualException("GiCanvas::clearRect");
  } else {
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    swig_callbackclearRect(jx, jy, jw, jh);
  }
}

void SwigDirector_GiCanvas::drawRect(float x, float y, float w, float h, bool stroke, bool fill) {
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  unsigned int jstroke  ;
  unsigned int jfill  ;
  
  if (!swig_callbackdrawRect) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawRect");
  } else {
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jstroke = stroke;
    jfill = fill;
    swig_callbackdrawRect(jx, jy, jw, jh, jstroke, jfill);
  }
}

void SwigDirector_GiCanvas::drawLine(float x1, float y1, float x2, float y2) {
  float jx1  ;
  float jy1  ;
  float jx2  ;
  float jy2  ;
  
  if (!swig_callbackdrawLine) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawLine");
  } else {
    jx1 = x1;
    jy1 = y1;
    jx2 = x2;
    jy2 = y2;
    swig_callbackdrawLine(jx1, jy1, jx2, jy2);
  }
}

void SwigDirector_GiCanvas::drawEllipse(float x, float y, float w, float h, bool stroke, bool fill) {
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  unsigned int jstroke  ;
  unsigned int jfill  ;
  
  if (!swig_callbackdrawEllipse) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawEllipse");
  } else {
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jstroke = stroke;
    jfill = fill;
    swig_callbackdrawEllipse(jx, jy, jw, jh, jstroke, jfill);
  }
}

void SwigDirector_GiCanvas::beginPath() {
  if (!swig_callbackbeginPath) {
    throw Swig::DirectorPureVirtualException("GiCanvas::beginPath");
  } else {
    swig_callbackbeginPath();
  }
}

void SwigDirector_GiCanvas::moveTo(float x, float y) {
  float jx  ;
  float jy  ;
  
  if (!swig_callbackmoveTo) {
    throw Swig::DirectorPureVirtualException("GiCanvas::moveTo");
  } else {
    jx = x;
    jy = y;
    swig_callbackmoveTo(jx, jy);
  }
}

void SwigDirector_GiCanvas::lineTo(float x, float y) {
  float jx  ;
  float jy  ;
  
  if (!swig_callbacklineTo) {
    throw Swig::DirectorPureVirtualException("GiCanvas::lineTo");
  } else {
    jx = x;
    jy = y;
    swig_callbacklineTo(jx, jy);
  }
}

void SwigDirector_GiCanvas::bezierTo(float c1x, float c1y, float c2x, float c2y, float x, float y) {
  float jc1x  ;
  float jc1y  ;
  float jc2x  ;
  float jc2y  ;
  float jx  ;
  float jy  ;
  
  if (!swig_callbackbezierTo) {
    throw Swig::DirectorPureVirtualException("GiCanvas::bezierTo");
  } else {
    jc1x = c1x;
    jc1y = c1y;
    jc2x = c2x;
    jc2y = c2y;
    jx = x;
    jy = y;
    swig_callbackbezierTo(jc1x, jc1y, jc2x, jc2y, jx, jy);
  }
}

void SwigDirector_GiCanvas::quadTo(float cpx, float cpy, float x, float y) {
  float jcpx  ;
  float jcpy  ;
  float jx  ;
  float jy  ;
  
  if (!swig_callbackquadTo) {
    throw Swig::DirectorPureVirtualException("GiCanvas::quadTo");
  } else {
    jcpx = cpx;
    jcpy = cpy;
    jx = x;
    jy = y;
    swig_callbackquadTo(jcpx, jcpy, jx, jy);
  }
}

void SwigDirector_GiCanvas::closePath() {
  if (!swig_callbackclosePath) {
    throw Swig::DirectorPureVirtualException("GiCanvas::closePath");
  } else {
    swig_callbackclosePath();
  }
}

void SwigDirector_GiCanvas::drawPath(bool stroke, bool fill) {
  unsigned int jstroke  ;
  unsigned int jfill  ;
  
  if (!swig_callbackdrawPath) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawPath");
  } else {
    jstroke = stroke;
    jfill = fill;
    swig_callbackdrawPath(jstroke, jfill);
  }
}

void SwigDirector_GiCanvas::saveClip() {
  if (!swig_callbacksaveClip) {
    throw Swig::DirectorPureVirtualException("GiCanvas::saveClip");
  } else {
    swig_callbacksaveClip();
  }
}

void SwigDirector_GiCanvas::restoreClip() {
  if (!swig_callbackrestoreClip) {
    throw Swig::DirectorPureVirtualException("GiCanvas::restoreClip");
  } else {
    swig_callbackrestoreClip();
  }
}

bool SwigDirector_GiCanvas::clipRect(float x, float y, float w, float h) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  
  if (!swig_callbackclipRect) {
    throw Swig::DirectorPureVirtualException("GiCanvas::clipRect");
  } else {
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jresult = (unsigned int) swig_callbackclipRect(jx, jy, jw, jh);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiCanvas::clipPath() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackclipPath) {
    throw Swig::DirectorPureVirtualException("GiCanvas::clipPath");
  } else {
    jresult = (unsigned int) swig_callbackclipPath();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiCanvas::drawHandle(float x, float y, int type, float angle) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  float jx  ;
  float jy  ;
  int jtype  ;
  float jangle  ;
  
  if (!swig_callbackdrawHandle) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawHandle");
  } else {
    jx = x;
    jy = y;
    jtype = type;
    jangle = angle;
    jresult = (unsigned int) swig_callbackdrawHandle(jx, jy, jtype, jangle);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiCanvas::drawBitmap(char const *name, float xc, float yc, float w, float h, float angle) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  char * jname = 0 ;
  float jxc  ;
  float jyc  ;
  float jw  ;
  float jh  ;
  float jangle  ;
  
  if (!swig_callbackdrawBitmap) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawBitmap");
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    jxc = xc;
    jyc = yc;
    jw = w;
    jh = h;
    jangle = angle;
    jresult = (unsigned int) swig_callbackdrawBitmap(jname, jxc, jyc, jw, jh, jangle);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

float SwigDirector_GiCanvas::drawTextAt(char const *text, float x, float y, float h, int align, float angle) {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  char * jtext = 0 ;
  float jx  ;
  float jy  ;
  float jh  ;
  int jalign  ;
  float jangle  ;
  
  if (!swig_callbackdrawTextAt) {
    throw Swig::DirectorPureVirtualException("GiCanvas::drawTextAt");
  } else {
    jtext = SWIG_csharp_string_callback((const char *)text); 
    jx = x;
    jy = y;
    jh = h;
    jalign = align;
    jangle = angle;
    jresult = (float) swig_callbackdrawTextAt(jtext, jx, jy, jh, jalign, jangle);
    c_result = (float)jresult; 
  }
  return c_result;
}

bool SwigDirector_GiCanvas::beginShape(int type, int sid, int version, float x, float y, float w, float h) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  int jsid  ;
  int jversion  ;
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  
  if (!swig_callbackbeginShape) {
    return GiCanvas::beginShape(type,sid,version,x,y,w,h);
  } else {
    jtype = type;
    jsid = sid;
    jversion = version;
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jresult = (unsigned int) swig_callbackbeginShape(jtype, jsid, jversion, jx, jy, jw, jh);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_GiCanvas::endShape(int type, int sid, float x, float y) {
  int jtype  ;
  int jsid  ;
  float jx  ;
  float jy  ;
  
  if (!swig_callbackendShape) {
    GiCanvas::endShape(type,sid,x,y);
    return;
  } else {
    jtype = type;
    jsid = sid;
    jx = x;
    jy = y;
    swig_callbackendShape(jtype, jsid, jx, jy);
  }
}

void SwigDirector_GiCanvas::swig_connect_director(SWIG_Callback0_t callbacksetPen, SWIG_Callback1_t callbacksetBrush, SWIG_Callback2_t callbackclearRect, SWIG_Callback3_t callbackdrawRect, SWIG_Callback4_t callbackdrawLine, SWIG_Callback5_t callbackdrawEllipse, SWIG_Callback6_t callbackbeginPath, SWIG_Callback7_t callbackmoveTo, SWIG_Callback8_t callbacklineTo, SWIG_Callback9_t callbackbezierTo, SWIG_Callback10_t callbackquadTo, SWIG_Callback11_t callbackclosePath, SWIG_Callback12_t callbackdrawPath, SWIG_Callback13_t callbacksaveClip, SWIG_Callback14_t callbackrestoreClip, SWIG_Callback15_t callbackclipRect, SWIG_Callback16_t callbackclipPath, SWIG_Callback17_t callbackdrawHandle, SWIG_Callback18_t callbackdrawBitmap, SWIG_Callback19_t callbackdrawTextAt, SWIG_Callback20_t callbackbeginShape, SWIG_Callback21_t callbackendShape) {
  swig_callbacksetPen = callbacksetPen;
  swig_callbacksetBrush = callbacksetBrush;
  swig_callbackclearRect = callbackclearRect;
  swig_callbackdrawRect = callbackdrawRect;
  swig_callbackdrawLine = callbackdrawLine;
  swig_callbackdrawEllipse = callbackdrawEllipse;
  swig_callbackbeginPath = callbackbeginPath;
  swig_callbackmoveTo = callbackmoveTo;
  swig_callbacklineTo = callbacklineTo;
  swig_callbackbezierTo = callbackbezierTo;
  swig_callbackquadTo = callbackquadTo;
  swig_callbackclosePath = callbackclosePath;
  swig_callbackdrawPath = callbackdrawPath;
  swig_callbacksaveClip = callbacksaveClip;
  swig_callbackrestoreClip = callbackrestoreClip;
  swig_callbackclipRect = callbackclipRect;
  swig_callbackclipPath = callbackclipPath;
  swig_callbackdrawHandle = callbackdrawHandle;
  swig_callbackdrawBitmap = callbackdrawBitmap;
  swig_callbackdrawTextAt = callbackdrawTextAt;
  swig_callbackbeginShape = callbackbeginShape;
  swig_callbackendShape = callbackendShape;
}

void SwigDirector_GiCanvas::swig_init_callbacks() {
  swig_callbacksetPen = 0;
  swig_callbacksetBrush = 0;
  swig_callbackclearRect = 0;
  swig_callbackdrawRect = 0;
  swig_callbackdrawLine = 0;
  swig_callbackdrawEllipse = 0;
  swig_callbackbeginPath = 0;
  swig_callbackmoveTo = 0;
  swig_callbacklineTo = 0;
  swig_callbackbezierTo = 0;
  swig_callbackquadTo = 0;
  swig_callbackclosePath = 0;
  swig_callbackdrawPath = 0;
  swig_callbacksaveClip = 0;
  swig_callbackrestoreClip = 0;
  swig_callbackclipRect = 0;
  swig_callbackclipPath = 0;
  swig_callbackdrawHandle = 0;
  swig_callbackdrawBitmap = 0;
  swig_callbackdrawTextAt = 0;
  swig_callbackbeginShape = 0;
  swig_callbackendShape = 0;
}

SwigDirector_MgObject::SwigDirector_MgObject() : MgObject(), Swig::Director() {
  swig_init_callbacks();
}

MgObject *SwigDirector_MgObject::clone() const {
  MgObject *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackclone) {
    throw Swig::DirectorPureVirtualException("MgObject::clone");
  } else {
    jresult = (void *) swig_callbackclone();
    c_result = (MgObject *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgObject::copy(MgObject const &src) {
  void * jsrc = 0 ;
  
  if (!swig_callbackcopy) {
    throw Swig::DirectorPureVirtualException("MgObject::copy");
  } else {
    jsrc = (MgObject *) &src; 
    swig_callbackcopy(jsrc);
  }
}

void SwigDirector_MgObject::release() {
  if (!swig_callbackrelease) {
    throw Swig::DirectorPureVirtualException("MgObject::release");
  } else {
    swig_callbackrelease();
  }
}

void SwigDirector_MgObject::addRef() {
  if (!swig_callbackaddRef) {
    throw Swig::DirectorPureVirtualException("MgObject::addRef");
  } else {
    swig_callbackaddRef();
  }
}

bool SwigDirector_MgObject::equals(MgObject const &src) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsrc = 0 ;
  
  if (!swig_callbackequals) {
    throw Swig::DirectorPureVirtualException("MgObject::equals");
  } else {
    jsrc = (MgObject *) &src; 
    jresult = (unsigned int) swig_callbackequals(jsrc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgObject::getType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetType) {
    throw Swig::DirectorPureVirtualException("MgObject::getType");
  } else {
    jresult = (int) swig_callbackgetType();
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgObject::isKindOf(int type) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  
  if (!swig_callbackisKindOf) {
    throw Swig::DirectorPureVirtualException("MgObject::isKindOf");
  } else {
    jtype = type;
    jresult = (unsigned int) swig_callbackisKindOf(jtype);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

SwigDirector_MgObject::~SwigDirector_MgObject() {
  
}


void SwigDirector_MgObject::swig_connect_director(SWIG_Callback0_t callbackclone, SWIG_Callback1_t callbackcopy, SWIG_Callback2_t callbackrelease, SWIG_Callback3_t callbackaddRef, SWIG_Callback4_t callbackequals, SWIG_Callback5_t callbackgetType, SWIG_Callback6_t callbackisKindOf) {
  swig_callbackclone = callbackclone;
  swig_callbackcopy = callbackcopy;
  swig_callbackrelease = callbackrelease;
  swig_callbackaddRef = callbackaddRef;
  swig_callbackequals = callbackequals;
  swig_callbackgetType = callbackgetType;
  swig_callbackisKindOf = callbackisKindOf;
}

void SwigDirector_MgObject::swig_init_callbacks() {
  swig_callbackclone = 0;
  swig_callbackcopy = 0;
  swig_callbackrelease = 0;
  swig_callbackaddRef = 0;
  swig_callbackequals = 0;
  swig_callbackgetType = 0;
  swig_callbackisKindOf = 0;
}

SwigDirector_MgBaseShape::SwigDirector_MgBaseShape() : MgBaseShape(), Swig::Director() {
  swig_init_callbacks();
}

MgObject *SwigDirector_MgBaseShape::clone() const {
  MgObject *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackclone) {
    throw Swig::DirectorPureVirtualException("MgBaseShape::clone");
  } else {
    jresult = (void *) swig_callbackclone();
    c_result = (MgObject *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseShape::copy(MgObject const &src) {
  void * jsrc = 0 ;
  
  if (!swig_callbackcopy) {
    MgBaseShape::copy(src);
    return;
  } else {
    jsrc = (MgObject *) &src; 
    swig_callbackcopy(jsrc);
  }
}

void SwigDirector_MgBaseShape::release() {
  if (!swig_callbackrelease) {
    throw Swig::DirectorPureVirtualException("MgBaseShape::release");
  } else {
    swig_callbackrelease();
  }
}

void SwigDirector_MgBaseShape::addRef() {
  if (!swig_callbackaddRef) {
    MgBaseShape::addRef();
    return;
  } else {
    swig_callbackaddRef();
  }
}

bool SwigDirector_MgBaseShape::equals(MgObject const &src) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsrc = 0 ;
  
  if (!swig_callbackequals) {
    return MgBaseShape::equals(src);
  } else {
    jsrc = (MgObject *) &src; 
    jresult = (unsigned int) swig_callbackequals(jsrc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseShape::getType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetType) {
    throw Swig::DirectorPureVirtualException("MgBaseShape::getType");
  } else {
    jresult = (int) swig_callbackgetType();
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::isKindOf(int type) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  
  if (!swig_callbackisKindOf) {
    return MgBaseShape::isKindOf(type);
  } else {
    jtype = type;
    jresult = (unsigned int) swig_callbackisKindOf(jtype);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

SwigDirector_MgBaseShape::~SwigDirector_MgBaseShape() {
  
}


Box2d SwigDirector_MgBaseShape::getExtent() const {
  Box2d c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetExtent) {
    return MgBaseShape::getExtent();
  } else {
    jresult = (void *) swig_callbackgetExtent();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Box2d", 0);
      return c_result;
    }
    c_result = *(Box2d *)jresult; 
  }
  return c_result;
}

long SwigDirector_MgBaseShape::getChangeCount() const {
  long c_result = SwigValueInit< long >() ;
  long jresult = 0 ;
  
  if (!swig_callbackgetChangeCount) {
    return MgBaseShape::getChangeCount();
  } else {
    jresult = (long) swig_callbackgetChangeCount();
    c_result = (long)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseShape::resetChangeCount(long count) {
  long jcount  ;
  
  if (!swig_callbackresetChangeCount) {
    MgBaseShape::resetChangeCount(count);
    return;
  } else {
    jcount = count;
    swig_callbackresetChangeCount(jcount);
  }
}

void SwigDirector_MgBaseShape::afterChanged() {
  if (!swig_callbackafterChanged) {
    MgBaseShape::afterChanged();
    return;
  } else {
    swig_callbackafterChanged();
  }
}

void SwigDirector_MgBaseShape::update() {
  if (!swig_callbackupdate) {
    MgBaseShape::update();
    return;
  } else {
    swig_callbackupdate();
  }
}

void SwigDirector_MgBaseShape::transform(Matrix2d const &mat) {
  void * jmat = 0 ;
  
  if (!swig_callbacktransform) {
    MgBaseShape::transform(mat);
    return;
  } else {
    jmat = (Matrix2d *) &mat; 
    swig_callbacktransform(jmat);
  }
}

void SwigDirector_MgBaseShape::clear() {
  if (!swig_callbackclear) {
    MgBaseShape::clear();
    return;
  } else {
    swig_callbackclear();
  }
}

void SwigDirector_MgBaseShape::clearCachedData() {
  if (!swig_callbackclearCachedData) {
    MgBaseShape::clearCachedData();
    return;
  } else {
    swig_callbackclearCachedData();
  }
}

int SwigDirector_MgBaseShape::getPointCount() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetPointCount) {
    throw Swig::DirectorPureVirtualException("MgBaseShape::getPointCount");
  } else {
    jresult = (int) swig_callbackgetPointCount();
    c_result = (int)jresult; 
  }
  return c_result;
}

Point2d SwigDirector_MgBaseShape::getPoint(int index) const {
  Point2d c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetPoint) {
    throw Swig::DirectorPureVirtualException("MgBaseShape::getPoint");
  } else {
    jindex = index;
    jresult = (void *) swig_callbackgetPoint(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Point2d", 0);
      return c_result;
    }
    c_result = *(Point2d *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseShape::setPoint(int index, Point2d const &pt) {
  int jindex  ;
  void * jpt = 0 ;
  
  if (!swig_callbacksetPoint) {
    throw Swig::DirectorPureVirtualException("MgBaseShape::setPoint");
  } else {
    jindex = index;
    jpt = (Point2d *) &pt; 
    swig_callbacksetPoint(jindex, jpt);
  }
}

bool SwigDirector_MgBaseShape::isClosed() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisClosed) {
    return MgBaseShape::isClosed();
  } else {
    jresult = (unsigned int) swig_callbackisClosed();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::isCurve() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisCurve) {
    return MgBaseShape::isCurve();
  } else {
    jresult = (unsigned int) swig_callbackisCurve();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

float SwigDirector_MgBaseShape::hitTest(Point2d const &pt, float tol, MgHitResult &res) const {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  void * jpt = 0 ;
  float jtol  ;
  void * jres = 0 ;
  
  if (!swig_callbackhitTest) {
    throw Swig::DirectorPureVirtualException("MgBaseShape::hitTest");
  } else {
    jpt = (Point2d *) &pt; 
    jtol = tol;
    jres = (MgHitResult *) &res; 
    jresult = (float) swig_callbackhitTest(jpt, jtol, jres);
    c_result = (float)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::hitTestBox(Box2d const &rect) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jrect = 0 ;
  
  if (!swig_callbackhitTestBox) {
    return MgBaseShape::hitTestBox(rect);
  } else {
    jrect = (Box2d *) &rect; 
    jresult = (unsigned int) swig_callbackhitTestBox(jrect);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::draw(int mode, GiGraphics &gs, GiContext const &ctx, int segment) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jmode  ;
  void * jgs = 0 ;
  void * jctx = 0 ;
  int jsegment  ;
  
  if (!swig_callbackdraw) {
    return MgBaseShape::draw(mode,gs,ctx,segment);
  } else {
    jmode = mode;
    jgs = (GiGraphics *) &gs; 
    jctx = (GiContext *) &ctx; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackdraw(jmode, jgs, jctx, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::draw2(MgObject const *owner, int mode, GiGraphics &gs, GiContext const &ctx, int segment) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jowner = 0 ;
  int jmode  ;
  void * jgs = 0 ;
  void * jctx = 0 ;
  int jsegment  ;
  
  if (!swig_callbackdraw2) {
    return MgBaseShape::draw2(owner,mode,gs,ctx,segment);
  } else {
    jowner = (void *) owner; 
    jmode = mode;
    jgs = (GiGraphics *) &gs; 
    jctx = (GiContext *) &ctx; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackdraw2(jowner, jmode, jgs, jctx, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgBaseShape::output(MgPath &path) const {
  void * jpath = 0 ;
  
  if (!swig_callbackoutput) {
    throw Swig::DirectorPureVirtualException("MgBaseShape::output");
  } else {
    jpath = (MgPath *) &path; 
    swig_callbackoutput(jpath);
  }
}

bool SwigDirector_MgBaseShape::save(MgStorage *s) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbacksave) {
    return MgBaseShape::save(s);
  } else {
    js = (void *) s; 
    jresult = (unsigned int) swig_callbacksave(js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::load(MgShapeFactory *factory, MgStorage *s) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jfactory = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackload) {
    return MgBaseShape::load(factory,s);
  } else {
    jfactory = (void *) factory; 
    js = (void *) s; 
    jresult = (unsigned int) swig_callbackload(jfactory, js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseShape::getHandleCount() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetHandleCount) {
    return MgBaseShape::getHandleCount();
  } else {
    jresult = (int) swig_callbackgetHandleCount();
    c_result = (int)jresult; 
  }
  return c_result;
}

Point2d SwigDirector_MgBaseShape::getHandlePoint(int index) const {
  Point2d c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetHandlePoint) {
    return MgBaseShape::getHandlePoint(index);
  } else {
    jindex = index;
    jresult = (void *) swig_callbackgetHandlePoint(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Point2d", 0);
      return c_result;
    }
    c_result = *(Point2d *)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::setHandlePoint(int index, Point2d const &pt, float tol) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  void * jpt = 0 ;
  float jtol  ;
  
  if (!swig_callbacksetHandlePoint) {
    return MgBaseShape::setHandlePoint(index,pt,tol);
  } else {
    jindex = index;
    jpt = (Point2d *) &pt; 
    jtol = tol;
    jresult = (unsigned int) swig_callbacksetHandlePoint(jindex, jpt, jtol);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::isHandleFixed(int index) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackisHandleFixed) {
    return MgBaseShape::isHandleFixed(index);
  } else {
    jindex = index;
    jresult = (unsigned int) swig_callbackisHandleFixed(jindex);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseShape::getHandleType(int index) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetHandleType) {
    return MgBaseShape::getHandleType(index);
  } else {
    jindex = index;
    jresult = (int) swig_callbackgetHandleType(jindex);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseShape::offset(Vector2d const &vec, int segment) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jvec = 0 ;
  int jsegment  ;
  
  if (!swig_callbackoffset) {
    return MgBaseShape::offset(vec,segment);
  } else {
    jvec = (Vector2d *) &vec; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackoffset(jvec, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgBaseShape::setFlag(MgShapeBit bit, bool on) {
  int jbit  ;
  unsigned int jon  ;
  
  if (!swig_callbacksetFlag) {
    MgBaseShape::setFlag(bit,on);
    return;
  } else {
    jbit = (int)bit;
    jon = on;
    swig_callbacksetFlag(jbit, jon);
  }
}

void SwigDirector_MgBaseShape::setOwner(MgObject *owner) {
  void * jowner = 0 ;
  
  if (!swig_callbacksetOwner) {
    MgBaseShape::setOwner(owner);
    return;
  } else {
    jowner = (void *) owner; 
    swig_callbacksetOwner(jowner);
  }
}

int SwigDirector_MgBaseShape::getSubType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetSubType) {
    return MgBaseShape::getSubType();
  } else {
    jresult = (int) swig_callbackgetSubType();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseShape::swig_connect_director(SWIG_Callback0_t callbackclone, SWIG_Callback1_t callbackcopy, SWIG_Callback2_t callbackrelease, SWIG_Callback3_t callbackaddRef, SWIG_Callback4_t callbackequals, SWIG_Callback5_t callbackgetType, SWIG_Callback6_t callbackisKindOf, SWIG_Callback7_t callbackgetExtent, SWIG_Callback8_t callbackgetChangeCount, SWIG_Callback9_t callbackresetChangeCount, SWIG_Callback10_t callbackafterChanged, SWIG_Callback11_t callbackupdate, SWIG_Callback12_t callbacktransform, SWIG_Callback13_t callbackclear, SWIG_Callback14_t callbackclearCachedData, SWIG_Callback15_t callbackgetPointCount, SWIG_Callback16_t callbackgetPoint, SWIG_Callback17_t callbacksetPoint, SWIG_Callback18_t callbackisClosed, SWIG_Callback19_t callbackisCurve, SWIG_Callback20_t callbackhitTest, SWIG_Callback21_t callbackhitTestBox, SWIG_Callback22_t callbackdraw, SWIG_Callback23_t callbackdraw2, SWIG_Callback24_t callbackoutput, SWIG_Callback25_t callbacksave, SWIG_Callback26_t callbackload, SWIG_Callback27_t callbackgetHandleCount, SWIG_Callback28_t callbackgetHandlePoint, SWIG_Callback29_t callbacksetHandlePoint, SWIG_Callback30_t callbackisHandleFixed, SWIG_Callback31_t callbackgetHandleType, SWIG_Callback32_t callbackoffset, SWIG_Callback33_t callbacksetFlag, SWIG_Callback34_t callbacksetOwner, SWIG_Callback35_t callbackgetSubType) {
  swig_callbackclone = callbackclone;
  swig_callbackcopy = callbackcopy;
  swig_callbackrelease = callbackrelease;
  swig_callbackaddRef = callbackaddRef;
  swig_callbackequals = callbackequals;
  swig_callbackgetType = callbackgetType;
  swig_callbackisKindOf = callbackisKindOf;
  swig_callbackgetExtent = callbackgetExtent;
  swig_callbackgetChangeCount = callbackgetChangeCount;
  swig_callbackresetChangeCount = callbackresetChangeCount;
  swig_callbackafterChanged = callbackafterChanged;
  swig_callbackupdate = callbackupdate;
  swig_callbacktransform = callbacktransform;
  swig_callbackclear = callbackclear;
  swig_callbackclearCachedData = callbackclearCachedData;
  swig_callbackgetPointCount = callbackgetPointCount;
  swig_callbackgetPoint = callbackgetPoint;
  swig_callbacksetPoint = callbacksetPoint;
  swig_callbackisClosed = callbackisClosed;
  swig_callbackisCurve = callbackisCurve;
  swig_callbackhitTest = callbackhitTest;
  swig_callbackhitTestBox = callbackhitTestBox;
  swig_callbackdraw = callbackdraw;
  swig_callbackdraw2 = callbackdraw2;
  swig_callbackoutput = callbackoutput;
  swig_callbacksave = callbacksave;
  swig_callbackload = callbackload;
  swig_callbackgetHandleCount = callbackgetHandleCount;
  swig_callbackgetHandlePoint = callbackgetHandlePoint;
  swig_callbacksetHandlePoint = callbacksetHandlePoint;
  swig_callbackisHandleFixed = callbackisHandleFixed;
  swig_callbackgetHandleType = callbackgetHandleType;
  swig_callbackoffset = callbackoffset;
  swig_callbacksetFlag = callbacksetFlag;
  swig_callbacksetOwner = callbacksetOwner;
  swig_callbackgetSubType = callbackgetSubType;
}

void SwigDirector_MgBaseShape::swig_init_callbacks() {
  swig_callbackclone = 0;
  swig_callbackcopy = 0;
  swig_callbackrelease = 0;
  swig_callbackaddRef = 0;
  swig_callbackequals = 0;
  swig_callbackgetType = 0;
  swig_callbackisKindOf = 0;
  swig_callbackgetExtent = 0;
  swig_callbackgetChangeCount = 0;
  swig_callbackresetChangeCount = 0;
  swig_callbackafterChanged = 0;
  swig_callbackupdate = 0;
  swig_callbacktransform = 0;
  swig_callbackclear = 0;
  swig_callbackclearCachedData = 0;
  swig_callbackgetPointCount = 0;
  swig_callbackgetPoint = 0;
  swig_callbacksetPoint = 0;
  swig_callbackisClosed = 0;
  swig_callbackisCurve = 0;
  swig_callbackhitTest = 0;
  swig_callbackhitTestBox = 0;
  swig_callbackdraw = 0;
  swig_callbackdraw2 = 0;
  swig_callbackoutput = 0;
  swig_callbacksave = 0;
  swig_callbackload = 0;
  swig_callbackgetHandleCount = 0;
  swig_callbackgetHandlePoint = 0;
  swig_callbacksetHandlePoint = 0;
  swig_callbackisHandleFixed = 0;
  swig_callbackgetHandleType = 0;
  swig_callbackoffset = 0;
  swig_callbacksetFlag = 0;
  swig_callbacksetOwner = 0;
  swig_callbackgetSubType = 0;
}

SwigDirector_MgBaseRect::SwigDirector_MgBaseRect() : MgBaseRect(), Swig::Director() {
  swig_init_callbacks();
}

MgObject *SwigDirector_MgBaseRect::clone() const {
  MgObject *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackclone) {
    throw Swig::DirectorPureVirtualException("MgBaseRect::clone");
  } else {
    jresult = (void *) swig_callbackclone();
    c_result = (MgObject *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseRect::copy(MgObject const &src) {
  void * jsrc = 0 ;
  
  if (!swig_callbackcopy) {
    MgBaseShape::copy(src);
    return;
  } else {
    jsrc = (MgObject *) &src; 
    swig_callbackcopy(jsrc);
  }
}

void SwigDirector_MgBaseRect::release() {
  if (!swig_callbackrelease) {
    throw Swig::DirectorPureVirtualException("MgBaseRect::release");
  } else {
    swig_callbackrelease();
  }
}

void SwigDirector_MgBaseRect::addRef() {
  if (!swig_callbackaddRef) {
    MgBaseShape::addRef();
    return;
  } else {
    swig_callbackaddRef();
  }
}

bool SwigDirector_MgBaseRect::equals(MgObject const &src) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsrc = 0 ;
  
  if (!swig_callbackequals) {
    return MgBaseShape::equals(src);
  } else {
    jsrc = (MgObject *) &src; 
    jresult = (unsigned int) swig_callbackequals(jsrc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseRect::getType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetType) {
    throw Swig::DirectorPureVirtualException("MgBaseRect::getType");
  } else {
    jresult = (int) swig_callbackgetType();
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::isKindOf(int type) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  
  if (!swig_callbackisKindOf) {
    return MgBaseShape::isKindOf(type);
  } else {
    jtype = type;
    jresult = (unsigned int) swig_callbackisKindOf(jtype);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

SwigDirector_MgBaseRect::~SwigDirector_MgBaseRect() {
  
}


Box2d SwigDirector_MgBaseRect::getExtent() const {
  Box2d c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetExtent) {
    return MgBaseShape::getExtent();
  } else {
    jresult = (void *) swig_callbackgetExtent();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Box2d", 0);
      return c_result;
    }
    c_result = *(Box2d *)jresult; 
  }
  return c_result;
}

long SwigDirector_MgBaseRect::getChangeCount() const {
  long c_result = SwigValueInit< long >() ;
  long jresult = 0 ;
  
  if (!swig_callbackgetChangeCount) {
    return MgBaseShape::getChangeCount();
  } else {
    jresult = (long) swig_callbackgetChangeCount();
    c_result = (long)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseRect::resetChangeCount(long count) {
  long jcount  ;
  
  if (!swig_callbackresetChangeCount) {
    MgBaseShape::resetChangeCount(count);
    return;
  } else {
    jcount = count;
    swig_callbackresetChangeCount(jcount);
  }
}

void SwigDirector_MgBaseRect::afterChanged() {
  if (!swig_callbackafterChanged) {
    MgBaseShape::afterChanged();
    return;
  } else {
    swig_callbackafterChanged();
  }
}

void SwigDirector_MgBaseRect::update() {
  if (!swig_callbackupdate) {
    MgBaseShape::update();
    return;
  } else {
    swig_callbackupdate();
  }
}

void SwigDirector_MgBaseRect::transform(Matrix2d const &mat) {
  void * jmat = 0 ;
  
  if (!swig_callbacktransform) {
    MgBaseShape::transform(mat);
    return;
  } else {
    jmat = (Matrix2d *) &mat; 
    swig_callbacktransform(jmat);
  }
}

void SwigDirector_MgBaseRect::clear() {
  if (!swig_callbackclear) {
    MgBaseShape::clear();
    return;
  } else {
    swig_callbackclear();
  }
}

void SwigDirector_MgBaseRect::clearCachedData() {
  if (!swig_callbackclearCachedData) {
    MgBaseShape::clearCachedData();
    return;
  } else {
    swig_callbackclearCachedData();
  }
}

int SwigDirector_MgBaseRect::getPointCount() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetPointCount) {
    throw Swig::DirectorPureVirtualException("MgBaseRect::getPointCount");
  } else {
    jresult = (int) swig_callbackgetPointCount();
    c_result = (int)jresult; 
  }
  return c_result;
}

Point2d SwigDirector_MgBaseRect::getPoint(int index) const {
  Point2d c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetPoint) {
    throw Swig::DirectorPureVirtualException("MgBaseRect::getPoint");
  } else {
    jindex = index;
    jresult = (void *) swig_callbackgetPoint(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Point2d", 0);
      return c_result;
    }
    c_result = *(Point2d *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseRect::setPoint(int index, Point2d const &pt) {
  int jindex  ;
  void * jpt = 0 ;
  
  if (!swig_callbacksetPoint) {
    throw Swig::DirectorPureVirtualException("MgBaseRect::setPoint");
  } else {
    jindex = index;
    jpt = (Point2d *) &pt; 
    swig_callbacksetPoint(jindex, jpt);
  }
}

bool SwigDirector_MgBaseRect::isClosed() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisClosed) {
    return MgBaseShape::isClosed();
  } else {
    jresult = (unsigned int) swig_callbackisClosed();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::isCurve() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisCurve) {
    return MgBaseShape::isCurve();
  } else {
    jresult = (unsigned int) swig_callbackisCurve();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

float SwigDirector_MgBaseRect::hitTest(Point2d const &pt, float tol, MgHitResult &res) const {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  void * jpt = 0 ;
  float jtol  ;
  void * jres = 0 ;
  
  if (!swig_callbackhitTest) {
    throw Swig::DirectorPureVirtualException("MgBaseRect::hitTest");
  } else {
    jpt = (Point2d *) &pt; 
    jtol = tol;
    jres = (MgHitResult *) &res; 
    jresult = (float) swig_callbackhitTest(jpt, jtol, jres);
    c_result = (float)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::hitTestBox(Box2d const &rect) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jrect = 0 ;
  
  if (!swig_callbackhitTestBox) {
    return MgBaseShape::hitTestBox(rect);
  } else {
    jrect = (Box2d *) &rect; 
    jresult = (unsigned int) swig_callbackhitTestBox(jrect);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::draw(int mode, GiGraphics &gs, GiContext const &ctx, int segment) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jmode  ;
  void * jgs = 0 ;
  void * jctx = 0 ;
  int jsegment  ;
  
  if (!swig_callbackdraw) {
    return MgBaseShape::draw(mode,gs,ctx,segment);
  } else {
    jmode = mode;
    jgs = (GiGraphics *) &gs; 
    jctx = (GiContext *) &ctx; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackdraw(jmode, jgs, jctx, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::draw2(MgObject const *owner, int mode, GiGraphics &gs, GiContext const &ctx, int segment) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jowner = 0 ;
  int jmode  ;
  void * jgs = 0 ;
  void * jctx = 0 ;
  int jsegment  ;
  
  if (!swig_callbackdraw2) {
    return MgBaseShape::draw2(owner,mode,gs,ctx,segment);
  } else {
    jowner = (void *) owner; 
    jmode = mode;
    jgs = (GiGraphics *) &gs; 
    jctx = (GiContext *) &ctx; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackdraw2(jowner, jmode, jgs, jctx, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgBaseRect::output(MgPath &path) const {
  void * jpath = 0 ;
  
  if (!swig_callbackoutput) {
    throw Swig::DirectorPureVirtualException("MgBaseRect::output");
  } else {
    jpath = (MgPath *) &path; 
    swig_callbackoutput(jpath);
  }
}

bool SwigDirector_MgBaseRect::save(MgStorage *s) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbacksave) {
    return MgBaseShape::save(s);
  } else {
    js = (void *) s; 
    jresult = (unsigned int) swig_callbacksave(js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::load(MgShapeFactory *factory, MgStorage *s) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jfactory = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackload) {
    return MgBaseShape::load(factory,s);
  } else {
    jfactory = (void *) factory; 
    js = (void *) s; 
    jresult = (unsigned int) swig_callbackload(jfactory, js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseRect::getHandleCount() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetHandleCount) {
    return MgBaseShape::getHandleCount();
  } else {
    jresult = (int) swig_callbackgetHandleCount();
    c_result = (int)jresult; 
  }
  return c_result;
}

Point2d SwigDirector_MgBaseRect::getHandlePoint(int index) const {
  Point2d c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetHandlePoint) {
    return MgBaseShape::getHandlePoint(index);
  } else {
    jindex = index;
    jresult = (void *) swig_callbackgetHandlePoint(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Point2d", 0);
      return c_result;
    }
    c_result = *(Point2d *)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::setHandlePoint(int index, Point2d const &pt, float tol) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  void * jpt = 0 ;
  float jtol  ;
  
  if (!swig_callbacksetHandlePoint) {
    return MgBaseShape::setHandlePoint(index,pt,tol);
  } else {
    jindex = index;
    jpt = (Point2d *) &pt; 
    jtol = tol;
    jresult = (unsigned int) swig_callbacksetHandlePoint(jindex, jpt, jtol);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::isHandleFixed(int index) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackisHandleFixed) {
    return MgBaseShape::isHandleFixed(index);
  } else {
    jindex = index;
    jresult = (unsigned int) swig_callbackisHandleFixed(jindex);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseRect::getHandleType(int index) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetHandleType) {
    return MgBaseShape::getHandleType(index);
  } else {
    jindex = index;
    jresult = (int) swig_callbackgetHandleType(jindex);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseRect::offset(Vector2d const &vec, int segment) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jvec = 0 ;
  int jsegment  ;
  
  if (!swig_callbackoffset) {
    return MgBaseShape::offset(vec,segment);
  } else {
    jvec = (Vector2d *) &vec; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackoffset(jvec, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgBaseRect::setFlag(MgShapeBit bit, bool on) {
  int jbit  ;
  unsigned int jon  ;
  
  if (!swig_callbacksetFlag) {
    MgBaseShape::setFlag(bit,on);
    return;
  } else {
    jbit = (int)bit;
    jon = on;
    swig_callbacksetFlag(jbit, jon);
  }
}

void SwigDirector_MgBaseRect::setOwner(MgObject *owner) {
  void * jowner = 0 ;
  
  if (!swig_callbacksetOwner) {
    MgBaseShape::setOwner(owner);
    return;
  } else {
    jowner = (void *) owner; 
    swig_callbacksetOwner(jowner);
  }
}

int SwigDirector_MgBaseRect::getSubType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetSubType) {
    return MgBaseShape::getSubType();
  } else {
    jresult = (int) swig_callbackgetSubType();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseRect::swig_connect_director(SWIG_Callback0_t callbackclone, SWIG_Callback1_t callbackcopy, SWIG_Callback2_t callbackrelease, SWIG_Callback3_t callbackaddRef, SWIG_Callback4_t callbackequals, SWIG_Callback5_t callbackgetType, SWIG_Callback6_t callbackisKindOf, SWIG_Callback7_t callbackgetExtent, SWIG_Callback8_t callbackgetChangeCount, SWIG_Callback9_t callbackresetChangeCount, SWIG_Callback10_t callbackafterChanged, SWIG_Callback11_t callbackupdate, SWIG_Callback12_t callbacktransform, SWIG_Callback13_t callbackclear, SWIG_Callback14_t callbackclearCachedData, SWIG_Callback15_t callbackgetPointCount, SWIG_Callback16_t callbackgetPoint, SWIG_Callback17_t callbacksetPoint, SWIG_Callback18_t callbackisClosed, SWIG_Callback19_t callbackisCurve, SWIG_Callback20_t callbackhitTest, SWIG_Callback21_t callbackhitTestBox, SWIG_Callback22_t callbackdraw, SWIG_Callback23_t callbackdraw2, SWIG_Callback24_t callbackoutput, SWIG_Callback25_t callbacksave, SWIG_Callback26_t callbackload, SWIG_Callback27_t callbackgetHandleCount, SWIG_Callback28_t callbackgetHandlePoint, SWIG_Callback29_t callbacksetHandlePoint, SWIG_Callback30_t callbackisHandleFixed, SWIG_Callback31_t callbackgetHandleType, SWIG_Callback32_t callbackoffset, SWIG_Callback33_t callbacksetFlag, SWIG_Callback34_t callbacksetOwner, SWIG_Callback35_t callbackgetSubType) {
  swig_callbackclone = callbackclone;
  swig_callbackcopy = callbackcopy;
  swig_callbackrelease = callbackrelease;
  swig_callbackaddRef = callbackaddRef;
  swig_callbackequals = callbackequals;
  swig_callbackgetType = callbackgetType;
  swig_callbackisKindOf = callbackisKindOf;
  swig_callbackgetExtent = callbackgetExtent;
  swig_callbackgetChangeCount = callbackgetChangeCount;
  swig_callbackresetChangeCount = callbackresetChangeCount;
  swig_callbackafterChanged = callbackafterChanged;
  swig_callbackupdate = callbackupdate;
  swig_callbacktransform = callbacktransform;
  swig_callbackclear = callbackclear;
  swig_callbackclearCachedData = callbackclearCachedData;
  swig_callbackgetPointCount = callbackgetPointCount;
  swig_callbackgetPoint = callbackgetPoint;
  swig_callbacksetPoint = callbacksetPoint;
  swig_callbackisClosed = callbackisClosed;
  swig_callbackisCurve = callbackisCurve;
  swig_callbackhitTest = callbackhitTest;
  swig_callbackhitTestBox = callbackhitTestBox;
  swig_callbackdraw = callbackdraw;
  swig_callbackdraw2 = callbackdraw2;
  swig_callbackoutput = callbackoutput;
  swig_callbacksave = callbacksave;
  swig_callbackload = callbackload;
  swig_callbackgetHandleCount = callbackgetHandleCount;
  swig_callbackgetHandlePoint = callbackgetHandlePoint;
  swig_callbacksetHandlePoint = callbacksetHandlePoint;
  swig_callbackisHandleFixed = callbackisHandleFixed;
  swig_callbackgetHandleType = callbackgetHandleType;
  swig_callbackoffset = callbackoffset;
  swig_callbacksetFlag = callbacksetFlag;
  swig_callbacksetOwner = callbacksetOwner;
  swig_callbackgetSubType = callbackgetSubType;
}

void SwigDirector_MgBaseRect::swig_init_callbacks() {
  swig_callbackclone = 0;
  swig_callbackcopy = 0;
  swig_callbackrelease = 0;
  swig_callbackaddRef = 0;
  swig_callbackequals = 0;
  swig_callbackgetType = 0;
  swig_callbackisKindOf = 0;
  swig_callbackgetExtent = 0;
  swig_callbackgetChangeCount = 0;
  swig_callbackresetChangeCount = 0;
  swig_callbackafterChanged = 0;
  swig_callbackupdate = 0;
  swig_callbacktransform = 0;
  swig_callbackclear = 0;
  swig_callbackclearCachedData = 0;
  swig_callbackgetPointCount = 0;
  swig_callbackgetPoint = 0;
  swig_callbacksetPoint = 0;
  swig_callbackisClosed = 0;
  swig_callbackisCurve = 0;
  swig_callbackhitTest = 0;
  swig_callbackhitTestBox = 0;
  swig_callbackdraw = 0;
  swig_callbackdraw2 = 0;
  swig_callbackoutput = 0;
  swig_callbacksave = 0;
  swig_callbackload = 0;
  swig_callbackgetHandleCount = 0;
  swig_callbackgetHandlePoint = 0;
  swig_callbacksetHandlePoint = 0;
  swig_callbackisHandleFixed = 0;
  swig_callbackgetHandleType = 0;
  swig_callbackoffset = 0;
  swig_callbacksetFlag = 0;
  swig_callbacksetOwner = 0;
  swig_callbackgetSubType = 0;
}

SwigDirector_MgBaseLines::SwigDirector_MgBaseLines() : MgBaseLines(), Swig::Director() {
  swig_init_callbacks();
}

MgObject *SwigDirector_MgBaseLines::clone() const {
  MgObject *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackclone) {
    throw Swig::DirectorPureVirtualException("MgBaseLines::clone");
  } else {
    jresult = (void *) swig_callbackclone();
    c_result = (MgObject *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseLines::copy(MgObject const &src) {
  void * jsrc = 0 ;
  
  if (!swig_callbackcopy) {
    MgBaseShape::copy(src);
    return;
  } else {
    jsrc = (MgObject *) &src; 
    swig_callbackcopy(jsrc);
  }
}

void SwigDirector_MgBaseLines::release() {
  if (!swig_callbackrelease) {
    throw Swig::DirectorPureVirtualException("MgBaseLines::release");
  } else {
    swig_callbackrelease();
  }
}

void SwigDirector_MgBaseLines::addRef() {
  if (!swig_callbackaddRef) {
    MgBaseShape::addRef();
    return;
  } else {
    swig_callbackaddRef();
  }
}

bool SwigDirector_MgBaseLines::equals(MgObject const &src) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsrc = 0 ;
  
  if (!swig_callbackequals) {
    return MgBaseShape::equals(src);
  } else {
    jsrc = (MgObject *) &src; 
    jresult = (unsigned int) swig_callbackequals(jsrc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseLines::getType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetType) {
    throw Swig::DirectorPureVirtualException("MgBaseLines::getType");
  } else {
    jresult = (int) swig_callbackgetType();
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::isKindOf(int type) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  
  if (!swig_callbackisKindOf) {
    return MgBaseShape::isKindOf(type);
  } else {
    jtype = type;
    jresult = (unsigned int) swig_callbackisKindOf(jtype);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

SwigDirector_MgBaseLines::~SwigDirector_MgBaseLines() {
  
}


Box2d SwigDirector_MgBaseLines::getExtent() const {
  Box2d c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetExtent) {
    return MgBaseShape::getExtent();
  } else {
    jresult = (void *) swig_callbackgetExtent();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Box2d", 0);
      return c_result;
    }
    c_result = *(Box2d *)jresult; 
  }
  return c_result;
}

long SwigDirector_MgBaseLines::getChangeCount() const {
  long c_result = SwigValueInit< long >() ;
  long jresult = 0 ;
  
  if (!swig_callbackgetChangeCount) {
    return MgBaseShape::getChangeCount();
  } else {
    jresult = (long) swig_callbackgetChangeCount();
    c_result = (long)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseLines::resetChangeCount(long count) {
  long jcount  ;
  
  if (!swig_callbackresetChangeCount) {
    MgBaseShape::resetChangeCount(count);
    return;
  } else {
    jcount = count;
    swig_callbackresetChangeCount(jcount);
  }
}

void SwigDirector_MgBaseLines::afterChanged() {
  if (!swig_callbackafterChanged) {
    MgBaseShape::afterChanged();
    return;
  } else {
    swig_callbackafterChanged();
  }
}

void SwigDirector_MgBaseLines::update() {
  if (!swig_callbackupdate) {
    MgBaseShape::update();
    return;
  } else {
    swig_callbackupdate();
  }
}

void SwigDirector_MgBaseLines::transform(Matrix2d const &mat) {
  void * jmat = 0 ;
  
  if (!swig_callbacktransform) {
    MgBaseShape::transform(mat);
    return;
  } else {
    jmat = (Matrix2d *) &mat; 
    swig_callbacktransform(jmat);
  }
}

void SwigDirector_MgBaseLines::clear() {
  if (!swig_callbackclear) {
    MgBaseShape::clear();
    return;
  } else {
    swig_callbackclear();
  }
}

void SwigDirector_MgBaseLines::clearCachedData() {
  if (!swig_callbackclearCachedData) {
    MgBaseShape::clearCachedData();
    return;
  } else {
    swig_callbackclearCachedData();
  }
}

int SwigDirector_MgBaseLines::getPointCount() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetPointCount) {
    throw Swig::DirectorPureVirtualException("MgBaseLines::getPointCount");
  } else {
    jresult = (int) swig_callbackgetPointCount();
    c_result = (int)jresult; 
  }
  return c_result;
}

Point2d SwigDirector_MgBaseLines::getPoint(int index) const {
  Point2d c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetPoint) {
    throw Swig::DirectorPureVirtualException("MgBaseLines::getPoint");
  } else {
    jindex = index;
    jresult = (void *) swig_callbackgetPoint(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Point2d", 0);
      return c_result;
    }
    c_result = *(Point2d *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgBaseLines::setPoint(int index, Point2d const &pt) {
  int jindex  ;
  void * jpt = 0 ;
  
  if (!swig_callbacksetPoint) {
    throw Swig::DirectorPureVirtualException("MgBaseLines::setPoint");
  } else {
    jindex = index;
    jpt = (Point2d *) &pt; 
    swig_callbacksetPoint(jindex, jpt);
  }
}

bool SwigDirector_MgBaseLines::isClosed() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisClosed) {
    return MgBaseShape::isClosed();
  } else {
    jresult = (unsigned int) swig_callbackisClosed();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::isCurve() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisCurve) {
    return MgBaseShape::isCurve();
  } else {
    jresult = (unsigned int) swig_callbackisCurve();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

float SwigDirector_MgBaseLines::hitTest(Point2d const &pt, float tol, MgHitResult &res) const {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  void * jpt = 0 ;
  float jtol  ;
  void * jres = 0 ;
  
  if (!swig_callbackhitTest) {
    throw Swig::DirectorPureVirtualException("MgBaseLines::hitTest");
  } else {
    jpt = (Point2d *) &pt; 
    jtol = tol;
    jres = (MgHitResult *) &res; 
    jresult = (float) swig_callbackhitTest(jpt, jtol, jres);
    c_result = (float)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::hitTestBox(Box2d const &rect) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jrect = 0 ;
  
  if (!swig_callbackhitTestBox) {
    return MgBaseShape::hitTestBox(rect);
  } else {
    jrect = (Box2d *) &rect; 
    jresult = (unsigned int) swig_callbackhitTestBox(jrect);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::draw(int mode, GiGraphics &gs, GiContext const &ctx, int segment) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jmode  ;
  void * jgs = 0 ;
  void * jctx = 0 ;
  int jsegment  ;
  
  if (!swig_callbackdraw) {
    return MgBaseShape::draw(mode,gs,ctx,segment);
  } else {
    jmode = mode;
    jgs = (GiGraphics *) &gs; 
    jctx = (GiContext *) &ctx; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackdraw(jmode, jgs, jctx, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::draw2(MgObject const *owner, int mode, GiGraphics &gs, GiContext const &ctx, int segment) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jowner = 0 ;
  int jmode  ;
  void * jgs = 0 ;
  void * jctx = 0 ;
  int jsegment  ;
  
  if (!swig_callbackdraw2) {
    return MgBaseShape::draw2(owner,mode,gs,ctx,segment);
  } else {
    jowner = (void *) owner; 
    jmode = mode;
    jgs = (GiGraphics *) &gs; 
    jctx = (GiContext *) &ctx; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackdraw2(jowner, jmode, jgs, jctx, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgBaseLines::output(MgPath &path) const {
  void * jpath = 0 ;
  
  if (!swig_callbackoutput) {
    throw Swig::DirectorPureVirtualException("MgBaseLines::output");
  } else {
    jpath = (MgPath *) &path; 
    swig_callbackoutput(jpath);
  }
}

bool SwigDirector_MgBaseLines::save(MgStorage *s) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbacksave) {
    return MgBaseShape::save(s);
  } else {
    js = (void *) s; 
    jresult = (unsigned int) swig_callbacksave(js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::load(MgShapeFactory *factory, MgStorage *s) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jfactory = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackload) {
    return MgBaseShape::load(factory,s);
  } else {
    jfactory = (void *) factory; 
    js = (void *) s; 
    jresult = (unsigned int) swig_callbackload(jfactory, js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseLines::getHandleCount() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetHandleCount) {
    return MgBaseShape::getHandleCount();
  } else {
    jresult = (int) swig_callbackgetHandleCount();
    c_result = (int)jresult; 
  }
  return c_result;
}

Point2d SwigDirector_MgBaseLines::getHandlePoint(int index) const {
  Point2d c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetHandlePoint) {
    return MgBaseShape::getHandlePoint(index);
  } else {
    jindex = index;
    jresult = (void *) swig_callbackgetHandlePoint(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Point2d", 0);
      return c_result;
    }
    c_result = *(Point2d *)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::setHandlePoint(int index, Point2d const &pt, float tol) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  void * jpt = 0 ;
  float jtol  ;
  
  if (!swig_callbacksetHandlePoint) {
    return MgBaseShape::setHandlePoint(index,pt,tol);
  } else {
    jindex = index;
    jpt = (Point2d *) &pt; 
    jtol = tol;
    jresult = (unsigned int) swig_callbacksetHandlePoint(jindex, jpt, jtol);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::isHandleFixed(int index) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackisHandleFixed) {
    return MgBaseShape::isHandleFixed(index);
  } else {
    jindex = index;
    jresult = (unsigned int) swig_callbackisHandleFixed(jindex);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgBaseLines::getHandleType(int index) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetHandleType) {
    return MgBaseShape::getHandleType(index);
  } else {
    jindex = index;
    jresult = (int) swig_callbackgetHandleType(jindex);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::offset(Vector2d const &vec, int segment) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jvec = 0 ;
  int jsegment  ;
  
  if (!swig_callbackoffset) {
    return MgBaseShape::offset(vec,segment);
  } else {
    jvec = (Vector2d *) &vec; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackoffset(jvec, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgBaseLines::setFlag(MgShapeBit bit, bool on) {
  int jbit  ;
  unsigned int jon  ;
  
  if (!swig_callbacksetFlag) {
    MgBaseShape::setFlag(bit,on);
    return;
  } else {
    jbit = (int)bit;
    jon = on;
    swig_callbacksetFlag(jbit, jon);
  }
}

void SwigDirector_MgBaseLines::setOwner(MgObject *owner) {
  void * jowner = 0 ;
  
  if (!swig_callbacksetOwner) {
    MgBaseShape::setOwner(owner);
    return;
  } else {
    jowner = (void *) owner; 
    swig_callbacksetOwner(jowner);
  }
}

int SwigDirector_MgBaseLines::getSubType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetSubType) {
    return MgBaseShape::getSubType();
  } else {
    jresult = (int) swig_callbackgetSubType();
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::resize(int count) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jcount  ;
  
  if (!swig_callbackresize) {
    return MgBaseLines::resize(count);
  } else {
    jcount = count;
    jresult = (unsigned int) swig_callbackresize(jcount);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::addPoint(Point2d const &pt) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jpt = 0 ;
  
  if (!swig_callbackaddPoint) {
    return MgBaseLines::addPoint(pt);
  } else {
    jpt = (Point2d *) &pt; 
    jresult = (unsigned int) swig_callbackaddPoint(jpt);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::insertPoint(int segment, Point2d const &pt) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jsegment  ;
  void * jpt = 0 ;
  
  if (!swig_callbackinsertPoint) {
    return MgBaseLines::insertPoint(segment,pt);
  } else {
    jsegment = segment;
    jpt = (Point2d *) &pt; 
    jresult = (unsigned int) swig_callbackinsertPoint(jsegment, jpt);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgBaseLines::removePoint(int index) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackremovePoint) {
    return MgBaseLines::removePoint(index);
  } else {
    jindex = index;
    jresult = (unsigned int) swig_callbackremovePoint(jindex);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgBaseLines::swig_connect_director(SWIG_Callback0_t callbackclone, SWIG_Callback1_t callbackcopy, SWIG_Callback2_t callbackrelease, SWIG_Callback3_t callbackaddRef, SWIG_Callback4_t callbackequals, SWIG_Callback5_t callbackgetType, SWIG_Callback6_t callbackisKindOf, SWIG_Callback7_t callbackgetExtent, SWIG_Callback8_t callbackgetChangeCount, SWIG_Callback9_t callbackresetChangeCount, SWIG_Callback10_t callbackafterChanged, SWIG_Callback11_t callbackupdate, SWIG_Callback12_t callbacktransform, SWIG_Callback13_t callbackclear, SWIG_Callback14_t callbackclearCachedData, SWIG_Callback15_t callbackgetPointCount, SWIG_Callback16_t callbackgetPoint, SWIG_Callback17_t callbacksetPoint, SWIG_Callback18_t callbackisClosed, SWIG_Callback19_t callbackisCurve, SWIG_Callback20_t callbackhitTest, SWIG_Callback21_t callbackhitTestBox, SWIG_Callback22_t callbackdraw, SWIG_Callback23_t callbackdraw2, SWIG_Callback24_t callbackoutput, SWIG_Callback25_t callbacksave, SWIG_Callback26_t callbackload, SWIG_Callback27_t callbackgetHandleCount, SWIG_Callback28_t callbackgetHandlePoint, SWIG_Callback29_t callbacksetHandlePoint, SWIG_Callback30_t callbackisHandleFixed, SWIG_Callback31_t callbackgetHandleType, SWIG_Callback32_t callbackoffset, SWIG_Callback33_t callbacksetFlag, SWIG_Callback34_t callbacksetOwner, SWIG_Callback35_t callbackgetSubType, SWIG_Callback36_t callbackresize, SWIG_Callback37_t callbackaddPoint, SWIG_Callback38_t callbackinsertPoint, SWIG_Callback39_t callbackremovePoint) {
  swig_callbackclone = callbackclone;
  swig_callbackcopy = callbackcopy;
  swig_callbackrelease = callbackrelease;
  swig_callbackaddRef = callbackaddRef;
  swig_callbackequals = callbackequals;
  swig_callbackgetType = callbackgetType;
  swig_callbackisKindOf = callbackisKindOf;
  swig_callbackgetExtent = callbackgetExtent;
  swig_callbackgetChangeCount = callbackgetChangeCount;
  swig_callbackresetChangeCount = callbackresetChangeCount;
  swig_callbackafterChanged = callbackafterChanged;
  swig_callbackupdate = callbackupdate;
  swig_callbacktransform = callbacktransform;
  swig_callbackclear = callbackclear;
  swig_callbackclearCachedData = callbackclearCachedData;
  swig_callbackgetPointCount = callbackgetPointCount;
  swig_callbackgetPoint = callbackgetPoint;
  swig_callbacksetPoint = callbacksetPoint;
  swig_callbackisClosed = callbackisClosed;
  swig_callbackisCurve = callbackisCurve;
  swig_callbackhitTest = callbackhitTest;
  swig_callbackhitTestBox = callbackhitTestBox;
  swig_callbackdraw = callbackdraw;
  swig_callbackdraw2 = callbackdraw2;
  swig_callbackoutput = callbackoutput;
  swig_callbacksave = callbacksave;
  swig_callbackload = callbackload;
  swig_callbackgetHandleCount = callbackgetHandleCount;
  swig_callbackgetHandlePoint = callbackgetHandlePoint;
  swig_callbacksetHandlePoint = callbacksetHandlePoint;
  swig_callbackisHandleFixed = callbackisHandleFixed;
  swig_callbackgetHandleType = callbackgetHandleType;
  swig_callbackoffset = callbackoffset;
  swig_callbacksetFlag = callbacksetFlag;
  swig_callbacksetOwner = callbacksetOwner;
  swig_callbackgetSubType = callbackgetSubType;
  swig_callbackresize = callbackresize;
  swig_callbackaddPoint = callbackaddPoint;
  swig_callbackinsertPoint = callbackinsertPoint;
  swig_callbackremovePoint = callbackremovePoint;
}

void SwigDirector_MgBaseLines::swig_init_callbacks() {
  swig_callbackclone = 0;
  swig_callbackcopy = 0;
  swig_callbackrelease = 0;
  swig_callbackaddRef = 0;
  swig_callbackequals = 0;
  swig_callbackgetType = 0;
  swig_callbackisKindOf = 0;
  swig_callbackgetExtent = 0;
  swig_callbackgetChangeCount = 0;
  swig_callbackresetChangeCount = 0;
  swig_callbackafterChanged = 0;
  swig_callbackupdate = 0;
  swig_callbacktransform = 0;
  swig_callbackclear = 0;
  swig_callbackclearCachedData = 0;
  swig_callbackgetPointCount = 0;
  swig_callbackgetPoint = 0;
  swig_callbacksetPoint = 0;
  swig_callbackisClosed = 0;
  swig_callbackisCurve = 0;
  swig_callbackhitTest = 0;
  swig_callbackhitTestBox = 0;
  swig_callbackdraw = 0;
  swig_callbackdraw2 = 0;
  swig_callbackoutput = 0;
  swig_callbacksave = 0;
  swig_callbackload = 0;
  swig_callbackgetHandleCount = 0;
  swig_callbackgetHandlePoint = 0;
  swig_callbacksetHandlePoint = 0;
  swig_callbackisHandleFixed = 0;
  swig_callbackgetHandleType = 0;
  swig_callbackoffset = 0;
  swig_callbacksetFlag = 0;
  swig_callbacksetOwner = 0;
  swig_callbackgetSubType = 0;
  swig_callbackresize = 0;
  swig_callbackaddPoint = 0;
  swig_callbackinsertPoint = 0;
  swig_callbackremovePoint = 0;
}

SwigDirector_MgComposite::SwigDirector_MgComposite() : MgComposite(), Swig::Director() {
  swig_init_callbacks();
}

MgObject *SwigDirector_MgComposite::clone() const {
  MgObject *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackclone) {
    throw Swig::DirectorPureVirtualException("MgComposite::clone");
  } else {
    jresult = (void *) swig_callbackclone();
    c_result = (MgObject *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgComposite::copy(MgObject const &src) {
  void * jsrc = 0 ;
  
  if (!swig_callbackcopy) {
    MgBaseShape::copy(src);
    return;
  } else {
    jsrc = (MgObject *) &src; 
    swig_callbackcopy(jsrc);
  }
}

void SwigDirector_MgComposite::release() {
  if (!swig_callbackrelease) {
    throw Swig::DirectorPureVirtualException("MgComposite::release");
  } else {
    swig_callbackrelease();
  }
}

void SwigDirector_MgComposite::addRef() {
  if (!swig_callbackaddRef) {
    MgBaseShape::addRef();
    return;
  } else {
    swig_callbackaddRef();
  }
}

bool SwigDirector_MgComposite::equals(MgObject const &src) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsrc = 0 ;
  
  if (!swig_callbackequals) {
    return MgBaseShape::equals(src);
  } else {
    jsrc = (MgObject *) &src; 
    jresult = (unsigned int) swig_callbackequals(jsrc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgComposite::getType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetType) {
    throw Swig::DirectorPureVirtualException("MgComposite::getType");
  } else {
    jresult = (int) swig_callbackgetType();
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::isKindOf(int type) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  
  if (!swig_callbackisKindOf) {
    return MgBaseShape::isKindOf(type);
  } else {
    jtype = type;
    jresult = (unsigned int) swig_callbackisKindOf(jtype);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

SwigDirector_MgComposite::~SwigDirector_MgComposite() {
  
}


Box2d SwigDirector_MgComposite::getExtent() const {
  Box2d c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetExtent) {
    return MgBaseShape::getExtent();
  } else {
    jresult = (void *) swig_callbackgetExtent();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Box2d", 0);
      return c_result;
    }
    c_result = *(Box2d *)jresult; 
  }
  return c_result;
}

long SwigDirector_MgComposite::getChangeCount() const {
  long c_result = SwigValueInit< long >() ;
  long jresult = 0 ;
  
  if (!swig_callbackgetChangeCount) {
    return MgBaseShape::getChangeCount();
  } else {
    jresult = (long) swig_callbackgetChangeCount();
    c_result = (long)jresult; 
  }
  return c_result;
}

void SwigDirector_MgComposite::resetChangeCount(long count) {
  long jcount  ;
  
  if (!swig_callbackresetChangeCount) {
    MgBaseShape::resetChangeCount(count);
    return;
  } else {
    jcount = count;
    swig_callbackresetChangeCount(jcount);
  }
}

void SwigDirector_MgComposite::afterChanged() {
  if (!swig_callbackafterChanged) {
    MgBaseShape::afterChanged();
    return;
  } else {
    swig_callbackafterChanged();
  }
}

void SwigDirector_MgComposite::update() {
  if (!swig_callbackupdate) {
    MgBaseShape::update();
    return;
  } else {
    swig_callbackupdate();
  }
}

void SwigDirector_MgComposite::transform(Matrix2d const &mat) {
  void * jmat = 0 ;
  
  if (!swig_callbacktransform) {
    MgBaseShape::transform(mat);
    return;
  } else {
    jmat = (Matrix2d *) &mat; 
    swig_callbacktransform(jmat);
  }
}

void SwigDirector_MgComposite::clear() {
  if (!swig_callbackclear) {
    MgBaseShape::clear();
    return;
  } else {
    swig_callbackclear();
  }
}

void SwigDirector_MgComposite::clearCachedData() {
  if (!swig_callbackclearCachedData) {
    MgBaseShape::clearCachedData();
    return;
  } else {
    swig_callbackclearCachedData();
  }
}

int SwigDirector_MgComposite::getPointCount() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetPointCount) {
    throw Swig::DirectorPureVirtualException("MgComposite::getPointCount");
  } else {
    jresult = (int) swig_callbackgetPointCount();
    c_result = (int)jresult; 
  }
  return c_result;
}

Point2d SwigDirector_MgComposite::getPoint(int index) const {
  Point2d c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetPoint) {
    throw Swig::DirectorPureVirtualException("MgComposite::getPoint");
  } else {
    jindex = index;
    jresult = (void *) swig_callbackgetPoint(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Point2d", 0);
      return c_result;
    }
    c_result = *(Point2d *)jresult; 
  }
  return c_result;
}

void SwigDirector_MgComposite::setPoint(int index, Point2d const &pt) {
  int jindex  ;
  void * jpt = 0 ;
  
  if (!swig_callbacksetPoint) {
    throw Swig::DirectorPureVirtualException("MgComposite::setPoint");
  } else {
    jindex = index;
    jpt = (Point2d *) &pt; 
    swig_callbacksetPoint(jindex, jpt);
  }
}

bool SwigDirector_MgComposite::isClosed() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisClosed) {
    return MgBaseShape::isClosed();
  } else {
    jresult = (unsigned int) swig_callbackisClosed();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::isCurve() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisCurve) {
    return MgBaseShape::isCurve();
  } else {
    jresult = (unsigned int) swig_callbackisCurve();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

float SwigDirector_MgComposite::hitTest(Point2d const &pt, float tol, MgHitResult &res) const {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  void * jpt = 0 ;
  float jtol  ;
  void * jres = 0 ;
  
  if (!swig_callbackhitTest) {
    throw Swig::DirectorPureVirtualException("MgComposite::hitTest");
  } else {
    jpt = (Point2d *) &pt; 
    jtol = tol;
    jres = (MgHitResult *) &res; 
    jresult = (float) swig_callbackhitTest(jpt, jtol, jres);
    c_result = (float)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::hitTestBox(Box2d const &rect) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jrect = 0 ;
  
  if (!swig_callbackhitTestBox) {
    return MgBaseShape::hitTestBox(rect);
  } else {
    jrect = (Box2d *) &rect; 
    jresult = (unsigned int) swig_callbackhitTestBox(jrect);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::draw(int mode, GiGraphics &gs, GiContext const &ctx, int segment) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jmode  ;
  void * jgs = 0 ;
  void * jctx = 0 ;
  int jsegment  ;
  
  if (!swig_callbackdraw) {
    return MgBaseShape::draw(mode,gs,ctx,segment);
  } else {
    jmode = mode;
    jgs = (GiGraphics *) &gs; 
    jctx = (GiContext *) &ctx; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackdraw(jmode, jgs, jctx, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::draw2(MgObject const *owner, int mode, GiGraphics &gs, GiContext const &ctx, int segment) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jowner = 0 ;
  int jmode  ;
  void * jgs = 0 ;
  void * jctx = 0 ;
  int jsegment  ;
  
  if (!swig_callbackdraw2) {
    return MgBaseShape::draw2(owner,mode,gs,ctx,segment);
  } else {
    jowner = (void *) owner; 
    jmode = mode;
    jgs = (GiGraphics *) &gs; 
    jctx = (GiContext *) &ctx; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackdraw2(jowner, jmode, jgs, jctx, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgComposite::output(MgPath &path) const {
  void * jpath = 0 ;
  
  if (!swig_callbackoutput) {
    throw Swig::DirectorPureVirtualException("MgComposite::output");
  } else {
    jpath = (MgPath *) &path; 
    swig_callbackoutput(jpath);
  }
}

bool SwigDirector_MgComposite::save(MgStorage *s) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbacksave) {
    return MgBaseShape::save(s);
  } else {
    js = (void *) s; 
    jresult = (unsigned int) swig_callbacksave(js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::load(MgShapeFactory *factory, MgStorage *s) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jfactory = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackload) {
    return MgBaseShape::load(factory,s);
  } else {
    jfactory = (void *) factory; 
    js = (void *) s; 
    jresult = (unsigned int) swig_callbackload(jfactory, js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgComposite::getHandleCount() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetHandleCount) {
    return MgBaseShape::getHandleCount();
  } else {
    jresult = (int) swig_callbackgetHandleCount();
    c_result = (int)jresult; 
  }
  return c_result;
}

Point2d SwigDirector_MgComposite::getHandlePoint(int index) const {
  Point2d c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetHandlePoint) {
    return MgBaseShape::getHandlePoint(index);
  } else {
    jindex = index;
    jresult = (void *) swig_callbackgetHandlePoint(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Point2d", 0);
      return c_result;
    }
    c_result = *(Point2d *)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::setHandlePoint(int index, Point2d const &pt, float tol) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  void * jpt = 0 ;
  float jtol  ;
  
  if (!swig_callbacksetHandlePoint) {
    return MgBaseShape::setHandlePoint(index,pt,tol);
  } else {
    jindex = index;
    jpt = (Point2d *) &pt; 
    jtol = tol;
    jresult = (unsigned int) swig_callbacksetHandlePoint(jindex, jpt, jtol);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::isHandleFixed(int index) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackisHandleFixed) {
    return MgBaseShape::isHandleFixed(index);
  } else {
    jindex = index;
    jresult = (unsigned int) swig_callbackisHandleFixed(jindex);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgComposite::getHandleType(int index) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetHandleType) {
    return MgBaseShape::getHandleType(index);
  } else {
    jindex = index;
    jresult = (int) swig_callbackgetHandleType(jindex);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::offset(Vector2d const &vec, int segment) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jvec = 0 ;
  int jsegment  ;
  
  if (!swig_callbackoffset) {
    return MgBaseShape::offset(vec,segment);
  } else {
    jvec = (Vector2d *) &vec; 
    jsegment = segment;
    jresult = (unsigned int) swig_callbackoffset(jvec, jsegment);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgComposite::setFlag(MgShapeBit bit, bool on) {
  int jbit  ;
  unsigned int jon  ;
  
  if (!swig_callbacksetFlag) {
    MgBaseShape::setFlag(bit,on);
    return;
  } else {
    jbit = (int)bit;
    jon = on;
    swig_callbacksetFlag(jbit, jon);
  }
}

void SwigDirector_MgComposite::setOwner(MgObject *owner) {
  void * jowner = 0 ;
  
  if (!swig_callbacksetOwner) {
    MgBaseShape::setOwner(owner);
    return;
  } else {
    jowner = (void *) owner; 
    swig_callbacksetOwner(jowner);
  }
}

int SwigDirector_MgComposite::getSubType() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetSubType) {
    return MgBaseShape::getSubType();
  } else {
    jresult = (int) swig_callbackgetSubType();
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_MgComposite::canOffsetShapeAlone(MgShape *shape) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jshape = 0 ;
  
  if (!swig_callbackcanOffsetShapeAlone) {
    return MgComposite::canOffsetShapeAlone(shape);
  } else {
    jshape = (void *) shape; 
    jresult = (unsigned int) swig_callbackcanOffsetShapeAlone(jshape);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgComposite::swig_connect_director(SWIG_Callback0_t callbackclone, SWIG_Callback1_t callbackcopy, SWIG_Callback2_t callbackrelease, SWIG_Callback3_t callbackaddRef, SWIG_Callback4_t callbackequals, SWIG_Callback5_t callbackgetType, SWIG_Callback6_t callbackisKindOf, SWIG_Callback7_t callbackgetExtent, SWIG_Callback8_t callbackgetChangeCount, SWIG_Callback9_t callbackresetChangeCount, SWIG_Callback10_t callbackafterChanged, SWIG_Callback11_t callbackupdate, SWIG_Callback12_t callbacktransform, SWIG_Callback13_t callbackclear, SWIG_Callback14_t callbackclearCachedData, SWIG_Callback15_t callbackgetPointCount, SWIG_Callback16_t callbackgetPoint, SWIG_Callback17_t callbacksetPoint, SWIG_Callback18_t callbackisClosed, SWIG_Callback19_t callbackisCurve, SWIG_Callback20_t callbackhitTest, SWIG_Callback21_t callbackhitTestBox, SWIG_Callback22_t callbackdraw, SWIG_Callback23_t callbackdraw2, SWIG_Callback24_t callbackoutput, SWIG_Callback25_t callbacksave, SWIG_Callback26_t callbackload, SWIG_Callback27_t callbackgetHandleCount, SWIG_Callback28_t callbackgetHandlePoint, SWIG_Callback29_t callbacksetHandlePoint, SWIG_Callback30_t callbackisHandleFixed, SWIG_Callback31_t callbackgetHandleType, SWIG_Callback32_t callbackoffset, SWIG_Callback33_t callbacksetFlag, SWIG_Callback34_t callbacksetOwner, SWIG_Callback35_t callbackgetSubType, SWIG_Callback36_t callbackcanOffsetShapeAlone) {
  swig_callbackclone = callbackclone;
  swig_callbackcopy = callbackcopy;
  swig_callbackrelease = callbackrelease;
  swig_callbackaddRef = callbackaddRef;
  swig_callbackequals = callbackequals;
  swig_callbackgetType = callbackgetType;
  swig_callbackisKindOf = callbackisKindOf;
  swig_callbackgetExtent = callbackgetExtent;
  swig_callbackgetChangeCount = callbackgetChangeCount;
  swig_callbackresetChangeCount = callbackresetChangeCount;
  swig_callbackafterChanged = callbackafterChanged;
  swig_callbackupdate = callbackupdate;
  swig_callbacktransform = callbacktransform;
  swig_callbackclear = callbackclear;
  swig_callbackclearCachedData = callbackclearCachedData;
  swig_callbackgetPointCount = callbackgetPointCount;
  swig_callbackgetPoint = callbackgetPoint;
  swig_callbacksetPoint = callbacksetPoint;
  swig_callbackisClosed = callbackisClosed;
  swig_callbackisCurve = callbackisCurve;
  swig_callbackhitTest = callbackhitTest;
  swig_callbackhitTestBox = callbackhitTestBox;
  swig_callbackdraw = callbackdraw;
  swig_callbackdraw2 = callbackdraw2;
  swig_callbackoutput = callbackoutput;
  swig_callbacksave = callbacksave;
  swig_callbackload = callbackload;
  swig_callbackgetHandleCount = callbackgetHandleCount;
  swig_callbackgetHandlePoint = callbackgetHandlePoint;
  swig_callbacksetHandlePoint = callbacksetHandlePoint;
  swig_callbackisHandleFixed = callbackisHandleFixed;
  swig_callbackgetHandleType = callbackgetHandleType;
  swig_callbackoffset = callbackoffset;
  swig_callbacksetFlag = callbacksetFlag;
  swig_callbacksetOwner = callbacksetOwner;
  swig_callbackgetSubType = callbackgetSubType;
  swig_callbackcanOffsetShapeAlone = callbackcanOffsetShapeAlone;
}

void SwigDirector_MgComposite::swig_init_callbacks() {
  swig_callbackclone = 0;
  swig_callbackcopy = 0;
  swig_callbackrelease = 0;
  swig_callbackaddRef = 0;
  swig_callbackequals = 0;
  swig_callbackgetType = 0;
  swig_callbackisKindOf = 0;
  swig_callbackgetExtent = 0;
  swig_callbackgetChangeCount = 0;
  swig_callbackresetChangeCount = 0;
  swig_callbackafterChanged = 0;
  swig_callbackupdate = 0;
  swig_callbacktransform = 0;
  swig_callbackclear = 0;
  swig_callbackclearCachedData = 0;
  swig_callbackgetPointCount = 0;
  swig_callbackgetPoint = 0;
  swig_callbacksetPoint = 0;
  swig_callbackisClosed = 0;
  swig_callbackisCurve = 0;
  swig_callbackhitTest = 0;
  swig_callbackhitTestBox = 0;
  swig_callbackdraw = 0;
  swig_callbackdraw2 = 0;
  swig_callbackoutput = 0;
  swig_callbacksave = 0;
  swig_callbackload = 0;
  swig_callbackgetHandleCount = 0;
  swig_callbackgetHandlePoint = 0;
  swig_callbacksetHandlePoint = 0;
  swig_callbackisHandleFixed = 0;
  swig_callbackgetHandleType = 0;
  swig_callbackoffset = 0;
  swig_callbacksetFlag = 0;
  swig_callbacksetOwner = 0;
  swig_callbackgetSubType = 0;
  swig_callbackcanOffsetShapeAlone = 0;
}

SwigDirector_MgCommand::SwigDirector_MgCommand(char const *name) : MgCommand(name), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MgCommand::~SwigDirector_MgCommand() {
  
}


void SwigDirector_MgCommand::release() {
  if (!swig_callbackrelease) {
    throw Swig::DirectorPureVirtualException("MgCommand::release");
  } else {
    swig_callbackrelease();
  }
}

bool SwigDirector_MgCommand::cancel(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackcancel) {
    return MgCommand::cancel(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackcancel(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::initialize(MgMotion const *sender, MgStorage *s) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackinitialize) {
    return MgCommand::initialize(sender,s);
  } else {
    jsender = (void *) sender; 
    js = (void *) s; 
    jresult = (unsigned int) swig_callbackinitialize(jsender, js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::backStep(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackbackStep) {
    return MgCommand::backStep(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackbackStep(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::draw(MgMotion const *sender, GiGraphics *gs) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jgs = 0 ;
  
  if (!swig_callbackdraw) {
    throw Swig::DirectorPureVirtualException("MgCommand::draw");
  } else {
    jsender = (void *) sender; 
    jgs = (void *) gs; 
    jresult = (unsigned int) swig_callbackdraw(jsender, jgs);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::gatherShapes(MgMotion const *sender, MgShapes *shapes) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jshapes = 0 ;
  
  if (!swig_callbackgatherShapes) {
    return MgCommand::gatherShapes(sender,shapes);
  } else {
    jsender = (void *) sender; 
    jshapes = (void *) shapes; 
    jresult = (unsigned int) swig_callbackgatherShapes(jsender, jshapes);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::click(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackclick) {
    return MgCommand::click(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackclick(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::doubleClick(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackdoubleClick) {
    return MgCommand::doubleClick(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackdoubleClick(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::longPress(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacklongPress) {
    return MgCommand::longPress(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacklongPress(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::touchBegan(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchBegan) {
    return MgCommand::touchBegan(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchBegan(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::touchMoved(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchMoved) {
    return MgCommand::touchMoved(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchMoved(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::touchEnded(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchEnded) {
    return MgCommand::touchEnded(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchEnded(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::mouseHover(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackmouseHover) {
    return MgCommand::mouseHover(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackmouseHover(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::twoFingersMove(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktwoFingersMove) {
    return MgCommand::twoFingersMove(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktwoFingersMove(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::isDrawingCommand() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisDrawingCommand) {
    return MgCommand::isDrawingCommand();
  } else {
    jresult = (unsigned int) swig_callbackisDrawingCommand();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::isFloatingCommand() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisFloatingCommand) {
    return MgCommand::isFloatingCommand();
  } else {
    jresult = (unsigned int) swig_callbackisFloatingCommand();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommand::doContextAction(MgMotion const *sender, int action) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  int jaction  ;
  
  if (!swig_callbackdoContextAction) {
    return MgCommand::doContextAction(sender,action);
  } else {
    jsender = (void *) sender; 
    jaction = action;
    jresult = (unsigned int) swig_callbackdoContextAction(jsender, jaction);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MgCommand::swig_connect_director(SWIG_Callback0_t callbackrelease, SWIG_Callback1_t callbackcancel, SWIG_Callback2_t callbackinitialize, SWIG_Callback3_t callbackbackStep, SWIG_Callback4_t callbackdraw, SWIG_Callback5_t callbackgatherShapes, SWIG_Callback6_t callbackclick, SWIG_Callback7_t callbackdoubleClick, SWIG_Callback8_t callbacklongPress, SWIG_Callback9_t callbacktouchBegan, SWIG_Callback10_t callbacktouchMoved, SWIG_Callback11_t callbacktouchEnded, SWIG_Callback12_t callbackmouseHover, SWIG_Callback13_t callbacktwoFingersMove, SWIG_Callback14_t callbackisDrawingCommand, SWIG_Callback15_t callbackisFloatingCommand, SWIG_Callback16_t callbackdoContextAction) {
  swig_callbackrelease = callbackrelease;
  swig_callbackcancel = callbackcancel;
  swig_callbackinitialize = callbackinitialize;
  swig_callbackbackStep = callbackbackStep;
  swig_callbackdraw = callbackdraw;
  swig_callbackgatherShapes = callbackgatherShapes;
  swig_callbackclick = callbackclick;
  swig_callbackdoubleClick = callbackdoubleClick;
  swig_callbacklongPress = callbacklongPress;
  swig_callbacktouchBegan = callbacktouchBegan;
  swig_callbacktouchMoved = callbacktouchMoved;
  swig_callbacktouchEnded = callbacktouchEnded;
  swig_callbackmouseHover = callbackmouseHover;
  swig_callbacktwoFingersMove = callbacktwoFingersMove;
  swig_callbackisDrawingCommand = callbackisDrawingCommand;
  swig_callbackisFloatingCommand = callbackisFloatingCommand;
  swig_callbackdoContextAction = callbackdoContextAction;
}

void SwigDirector_MgCommand::swig_init_callbacks() {
  swig_callbackrelease = 0;
  swig_callbackcancel = 0;
  swig_callbackinitialize = 0;
  swig_callbackbackStep = 0;
  swig_callbackdraw = 0;
  swig_callbackgatherShapes = 0;
  swig_callbackclick = 0;
  swig_callbackdoubleClick = 0;
  swig_callbacklongPress = 0;
  swig_callbacktouchBegan = 0;
  swig_callbacktouchMoved = 0;
  swig_callbacktouchEnded = 0;
  swig_callbackmouseHover = 0;
  swig_callbacktwoFingersMove = 0;
  swig_callbackisDrawingCommand = 0;
  swig_callbackisFloatingCommand = 0;
  swig_callbackdoContextAction = 0;
}

SwigDirector_CmdObserverDefault::SwigDirector_CmdObserverDefault() : CmdObserverDefault(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_CmdObserverDefault::~SwigDirector_CmdObserverDefault() {
  
}


void SwigDirector_CmdObserverDefault::onDocLoaded(MgMotion const *sender, bool forUndo) {
  void * jsender = 0 ;
  unsigned int jforUndo  ;
  
  if (!swig_callbackonDocLoaded) {
    CmdObserverDefault::onDocLoaded(sender,forUndo);
    return;
  } else {
    jsender = (void *) sender; 
    jforUndo = forUndo;
    swig_callbackonDocLoaded(jsender, jforUndo);
  }
}

void SwigDirector_CmdObserverDefault::onEnterSelectCommand(MgMotion const *sender) {
  void * jsender = 0 ;
  
  if (!swig_callbackonEnterSelectCommand) {
    CmdObserverDefault::onEnterSelectCommand(sender);
    return;
  } else {
    jsender = (void *) sender; 
    swig_callbackonEnterSelectCommand(jsender);
  }
}

void SwigDirector_CmdObserverDefault::onUnloadCommands(MgCmdManager *sender) {
  void * jsender = 0 ;
  
  if (!swig_callbackonUnloadCommands) {
    CmdObserverDefault::onUnloadCommands(sender);
    return;
  } else {
    jsender = (void *) sender; 
    swig_callbackonUnloadCommands(jsender);
  }
}

bool SwigDirector_CmdObserverDefault::selectActionsNeedHided(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackselectActionsNeedHided) {
    return CmdObserverDefault::selectActionsNeedHided(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackselectActionsNeedHided(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_CmdObserverDefault::addShapeActions(MgMotion const *sender, mgvector< int > &actions, int n, MgShape const *sp) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsender = 0 ;
  void * jactions = 0 ;
  int jn  ;
  void * jsp = 0 ;
  
  if (!swig_callbackaddShapeActions) {
    return CmdObserverDefault::addShapeActions(sender,actions,n,sp);
  } else {
    jsender = (void *) sender; 
    jactions = (mgvector< int > *) &actions; 
    jn = n;
    jsp = (void *) sp; 
    jresult = (int) swig_callbackaddShapeActions(jsender, jactions, jn, jsp);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_CmdObserverDefault::doAction(MgMotion const *sender, int action) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  int jaction  ;
  
  if (!swig_callbackdoAction) {
    return CmdObserverDefault::doAction(sender,action);
  } else {
    jsender = (void *) sender; 
    jaction = action;
    jresult = (unsigned int) swig_callbackdoAction(jsender, jaction);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_CmdObserverDefault::doEndAction(MgMotion const *sender, int action) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  int jaction  ;
  
  if (!swig_callbackdoEndAction) {
    return CmdObserverDefault::doEndAction(sender,action);
  } else {
    jsender = (void *) sender; 
    jaction = action;
    jresult = (unsigned int) swig_callbackdoEndAction(jsender, jaction);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_CmdObserverDefault::drawInShapeCommand(MgMotion const *sender, MgCommand *cmd, GiGraphics *gs) {
  void * jsender = 0 ;
  void * jcmd = 0 ;
  void * jgs = 0 ;
  
  if (!swig_callbackdrawInShapeCommand) {
    CmdObserverDefault::drawInShapeCommand(sender,cmd,gs);
    return;
  } else {
    jsender = (void *) sender; 
    jcmd = (void *) cmd; 
    jgs = (void *) gs; 
    swig_callbackdrawInShapeCommand(jsender, jcmd, jgs);
  }
}

void SwigDirector_CmdObserverDefault::drawInSelectCommand(MgMotion const *sender, MgShape const *sp, int handleIndex, GiGraphics *gs) {
  void * jsender = 0 ;
  void * jsp = 0 ;
  int jhandleIndex  ;
  void * jgs = 0 ;
  
  if (!swig_callbackdrawInSelectCommand) {
    CmdObserverDefault::drawInSelectCommand(sender,sp,handleIndex,gs);
    return;
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jhandleIndex = handleIndex;
    jgs = (void *) gs; 
    swig_callbackdrawInSelectCommand(jsender, jsp, jhandleIndex, jgs);
  }
}

void SwigDirector_CmdObserverDefault::onSelectionChanged(MgMotion const *sender) {
  void * jsender = 0 ;
  
  if (!swig_callbackonSelectionChanged) {
    CmdObserverDefault::onSelectionChanged(sender);
    return;
  } else {
    jsender = (void *) sender; 
    swig_callbackonSelectionChanged(jsender);
  }
}

bool SwigDirector_CmdObserverDefault::onShapeWillAdded(MgMotion const *sender, MgShape *sp) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonShapeWillAdded) {
    return CmdObserverDefault::onShapeWillAdded(sender,sp);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jresult = (unsigned int) swig_callbackonShapeWillAdded(jsender, jsp);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_CmdObserverDefault::onShapeAdded(MgMotion const *sender, MgShape *sp) {
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonShapeAdded) {
    CmdObserverDefault::onShapeAdded(sender,sp);
    return;
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    swig_callbackonShapeAdded(jsender, jsp);
  }
}

bool SwigDirector_CmdObserverDefault::onShapeWillDeleted(MgMotion const *sender, MgShape const *sp) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonShapeWillDeleted) {
    return CmdObserverDefault::onShapeWillDeleted(sender,sp);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jresult = (unsigned int) swig_callbackonShapeWillDeleted(jsender, jsp);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_CmdObserverDefault::onShapeDeleted(MgMotion const *sender, MgShape const *sp) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonShapeDeleted) {
    return CmdObserverDefault::onShapeDeleted(sender,sp);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jresult = (int) swig_callbackonShapeDeleted(jsender, jsp);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_CmdObserverDefault::onShapeCanRotated(MgMotion const *sender, MgShape const *sp) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonShapeCanRotated) {
    return CmdObserverDefault::onShapeCanRotated(sender,sp);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jresult = (unsigned int) swig_callbackonShapeCanRotated(jsender, jsp);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_CmdObserverDefault::onShapeCanTransform(MgMotion const *sender, MgShape const *sp) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonShapeCanTransform) {
    return CmdObserverDefault::onShapeCanTransform(sender,sp);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jresult = (unsigned int) swig_callbackonShapeCanTransform(jsender, jsp);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_CmdObserverDefault::onShapeCanUnlock(MgMotion const *sender, MgShape const *sp) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonShapeCanUnlock) {
    return CmdObserverDefault::onShapeCanUnlock(sender,sp);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jresult = (unsigned int) swig_callbackonShapeCanUnlock(jsender, jsp);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_CmdObserverDefault::onShapeCanUngroup(MgMotion const *sender, MgShape const *sp) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonShapeCanUngroup) {
    return CmdObserverDefault::onShapeCanUngroup(sender,sp);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jresult = (unsigned int) swig_callbackonShapeCanUngroup(jsender, jsp);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_CmdObserverDefault::onShapeCanMovedHandle(MgMotion const *sender, MgShape const *sp, int index) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  int jindex  ;
  
  if (!swig_callbackonShapeCanMovedHandle) {
    return CmdObserverDefault::onShapeCanMovedHandle(sender,sp,index);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jindex = index;
    jresult = (unsigned int) swig_callbackonShapeCanMovedHandle(jsender, jsp, jindex);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_CmdObserverDefault::onShapeMoved(MgMotion const *sender, MgShape *sp, int segment) {
  void * jsender = 0 ;
  void * jsp = 0 ;
  int jsegment  ;
  
  if (!swig_callbackonShapeMoved) {
    CmdObserverDefault::onShapeMoved(sender,sp,segment);
    return;
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    jsegment = segment;
    swig_callbackonShapeMoved(jsender, jsp, jsegment);
  }
}

bool SwigDirector_CmdObserverDefault::onShapeWillChanged(MgMotion const *sender, MgShape *sp, MgShape const *oldsp) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jsp = 0 ;
  void * joldsp = 0 ;
  
  if (!swig_callbackonShapeWillChanged) {
    return CmdObserverDefault::onShapeWillChanged(sender,sp,oldsp);
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    joldsp = (void *) oldsp; 
    jresult = (unsigned int) swig_callbackonShapeWillChanged(jsender, jsp, joldsp);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_CmdObserverDefault::onShapeChanged(MgMotion const *sender, MgShape *shape) {
  void * jsender = 0 ;
  void * jshape = 0 ;
  
  if (!swig_callbackonShapeChanged) {
    CmdObserverDefault::onShapeChanged(sender,shape);
    return;
  } else {
    jsender = (void *) sender; 
    jshape = (void *) shape; 
    swig_callbackonShapeChanged(jsender, jshape);
  }
}

MgBaseShape *SwigDirector_CmdObserverDefault::createShape(MgMotion const *sender, int type) {
  MgBaseShape *c_result = 0 ;
  void * jresult = 0 ;
  void * jsender = 0 ;
  int jtype  ;
  
  if (!swig_callbackcreateShape) {
    return CmdObserverDefault::createShape(sender,type);
  } else {
    jsender = (void *) sender; 
    jtype = type;
    jresult = (void *) swig_callbackcreateShape(jsender, jtype);
    c_result = (MgBaseShape *)jresult; 
  }
  return c_result;
}

MgCommand *SwigDirector_CmdObserverDefault::createCommand(MgMotion const *sender, char const *name) {
  MgCommand *c_result = 0 ;
  void * jresult = 0 ;
  void * jsender = 0 ;
  char * jname = 0 ;
  
  if (!swig_callbackcreateCommand) {
    return CmdObserverDefault::createCommand(sender,name);
  } else {
    jsender = (void *) sender; 
    jname = SWIG_csharp_string_callback((const char *)name); 
    jresult = (void *) swig_callbackcreateCommand(jsender, jname);
    c_result = (MgCommand *)jresult; 
  }
  return c_result;
}

bool SwigDirector_CmdObserverDefault::onPreGesture(MgMotion *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackonPreGesture) {
    return CmdObserverDefault::onPreGesture(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackonPreGesture(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_CmdObserverDefault::onPostGesture(MgMotion const *sender) {
  void * jsender = 0 ;
  
  if (!swig_callbackonPostGesture) {
    CmdObserverDefault::onPostGesture(sender);
    return;
  } else {
    jsender = (void *) sender; 
    swig_callbackonPostGesture(jsender);
  }
}

void SwigDirector_CmdObserverDefault::onPointSnapped(MgMotion const *sender, MgShape const *sp) {
  void * jsender = 0 ;
  void * jsp = 0 ;
  
  if (!swig_callbackonPointSnapped) {
    CmdObserverDefault::onPointSnapped(sender,sp);
    return;
  } else {
    jsender = (void *) sender; 
    jsp = (void *) sp; 
    swig_callbackonPointSnapped(jsender, jsp);
  }
}

void SwigDirector_CmdObserverDefault::swig_connect_director(SWIG_Callback0_t callbackonDocLoaded, SWIG_Callback1_t callbackonEnterSelectCommand, SWIG_Callback2_t callbackonUnloadCommands, SWIG_Callback3_t callbackselectActionsNeedHided, SWIG_Callback4_t callbackaddShapeActions, SWIG_Callback5_t callbackdoAction, SWIG_Callback6_t callbackdoEndAction, SWIG_Callback7_t callbackdrawInShapeCommand, SWIG_Callback8_t callbackdrawInSelectCommand, SWIG_Callback9_t callbackonSelectionChanged, SWIG_Callback10_t callbackonShapeWillAdded, SWIG_Callback11_t callbackonShapeAdded, SWIG_Callback12_t callbackonShapeWillDeleted, SWIG_Callback13_t callbackonShapeDeleted, SWIG_Callback14_t callbackonShapeCanRotated, SWIG_Callback15_t callbackonShapeCanTransform, SWIG_Callback16_t callbackonShapeCanUnlock, SWIG_Callback17_t callbackonShapeCanUngroup, SWIG_Callback18_t callbackonShapeCanMovedHandle, SWIG_Callback19_t callbackonShapeMoved, SWIG_Callback20_t callbackonShapeWillChanged, SWIG_Callback21_t callbackonShapeChanged, SWIG_Callback22_t callbackcreateShape, SWIG_Callback23_t callbackcreateCommand, SWIG_Callback24_t callbackonPreGesture, SWIG_Callback25_t callbackonPostGesture, SWIG_Callback26_t callbackonPointSnapped) {
  swig_callbackonDocLoaded = callbackonDocLoaded;
  swig_callbackonEnterSelectCommand = callbackonEnterSelectCommand;
  swig_callbackonUnloadCommands = callbackonUnloadCommands;
  swig_callbackselectActionsNeedHided = callbackselectActionsNeedHided;
  swig_callbackaddShapeActions = callbackaddShapeActions;
  swig_callbackdoAction = callbackdoAction;
  swig_callbackdoEndAction = callbackdoEndAction;
  swig_callbackdrawInShapeCommand = callbackdrawInShapeCommand;
  swig_callbackdrawInSelectCommand = callbackdrawInSelectCommand;
  swig_callbackonSelectionChanged = callbackonSelectionChanged;
  swig_callbackonShapeWillAdded = callbackonShapeWillAdded;
  swig_callbackonShapeAdded = callbackonShapeAdded;
  swig_callbackonShapeWillDeleted = callbackonShapeWillDeleted;
  swig_callbackonShapeDeleted = callbackonShapeDeleted;
  swig_callbackonShapeCanRotated = callbackonShapeCanRotated;
  swig_callbackonShapeCanTransform = callbackonShapeCanTransform;
  swig_callbackonShapeCanUnlock = callbackonShapeCanUnlock;
  swig_callbackonShapeCanUngroup = callbackonShapeCanUngroup;
  swig_callbackonShapeCanMovedHandle = callbackonShapeCanMovedHandle;
  swig_callbackonShapeMoved = callbackonShapeMoved;
  swig_callbackonShapeWillChanged = callbackonShapeWillChanged;
  swig_callbackonShapeChanged = callbackonShapeChanged;
  swig_callbackcreateShape = callbackcreateShape;
  swig_callbackcreateCommand = callbackcreateCommand;
  swig_callbackonPreGesture = callbackonPreGesture;
  swig_callbackonPostGesture = callbackonPostGesture;
  swig_callbackonPointSnapped = callbackonPointSnapped;
}

void SwigDirector_CmdObserverDefault::swig_init_callbacks() {
  swig_callbackonDocLoaded = 0;
  swig_callbackonEnterSelectCommand = 0;
  swig_callbackonUnloadCommands = 0;
  swig_callbackselectActionsNeedHided = 0;
  swig_callbackaddShapeActions = 0;
  swig_callbackdoAction = 0;
  swig_callbackdoEndAction = 0;
  swig_callbackdrawInShapeCommand = 0;
  swig_callbackdrawInSelectCommand = 0;
  swig_callbackonSelectionChanged = 0;
  swig_callbackonShapeWillAdded = 0;
  swig_callbackonShapeAdded = 0;
  swig_callbackonShapeWillDeleted = 0;
  swig_callbackonShapeDeleted = 0;
  swig_callbackonShapeCanRotated = 0;
  swig_callbackonShapeCanTransform = 0;
  swig_callbackonShapeCanUnlock = 0;
  swig_callbackonShapeCanUngroup = 0;
  swig_callbackonShapeCanMovedHandle = 0;
  swig_callbackonShapeMoved = 0;
  swig_callbackonShapeWillChanged = 0;
  swig_callbackonShapeChanged = 0;
  swig_callbackcreateShape = 0;
  swig_callbackcreateCommand = 0;
  swig_callbackonPreGesture = 0;
  swig_callbackonPostGesture = 0;
  swig_callbackonPointSnapped = 0;
}

SwigDirector_MgCommandDraw::SwigDirector_MgCommandDraw(char const *name) : MgCommandDraw(name), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MgCommandDraw::~SwigDirector_MgCommandDraw() {
  
}


void SwigDirector_MgCommandDraw::release() {
  if (!swig_callbackrelease) {
    throw Swig::DirectorPureVirtualException("MgCommandDraw::release");
  } else {
    swig_callbackrelease();
  }
}

bool SwigDirector_MgCommandDraw::cancel(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackcancel) {
    return MgCommandDraw::cancel(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackcancel(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::initialize(MgMotion const *sender, MgStorage *s) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackinitialize) {
    return MgCommandDraw::initialize(sender,s);
  } else {
    jsender = (void *) sender; 
    js = (void *) s; 
    jresult = (unsigned int) swig_callbackinitialize(jsender, js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::backStep(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackbackStep) {
    return MgCommandDraw::backStep(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackbackStep(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::draw(MgMotion const *sender, GiGraphics *gs) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jgs = 0 ;
  
  if (!swig_callbackdraw) {
    return MgCommandDraw::draw(sender,gs);
  } else {
    jsender = (void *) sender; 
    jgs = (void *) gs; 
    jresult = (unsigned int) swig_callbackdraw(jsender, jgs);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::gatherShapes(MgMotion const *sender, MgShapes *shapes) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jshapes = 0 ;
  
  if (!swig_callbackgatherShapes) {
    return MgCommandDraw::gatherShapes(sender,shapes);
  } else {
    jsender = (void *) sender; 
    jshapes = (void *) shapes; 
    jresult = (unsigned int) swig_callbackgatherShapes(jsender, jshapes);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::click(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackclick) {
    return MgCommandDraw::click(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackclick(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::doubleClick(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackdoubleClick) {
    return MgCommand::doubleClick(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackdoubleClick(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::longPress(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacklongPress) {
    return MgCommandDraw::longPress(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacklongPress(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::touchBegan(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchBegan) {
    return MgCommandDraw::touchBegan(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchBegan(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::touchMoved(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchMoved) {
    return MgCommandDraw::touchMoved(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchMoved(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::touchEnded(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchEnded) {
    return MgCommandDraw::touchEnded(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchEnded(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::mouseHover(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackmouseHover) {
    return MgCommandDraw::mouseHover(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackmouseHover(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::twoFingersMove(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktwoFingersMove) {
    return MgCommand::twoFingersMove(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktwoFingersMove(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::isDrawingCommand() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisDrawingCommand) {
    return MgCommand::isDrawingCommand();
  } else {
    jresult = (unsigned int) swig_callbackisDrawingCommand();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::isFloatingCommand() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisFloatingCommand) {
    return MgCommand::isFloatingCommand();
  } else {
    jresult = (unsigned int) swig_callbackisFloatingCommand();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCommandDraw::doContextAction(MgMotion const *sender, int action) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  int jaction  ;
  
  if (!swig_callbackdoContextAction) {
    return MgCommand::doContextAction(sender,action);
  } else {
    jsender = (void *) sender; 
    jaction = action;
    jresult = (unsigned int) swig_callbackdoContextAction(jsender, jaction);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgCommandDraw::getShapeType() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetShapeType) {
    return MgCommandDraw::getShapeType();
  } else {
    jresult = (int) swig_callbackgetShapeType();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_MgCommandDraw::getMaxStep() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetMaxStep) {
    return MgCommandDraw::getMaxStep();
  } else {
    jresult = (int) swig_callbackgetMaxStep();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_MgCommandDraw::setStepPoint(MgMotion const *sender, int step, Point2d const &pt) {
  void * jsender = 0 ;
  int jstep  ;
  void * jpt = 0 ;
  
  if (!swig_callbacksetStepPoint) {
    MgCommandDraw::setStepPoint(sender,step,pt);
    return;
  } else {
    jsender = (void *) sender; 
    jstep = step;
    jpt = (Point2d *) &pt; 
    swig_callbacksetStepPoint(jsender, jstep, jpt);
  }
}

bool SwigDirector_MgCommandDraw::isStepPointAccepted(MgMotion const *sender, Point2d const &pt) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jpt = 0 ;
  
  if (!swig_callbackisStepPointAccepted) {
    return MgCommandDraw::isStepPointAccepted(sender,pt);
  } else {
    jsender = (void *) sender; 
    jpt = (Point2d *) &pt; 
    jresult = (unsigned int) swig_callbackisStepPointAccepted(jsender, jpt);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgCommandDraw::snapOptionsForStep(MgMotion const *sender, int step) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsender = 0 ;
  int jstep  ;
  
  if (!swig_callbacksnapOptionsForStep) {
    return MgCommandDraw::snapOptionsForStep(sender,step);
  } else {
    jsender = (void *) sender; 
    jstep = step;
    jresult = (int) swig_callbacksnapOptionsForStep(jsender, jstep);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_MgCommandDraw::swig_connect_director(SWIG_Callback0_t callbackrelease, SWIG_Callback1_t callbackcancel, SWIG_Callback2_t callbackinitialize, SWIG_Callback3_t callbackbackStep, SWIG_Callback4_t callbackdraw, SWIG_Callback5_t callbackgatherShapes, SWIG_Callback6_t callbackclick, SWIG_Callback7_t callbackdoubleClick, SWIG_Callback8_t callbacklongPress, SWIG_Callback9_t callbacktouchBegan, SWIG_Callback10_t callbacktouchMoved, SWIG_Callback11_t callbacktouchEnded, SWIG_Callback12_t callbackmouseHover, SWIG_Callback13_t callbacktwoFingersMove, SWIG_Callback14_t callbackisDrawingCommand, SWIG_Callback15_t callbackisFloatingCommand, SWIG_Callback16_t callbackdoContextAction, SWIG_Callback17_t callbackgetShapeType, SWIG_Callback18_t callbackgetMaxStep, SWIG_Callback19_t callbacksetStepPoint, SWIG_Callback20_t callbackisStepPointAccepted, SWIG_Callback21_t callbacksnapOptionsForStep) {
  swig_callbackrelease = callbackrelease;
  swig_callbackcancel = callbackcancel;
  swig_callbackinitialize = callbackinitialize;
  swig_callbackbackStep = callbackbackStep;
  swig_callbackdraw = callbackdraw;
  swig_callbackgatherShapes = callbackgatherShapes;
  swig_callbackclick = callbackclick;
  swig_callbackdoubleClick = callbackdoubleClick;
  swig_callbacklongPress = callbacklongPress;
  swig_callbacktouchBegan = callbacktouchBegan;
  swig_callbacktouchMoved = callbacktouchMoved;
  swig_callbacktouchEnded = callbacktouchEnded;
  swig_callbackmouseHover = callbackmouseHover;
  swig_callbacktwoFingersMove = callbacktwoFingersMove;
  swig_callbackisDrawingCommand = callbackisDrawingCommand;
  swig_callbackisFloatingCommand = callbackisFloatingCommand;
  swig_callbackdoContextAction = callbackdoContextAction;
  swig_callbackgetShapeType = callbackgetShapeType;
  swig_callbackgetMaxStep = callbackgetMaxStep;
  swig_callbacksetStepPoint = callbacksetStepPoint;
  swig_callbackisStepPointAccepted = callbackisStepPointAccepted;
  swig_callbacksnapOptionsForStep = callbacksnapOptionsForStep;
}

void SwigDirector_MgCommandDraw::swig_init_callbacks() {
  swig_callbackrelease = 0;
  swig_callbackcancel = 0;
  swig_callbackinitialize = 0;
  swig_callbackbackStep = 0;
  swig_callbackdraw = 0;
  swig_callbackgatherShapes = 0;
  swig_callbackclick = 0;
  swig_callbackdoubleClick = 0;
  swig_callbacklongPress = 0;
  swig_callbacktouchBegan = 0;
  swig_callbacktouchMoved = 0;
  swig_callbacktouchEnded = 0;
  swig_callbackmouseHover = 0;
  swig_callbacktwoFingersMove = 0;
  swig_callbackisDrawingCommand = 0;
  swig_callbackisFloatingCommand = 0;
  swig_callbackdoContextAction = 0;
  swig_callbackgetShapeType = 0;
  swig_callbackgetMaxStep = 0;
  swig_callbacksetStepPoint = 0;
  swig_callbackisStepPointAccepted = 0;
  swig_callbacksnapOptionsForStep = 0;
}

SwigDirector_MgCmdDrawRect::SwigDirector_MgCmdDrawRect(char const *name) : MgCmdDrawRect(name), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MgCmdDrawRect::~SwigDirector_MgCmdDrawRect() {
  
}


void SwigDirector_MgCmdDrawRect::release() {
  if (!swig_callbackrelease) {
    MgCmdDrawRect::release();
    return;
  } else {
    swig_callbackrelease();
  }
}

bool SwigDirector_MgCmdDrawRect::cancel(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackcancel) {
    return MgCommandDraw::cancel(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackcancel(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::initialize(MgMotion const *sender, MgStorage *s) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackinitialize) {
    return MgCmdDrawRect::initialize(sender,s);
  } else {
    jsender = (void *) sender; 
    js = (void *) s; 
    jresult = (unsigned int) swig_callbackinitialize(jsender, js);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::backStep(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackbackStep) {
    return MgCmdDrawRect::backStep(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackbackStep(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::draw(MgMotion const *sender, GiGraphics *gs) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jgs = 0 ;
  
  if (!swig_callbackdraw) {
    return MgCommandDraw::draw(sender,gs);
  } else {
    jsender = (void *) sender; 
    jgs = (void *) gs; 
    jresult = (unsigned int) swig_callbackdraw(jsender, jgs);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::gatherShapes(MgMotion const *sender, MgShapes *shapes) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jshapes = 0 ;
  
  if (!swig_callbackgatherShapes) {
    return MgCommandDraw::gatherShapes(sender,shapes);
  } else {
    jsender = (void *) sender; 
    jshapes = (void *) shapes; 
    jresult = (unsigned int) swig_callbackgatherShapes(jsender, jshapes);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::click(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackclick) {
    return MgCommandDraw::click(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackclick(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::doubleClick(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackdoubleClick) {
    return MgCommand::doubleClick(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackdoubleClick(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::longPress(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacklongPress) {
    return MgCommandDraw::longPress(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacklongPress(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::touchBegan(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchBegan) {
    return MgCmdDrawRect::touchBegan(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchBegan(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::touchMoved(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchMoved) {
    return MgCmdDrawRect::touchMoved(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchMoved(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::touchEnded(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktouchEnded) {
    return MgCmdDrawRect::touchEnded(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktouchEnded(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::mouseHover(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbackmouseHover) {
    return MgCommandDraw::mouseHover(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbackmouseHover(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::twoFingersMove(MgMotion const *sender) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  
  if (!swig_callbacktwoFingersMove) {
    return MgCommand::twoFingersMove(sender);
  } else {
    jsender = (void *) sender; 
    jresult = (unsigned int) swig_callbacktwoFingersMove(jsender);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::isDrawingCommand() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisDrawingCommand) {
    return MgCommand::isDrawingCommand();
  } else {
    jresult = (unsigned int) swig_callbackisDrawingCommand();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::isFloatingCommand() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisFloatingCommand) {
    return MgCommand::isFloatingCommand();
  } else {
    jresult = (unsigned int) swig_callbackisFloatingCommand();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MgCmdDrawRect::doContextAction(MgMotion const *sender, int action) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  int jaction  ;
  
  if (!swig_callbackdoContextAction) {
    return MgCommand::doContextAction(sender,action);
  } else {
    jsender = (void *) sender; 
    jaction = action;
    jresult = (unsigned int) swig_callbackdoContextAction(jsender, jaction);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgCmdDrawRect::getShapeType() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetShapeType) {
    return MgCommandDraw::getShapeType();
  } else {
    jresult = (int) swig_callbackgetShapeType();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_MgCmdDrawRect::getMaxStep() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetMaxStep) {
    return MgCommandDraw::getMaxStep();
  } else {
    jresult = (int) swig_callbackgetMaxStep();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_MgCmdDrawRect::setStepPoint(MgMotion const *sender, int step, Point2d const &pt) {
  void * jsender = 0 ;
  int jstep  ;
  void * jpt = 0 ;
  
  if (!swig_callbacksetStepPoint) {
    MgCommandDraw::setStepPoint(sender,step,pt);
    return;
  } else {
    jsender = (void *) sender; 
    jstep = step;
    jpt = (Point2d *) &pt; 
    swig_callbacksetStepPoint(jsender, jstep, jpt);
  }
}

bool SwigDirector_MgCmdDrawRect::isStepPointAccepted(MgMotion const *sender, Point2d const &pt) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsender = 0 ;
  void * jpt = 0 ;
  
  if (!swig_callbackisStepPointAccepted) {
    return MgCommandDraw::isStepPointAccepted(sender,pt);
  } else {
    jsender = (void *) sender; 
    jpt = (Point2d *) &pt; 
    jresult = (unsigned int) swig_callbackisStepPointAccepted(jsender, jpt);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_MgCmdDrawRect::snapOptionsForStep(MgMotion const *sender, int step) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsender = 0 ;
  int jstep  ;
  
  if (!swig_callbacksnapOptionsForStep) {
    return MgCommandDraw::snapOptionsForStep(sender,step);
  } else {
    jsender = (void *) sender; 
    jstep = step;
    jresult = (int) swig_callbacksnapOptionsForStep(jsender, jstep);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_MgCmdDrawRect::addRectShape(MgMotion const *sender) {
  void * jsender = 0 ;
  
  if (!swig_callbackaddRectShape) {
    MgCmdDrawRect::addRectShape(sender);
    return;
  } else {
    jsender = (void *) sender; 
    swig_callbackaddRectShape(jsender);
  }
}

void SwigDirector_MgCmdDrawRect::swig_connect_director(SWIG_Callback0_t callbackrelease, SWIG_Callback1_t callbackcancel, SWIG_Callback2_t callbackinitialize, SWIG_Callback3_t callbackbackStep, SWIG_Callback4_t callbackdraw, SWIG_Callback5_t callbackgatherShapes, SWIG_Callback6_t callbackclick, SWIG_Callback7_t callbackdoubleClick, SWIG_Callback8_t callbacklongPress, SWIG_Callback9_t callbacktouchBegan, SWIG_Callback10_t callbacktouchMoved, SWIG_Callback11_t callbacktouchEnded, SWIG_Callback12_t callbackmouseHover, SWIG_Callback13_t callbacktwoFingersMove, SWIG_Callback14_t callbackisDrawingCommand, SWIG_Callback15_t callbackisFloatingCommand, SWIG_Callback16_t callbackdoContextAction, SWIG_Callback17_t callbackgetShapeType, SWIG_Callback18_t callbackgetMaxStep, SWIG_Callback19_t callbacksetStepPoint, SWIG_Callback20_t callbackisStepPointAccepted, SWIG_Callback21_t callbacksnapOptionsForStep, SWIG_Callback22_t callbackaddRectShape) {
  swig_callbackrelease = callbackrelease;
  swig_callbackcancel = callbackcancel;
  swig_callbackinitialize = callbackinitialize;
  swig_callbackbackStep = callbackbackStep;
  swig_callbackdraw = callbackdraw;
  swig_callbackgatherShapes = callbackgatherShapes;
  swig_callbackclick = callbackclick;
  swig_callbackdoubleClick = callbackdoubleClick;
  swig_callbacklongPress = callbacklongPress;
  swig_callbacktouchBegan = callbacktouchBegan;
  swig_callbacktouchMoved = callbacktouchMoved;
  swig_callbacktouchEnded = callbacktouchEnded;
  swig_callbackmouseHover = callbackmouseHover;
  swig_callbacktwoFingersMove = callbacktwoFingersMove;
  swig_callbackisDrawingCommand = callbackisDrawingCommand;
  swig_callbackisFloatingCommand = callbackisFloatingCommand;
  swig_callbackdoContextAction = callbackdoContextAction;
  swig_callbackgetShapeType = callbackgetShapeType;
  swig_callbackgetMaxStep = callbackgetMaxStep;
  swig_callbacksetStepPoint = callbacksetStepPoint;
  swig_callbackisStepPointAccepted = callbackisStepPointAccepted;
  swig_callbacksnapOptionsForStep = callbacksnapOptionsForStep;
  swig_callbackaddRectShape = callbackaddRectShape;
}

void SwigDirector_MgCmdDrawRect::swig_init_callbacks() {
  swig_callbackrelease = 0;
  swig_callbackcancel = 0;
  swig_callbackinitialize = 0;
  swig_callbackbackStep = 0;
  swig_callbackdraw = 0;
  swig_callbackgatherShapes = 0;
  swig_callbackclick = 0;
  swig_callbackdoubleClick = 0;
  swig_callbacklongPress = 0;
  swig_callbacktouchBegan = 0;
  swig_callbacktouchMoved = 0;
  swig_callbacktouchEnded = 0;
  swig_callbackmouseHover = 0;
  swig_callbacktwoFingersMove = 0;
  swig_callbackisDrawingCommand = 0;
  swig_callbackisFloatingCommand = 0;
  swig_callbackdoContextAction = 0;
  swig_callbackgetShapeType = 0;
  swig_callbackgetMaxStep = 0;
  swig_callbacksetStepPoint = 0;
  swig_callbackisStepPointAccepted = 0;
  swig_callbacksnapOptionsForStep = 0;
  swig_callbackaddRectShape = 0;
}

SwigDirector_GiView::SwigDirector_GiView() : GiView(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_GiView::~SwigDirector_GiView() {
  
}


void SwigDirector_GiView::regenAll(bool changed) {
  unsigned int jchanged  ;
  
  if (!swig_callbackregenAll) {
    GiView::regenAll(changed);
    return;
  } else {
    jchanged = changed;
    swig_callbackregenAll(jchanged);
  }
}

void SwigDirector_GiView::regenAppend(int sid, long playh) {
  int jsid  ;
  long jplayh  ;
  
  if (!swig_callbackregenAppend) {
    GiView::regenAppend(sid,playh);
    return;
  } else {
    jsid = sid;
    jplayh = playh;
    swig_callbackregenAppend(jsid, jplayh);
  }
}

void SwigDirector_GiView::redraw(bool changed) {
  unsigned int jchanged  ;
  
  if (!swig_callbackredraw) {
    GiView::redraw(changed);
    return;
  } else {
    jchanged = changed;
    swig_callbackredraw(jchanged);
  }
}

bool SwigDirector_GiView::useFinger() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackuseFinger) {
    return GiView::useFinger();
  } else {
    jresult = (unsigned int) swig_callbackuseFinger();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiView::isContextActionsVisible() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisContextActionsVisible) {
    return GiView::isContextActionsVisible();
  } else {
    jresult = (unsigned int) swig_callbackisContextActionsVisible();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiView::showContextActions(mgvector< int > const &actions, mgvector< float > const &buttonXY, float x, float y, float w, float h) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jactions = 0 ;
  void * jbuttonXY = 0 ;
  float jx  ;
  float jy  ;
  float jw  ;
  float jh  ;
  
  if (!swig_callbackshowContextActions) {
    return GiView::showContextActions(actions,buttonXY,x,y,w,h);
  } else {
    jactions = (mgvector< int > *) &actions; 
    jbuttonXY = (mgvector< float > *) &buttonXY; 
    jx = x;
    jy = y;
    jw = w;
    jh = h;
    jresult = (unsigned int) swig_callbackshowContextActions(jactions, jbuttonXY, jx, jy, jw, jh);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_GiView::hideContextActions() {
  if (!swig_callbackhideContextActions) {
    GiView::hideContextActions();
    return;
  } else {
    swig_callbackhideContextActions();
  }
}

void SwigDirector_GiView::commandChanged() {
  if (!swig_callbackcommandChanged) {
    GiView::commandChanged();
    return;
  } else {
    swig_callbackcommandChanged();
  }
}

void SwigDirector_GiView::selectionChanged() {
  if (!swig_callbackselectionChanged) {
    GiView::selectionChanged();
    return;
  } else {
    swig_callbackselectionChanged();
  }
}

void SwigDirector_GiView::contentChanged() {
  if (!swig_callbackcontentChanged) {
    GiView::contentChanged();
    return;
  } else {
    swig_callbackcontentChanged();
  }
}

void SwigDirector_GiView::dynamicChanged() {
  if (!swig_callbackdynamicChanged) {
    GiView::dynamicChanged();
    return;
  } else {
    swig_callbackdynamicChanged();
  }
}

void SwigDirector_GiView::zoomChanged() {
  if (!swig_callbackzoomChanged) {
    GiView::zoomChanged();
    return;
  } else {
    swig_callbackzoomChanged();
  }
}

void SwigDirector_GiView::viewChanged(GiView *oldview) {
  void * joldview = 0 ;
  
  if (!swig_callbackviewChanged) {
    GiView::viewChanged(oldview);
    return;
  } else {
    joldview = (void *) oldview; 
    swig_callbackviewChanged(joldview);
  }
}

void SwigDirector_GiView::shapeWillDelete(int sid) {
  int jsid  ;
  
  if (!swig_callbackshapeWillDelete) {
    GiView::shapeWillDelete(sid);
    return;
  } else {
    jsid = sid;
    swig_callbackshapeWillDelete(jsid);
  }
}

void SwigDirector_GiView::shapeDeleted(int sid) {
  int jsid  ;
  
  if (!swig_callbackshapeDeleted) {
    GiView::shapeDeleted(sid);
    return;
  } else {
    jsid = sid;
    swig_callbackshapeDeleted(jsid);
  }
}

bool SwigDirector_GiView::shapeDblClick(int type, int sid, int tag) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  int jsid  ;
  int jtag  ;
  
  if (!swig_callbackshapeDblClick) {
    return GiView::shapeDblClick(type,sid,tag);
  } else {
    jtype = type;
    jsid = sid;
    jtag = tag;
    jresult = (unsigned int) swig_callbackshapeDblClick(jtype, jsid, jtag);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_GiView::shapeClicked(int type, int sid, int tag, float x, float y) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  int jsid  ;
  int jtag  ;
  float jx  ;
  float jy  ;
  
  if (!swig_callbackshapeClicked) {
    return GiView::shapeClicked(type,sid,tag,x,y);
  } else {
    jtype = type;
    jsid = sid;
    jtag = tag;
    jx = x;
    jy = y;
    jresult = (unsigned int) swig_callbackshapeClicked(jtype, jsid, jtag, jx, jy);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_GiView::showMessage(char const *text) {
  char * jtext = 0 ;
  
  if (!swig_callbackshowMessage) {
    GiView::showMessage(text);
    return;
  } else {
    jtext = SWIG_csharp_string_callback((const char *)text); 
    swig_callbackshowMessage(jtext);
  }
}

void SwigDirector_GiView::getLocalizedString(char const *name, MgStringCallback *c) {
  char * jname = 0 ;
  void * jc = 0 ;
  
  if (!swig_callbackgetLocalizedString) {
    GiView::getLocalizedString(name,c);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    jc = (void *) c; 
    swig_callbackgetLocalizedString(jname, jc);
  }
}

void SwigDirector_GiView::swig_connect_director(SWIG_Callback0_t callbackregenAll, SWIG_Callback1_t callbackregenAppend, SWIG_Callback2_t callbackredraw, SWIG_Callback3_t callbackuseFinger, SWIG_Callback4_t callbackisContextActionsVisible, SWIG_Callback5_t callbackshowContextActions, SWIG_Callback6_t callbackhideContextActions, SWIG_Callback7_t callbackcommandChanged, SWIG_Callback8_t callbackselectionChanged, SWIG_Callback9_t callbackcontentChanged, SWIG_Callback10_t callbackdynamicChanged, SWIG_Callback11_t callbackzoomChanged, SWIG_Callback12_t callbackviewChanged, SWIG_Callback13_t callbackshapeWillDelete, SWIG_Callback14_t callbackshapeDeleted, SWIG_Callback15_t callbackshapeDblClick, SWIG_Callback16_t callbackshapeClicked, SWIG_Callback17_t callbackshowMessage, SWIG_Callback18_t callbackgetLocalizedString) {
  swig_callbackregenAll = callbackregenAll;
  swig_callbackregenAppend = callbackregenAppend;
  swig_callbackredraw = callbackredraw;
  swig_callbackuseFinger = callbackuseFinger;
  swig_callbackisContextActionsVisible = callbackisContextActionsVisible;
  swig_callbackshowContextActions = callbackshowContextActions;
  swig_callbackhideContextActions = callbackhideContextActions;
  swig_callbackcommandChanged = callbackcommandChanged;
  swig_callbackselectionChanged = callbackselectionChanged;
  swig_callbackcontentChanged = callbackcontentChanged;
  swig_callbackdynamicChanged = callbackdynamicChanged;
  swig_callbackzoomChanged = callbackzoomChanged;
  swig_callbackviewChanged = callbackviewChanged;
  swig_callbackshapeWillDelete = callbackshapeWillDelete;
  swig_callbackshapeDeleted = callbackshapeDeleted;
  swig_callbackshapeDblClick = callbackshapeDblClick;
  swig_callbackshapeClicked = callbackshapeClicked;
  swig_callbackshowMessage = callbackshowMessage;
  swig_callbackgetLocalizedString = callbackgetLocalizedString;
}

void SwigDirector_GiView::swig_init_callbacks() {
  swig_callbackregenAll = 0;
  swig_callbackregenAppend = 0;
  swig_callbackredraw = 0;
  swig_callbackuseFinger = 0;
  swig_callbackisContextActionsVisible = 0;
  swig_callbackshowContextActions = 0;
  swig_callbackhideContextActions = 0;
  swig_callbackcommandChanged = 0;
  swig_callbackselectionChanged = 0;
  swig_callbackcontentChanged = 0;
  swig_callbackdynamicChanged = 0;
  swig_callbackzoomChanged = 0;
  swig_callbackviewChanged = 0;
  swig_callbackshapeWillDelete = 0;
  swig_callbackshapeDeleted = 0;
  swig_callbackshapeDblClick = 0;
  swig_callbackshapeClicked = 0;
  swig_callbackshowMessage = 0;
  swig_callbackgetLocalizedString = 0;
}

SwigDirector_MgStringCallback::SwigDirector_MgStringCallback() : MgStringCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MgStringCallback::~SwigDirector_MgStringCallback() {
  
}


void SwigDirector_MgStringCallback::onGetString(char const *text) {
  char * jtext = 0 ;
  
  if (!swig_callbackonGetString) {
    throw Swig::DirectorPureVirtualException("MgStringCallback::onGetString");
  } else {
    jtext = SWIG_csharp_string_callback((const char *)text); 
    swig_callbackonGetString(jtext);
  }
}

void SwigDirector_MgStringCallback::swig_connect_director(SWIG_Callback0_t callbackonGetString) {
  swig_callbackonGetString = callbackonGetString;
}

void SwigDirector_MgStringCallback::swig_init_callbacks() {
  swig_callbackonGetString = 0;
}

SwigDirector_MgFindImageCallback::SwigDirector_MgFindImageCallback() : MgFindImageCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MgFindImageCallback::~SwigDirector_MgFindImageCallback() {
  
}


void SwigDirector_MgFindImageCallback::onFindImage(int sid, char const *name) {
  int jsid  ;
  char * jname = 0 ;
  
  if (!swig_callbackonFindImage) {
    throw Swig::DirectorPureVirtualException("MgFindImageCallback::onFindImage");
  } else {
    jsid = sid;
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbackonFindImage(jsid, jname);
  }
}

void SwigDirector_MgFindImageCallback::swig_connect_director(SWIG_Callback0_t callbackonFindImage) {
  swig_callbackonFindImage = callbackonFindImage;
}

void SwigDirector_MgFindImageCallback::swig_init_callbacks() {
  swig_callbackonFindImage = 0;
}

SwigDirector_MgOptionCallback::SwigDirector_MgOptionCallback() : MgOptionCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MgOptionCallback::~SwigDirector_MgOptionCallback() {
  
}


void SwigDirector_MgOptionCallback::onGetOptionBool(char const *name, bool value) {
  char * jname = 0 ;
  unsigned int jvalue  ;
  
  if (!swig_callbackonGetOptionBool) {
    throw Swig::DirectorPureVirtualException("MgOptionCallback::onGetOptionBool");
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    jvalue = value;
    swig_callbackonGetOptionBool(jname, jvalue);
  }
}

void SwigDirector_MgOptionCallback::onGetOptionInt(char const *name, int value) {
  char * jname = 0 ;
  int jvalue  ;
  
  if (!swig_callbackonGetOptionInt) {
    throw Swig::DirectorPureVirtualException("MgOptionCallback::onGetOptionInt");
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    jvalue = value;
    swig_callbackonGetOptionInt(jname, jvalue);
  }
}

void SwigDirector_MgOptionCallback::onGetOptionFloat(char const *name, float value) {
  char * jname = 0 ;
  float jvalue  ;
  
  if (!swig_callbackonGetOptionFloat) {
    throw Swig::DirectorPureVirtualException("MgOptionCallback::onGetOptionFloat");
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    jvalue = value;
    swig_callbackonGetOptionFloat(jname, jvalue);
  }
}

void SwigDirector_MgOptionCallback::onGetOptionString(char const *name, char const *text) {
  char * jname = 0 ;
  char * jtext = 0 ;
  
  if (!swig_callbackonGetOptionString) {
    throw Swig::DirectorPureVirtualException("MgOptionCallback::onGetOptionString");
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    jtext = SWIG_csharp_string_callback((const char *)text); 
    swig_callbackonGetOptionString(jname, jtext);
  }
}

void SwigDirector_MgOptionCallback::swig_connect_director(SWIG_Callback0_t callbackonGetOptionBool, SWIG_Callback1_t callbackonGetOptionInt, SWIG_Callback2_t callbackonGetOptionFloat, SWIG_Callback3_t callbackonGetOptionString) {
  swig_callbackonGetOptionBool = callbackonGetOptionBool;
  swig_callbackonGetOptionInt = callbackonGetOptionInt;
  swig_callbackonGetOptionFloat = callbackonGetOptionFloat;
  swig_callbackonGetOptionString = callbackonGetOptionString;
}

void SwigDirector_MgOptionCallback::swig_init_callbacks() {
  swig_callbackonGetOptionBool = 0;
  swig_callbackonGetOptionInt = 0;
  swig_callbackonGetOptionFloat = 0;
  swig_callbackonGetOptionString = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT float SWIGSTDCALL CSharp__MGZERO_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_MGZERO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_E_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_E;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_LOG2E_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_LOG2E;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_LOG10E_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_LOG10E;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_LN2_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_LN2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_LN10_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_LN10;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_PI_2_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_PI_2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_PI_4_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_PI_4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_1_PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_1_PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_2_PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_2_PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_2_SQRTPI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_2_SQRTPI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_SQRT2_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_SQRT2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_SQRT1_2_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_SQRT1_2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_2PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_2PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_PI_3_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_PI_3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_PI_6_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_PI_6;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_D2R_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_D2R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_R2D_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_R2D;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__M_1_SQRPI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_M_1_SQRPI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__FLT_MIN_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_FLT_MIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp__FLT_MAX_get() {
  float jresult ;
  float result;
  
  result = (float)(float)_FLT_MAX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tol_gTol() {
  void * jresult ;
  Tol result;
  
  result = Tol::gTol();
  jresult = new Tol((const Tol &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tol_minTol() {
  void * jresult ;
  Tol result;
  
  result = Tol::minTol();
  jresult = new Tol((const Tol &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tol__SWIG_0() {
  void * jresult ;
  Tol *result = 0 ;
  
  result = (Tol *)new Tol();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tol__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Tol *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Tol *)new Tol(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tol__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  Tol *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Tol *)new Tol(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Tol_equalPoint(void * jarg1) {
  float jresult ;
  Tol *arg1 = (Tol *) 0 ;
  float result;
  
  arg1 = (Tol *)jarg1; 
  result = (float)((Tol const *)arg1)->equalPoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Tol_equalVector(void * jarg1) {
  float jresult ;
  Tol *arg1 = (Tol *) 0 ;
  float result;
  
  arg1 = (Tol *)jarg1; 
  result = (float)((Tol const *)arg1)->equalVector();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tol_setEqualPoint(void * jarg1, float jarg2) {
  Tol *arg1 = (Tol *) 0 ;
  float arg2 ;
  
  arg1 = (Tol *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setEqualPoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tol_setEqualVector(void * jarg1, float jarg2) {
  Tol *arg1 = (Tol *) 0 ;
  float arg2 ;
  
  arg1 = (Tol *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setEqualVector(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Tol(void * jarg1) {
  Tol *arg1 = (Tol *) 0 ;
  
  arg1 = (Tol *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2d_x_set(void * jarg1, float jarg2) {
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_x_get(void * jarg1) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2d_y_set(void * jarg1, float jarg2) {
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_y_get(void * jarg1) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_kIdentity() {
  void * jresult ;
  Vector2d result;
  
  result = Vector2d::kIdentity();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_kXAxis() {
  void * jresult ;
  Vector2d result;
  
  result = Vector2d::kXAxis();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_kYAxis() {
  void * jresult ;
  Vector2d result;
  
  result = Vector2d::kYAxis();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2d__SWIG_0() {
  void * jresult ;
  Vector2d *result = 0 ;
  
  result = (Vector2d *)new Vector2d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2d__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Vector2d *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2d *)new Vector2d(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2d__SWIG_2(void * jarg1) {
  void * jresult ;
  Vector2d *arg1 = 0 ;
  Vector2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (Vector2d *)new Vector2d((Vector2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Vector2d result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = ((Vector2d const *)arg1)->transform((Matrix2d const &)*arg2);
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = ((Vector2d const *)arg1)->add((Vector2d const &)*arg2);
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_subtract(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = ((Vector2d const *)arg1)->subtract((Vector2d const &)*arg2);
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_negate(void * jarg1) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1; 
  result = (Vector2d *) &(arg1)->negate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_perpVector(void * jarg1) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d result;
  
  arg1 = (Vector2d *)jarg1; 
  result = ((Vector2d const *)arg1)->perpVector();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_scaleBy__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2d *) &(arg1)->scaleBy(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_scaleBy__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  Vector2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2d *) &(arg1)->scaleBy(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->dotProduct((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_crossProduct(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->crossProduct((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_angle(void * jarg1) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (float)((Vector2d const *)arg1)->angle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_angle2(void * jarg1) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (float)((Vector2d const *)arg1)->angle2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_angleTo(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->angleTo((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_angleTo2(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->angleTo2((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_length(void * jarg1) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (float)((Vector2d const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_lengthSquare(void * jarg1) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (float)((Vector2d const *)arg1)->lengthSquare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_unitVector(void * jarg1) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d result;
  
  arg1 = (Vector2d *)jarg1; 
  result = ((Vector2d const *)arg1)->unitVector();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_normalize__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Tol *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->normalize((Tol const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_normalize__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (bool)(arg1)->normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isUnitVector__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Tol *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isUnitVector((Tol const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isUnitVector__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (bool)((Vector2d const *)arg1)->isUnitVector();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isZeroVector__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Tol *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isZeroVector((Tol const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isZeroVector__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (bool)((Vector2d const *)arg1)->isZeroVector();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isDegenerate(void * jarg1) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  result = (bool)((Vector2d const *)arg1)->isDegenerate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isEqualTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isEqualTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isEqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isEqualTo((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_set__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2d *) &(arg1)->set(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (Vector2d *) &(arg1)->set((Vector2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_setAngleLength(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2d *) &(arg1)->setAngleLength(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_angledVector(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Vector2d result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = Vector2d::angledVector(arg1,arg2);
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_setLength(void * jarg1, float jarg2) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  Vector2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2d *) &(arg1)->setLength(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2d_scaledVector(void * jarg1, float jarg2) {
  void * jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  Vector2d result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vector2d const *)arg1)->scaledVector(arg2);
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isRightOf(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isRightOf((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isLeftOf(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isLeftOf((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isParallelTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isParallelTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isParallelTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isParallelTo((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isCodirectionalTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isCodirectionalTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isCodirectionalTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isCodirectionalTo((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isOppositeTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isOppositeTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isOppositeTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isOppositeTo((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isPerpendicularTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isPerpendicularTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_isPerpendicularTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isPerpendicularTo((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_distanceToVector(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->distanceToVector((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_projectScaleToVector(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->projectScaleToVector((Vector2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2d_projectResolveVector(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  float jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Vector2d *arg4 = 0 ;
  float result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d & type is null", 0);
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->projectResolveVector((Vector2d const &)*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_resolveVector__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Vector2d *arg4 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->resolveVector((Vector2d const &)*arg2,(Vector2d const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2d_resolveVector__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Vector2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->resolveVector((Vector2d const &)*arg2,(Vector2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2d(void * jarg1) {
  Vector2d *arg1 = (Vector2d *) 0 ;
  
  arg1 = (Vector2d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Point2d_x_set(void * jarg1, float jarg2) {
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Point2d_x_get(void * jarg1) {
  float jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float result;
  
  arg1 = (Point2d *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Point2d_y_set(void * jarg1, float jarg2) {
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Point2d_y_get(void * jarg1) {
  float jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float result;
  
  arg1 = (Point2d *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_kInvalid() {
  void * jresult ;
  Point2d result;
  
  result = Point2d::kInvalid();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_kOrigin() {
  void * jresult ;
  Point2d result;
  
  result = Point2d::kOrigin();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Point2d__SWIG_0() {
  void * jresult ;
  Point2d *result = 0 ;
  
  result = (Point2d *)new Point2d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Point2d__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Point2d *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Point2d *)new Point2d(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Point2d__SWIG_2(void * jarg1) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  Point2d *result = 0 ;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Point2d *)new Point2d((Point2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Point2d result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = ((Point2d const *)arg1)->transform((Matrix2d const &)*arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_scaleBy__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d *result = 0 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Point2d *) &(arg1)->scaleBy(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_scaleBy__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  Point2d *result = 0 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Point2d *) &(arg1)->scaleBy(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Point2d_offset__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->offset(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Point2d_offset__SWIG_1(void * jarg1, void * jarg2) {
  Point2d *arg1 = (Point2d *) 0 ;
  Vector2d *arg2 = 0 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return ;
  } 
  (arg1)->offset((Vector2d const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_add(void * jarg1, void * jarg2) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = ((Point2d const *)arg1)->add((Point2d const &)*arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_subtract__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  Vector2d result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = ((Point2d const *)arg1)->subtract((Point2d const &)*arg2);
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_subtract__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Point2d result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = ((Point2d const *)arg1)->subtract((Vector2d const &)*arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_negate(void * jarg1) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Vector2d result;
  
  arg1 = (Point2d *)jarg1; 
  result = ((Point2d const *)arg1)->negate();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_asVector(void * jarg1) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Vector2d result;
  
  arg1 = (Point2d *)jarg1; 
  result = ((Point2d const *)arg1)->asVector();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Point2d_length(void * jarg1) {
  float jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float result;
  
  arg1 = (Point2d *)jarg1; 
  result = (float)((Point2d const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Point2d_distanceTo(void * jarg1, void * jarg2) {
  float jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  float result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (float)((Point2d const *)arg1)->distanceTo((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Point2d_distanceSquare(void * jarg1, void * jarg2) {
  float jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  float result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (float)((Point2d const *)arg1)->distanceSquare((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Point2d_isEqualTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Point2d const *)arg1)->isEqualTo((Point2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Point2d_isEqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Point2d const *)arg1)->isEqualTo((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Point2d_isDegenerate(void * jarg1) {
  unsigned int jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1; 
  result = (bool)((Point2d const *)arg1)->isDegenerate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_set__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d *result = 0 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Point2d *) &(arg1)->set(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *result = 0 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Point2d *) &(arg1)->set((Point2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_polarPoint(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ((Point2d const *)arg1)->polarPoint(arg2,arg3);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_rulerPoint__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  Point2d result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((Point2d const *)arg1)->rulerPoint((Point2d const &)*arg2,arg3);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Point2d_rulerPoint__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  Point2d result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = ((Point2d const *)arg1)->rulerPoint((Point2d const &)*arg2,arg3,arg4);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Point2d(void * jarg1) {
  Point2d *arg1 = (Point2d *) 0 ;
  
  arg1 = (Point2d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_m11_set(void * jarg1, float jarg2) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m11 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_m11_get(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float) ((arg1)->m11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_m12_set(void * jarg1, float jarg2) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m12 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_m12_get(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float) ((arg1)->m12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_m21_set(void * jarg1, float jarg2) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m21 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_m21_get(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float) ((arg1)->m21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_m22_set(void * jarg1, float jarg2) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m22 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_m22_get(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float) ((arg1)->m22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_dx_set(void * jarg1, float jarg2) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dx = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_dx_get(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float) ((arg1)->dx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_dy_set(void * jarg1, float jarg2) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dy = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_dy_get(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float) ((arg1)->dy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_kIdentity() {
  void * jresult ;
  Matrix2d result;
  
  result = Matrix2d::kIdentity();
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix2d__SWIG_0() {
  void * jresult ;
  Matrix2d *result = 0 ;
  
  result = (Matrix2d *)new Matrix2d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix2d__SWIG_1(void * jarg1) {
  void * jresult ;
  Matrix2d *arg1 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *)new Matrix2d((Matrix2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix2d__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  Matrix2d *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (Matrix2d *)new Matrix2d(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix2d__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector2d *arg1 = 0 ;
  Vector2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Vector2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *)new Matrix2d((Vector2d const &)*arg1,(Vector2d const &)*arg2,(Point2d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_scaleBy__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix2d *) &(arg1)->scaleBy(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_scaleBy__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix2d *) &(arg1)->scaleBy(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_preMultBy(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->preMultBy((Matrix2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_postMultBy(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->postMultBy((Matrix2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToProduct(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Matrix2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Matrix2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToProduct((Matrix2d const &)*arg2,(Matrix2d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_transformPoints(void * jarg1, int jarg2, void * jarg3) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  ((Matrix2d const *)arg1)->transformPoints(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_transformVectors(void * jarg1, int jarg2, void * jarg3) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  int arg2 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2d *)jarg3; 
  ((Matrix2d const *)arg1)->transformVectors(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_det(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float)((Matrix2d const *)arg1)->det();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix2d_invert(void * jarg1) {
  unsigned int jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  bool result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (bool)(arg1)->invert();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_inverse(void * jarg1) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = ((Matrix2d const *)arg1)->inverse();
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix2d_isInvertible(void * jarg1) {
  unsigned int jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  bool result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (bool)((Matrix2d const *)arg1)->isInvertible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_scale(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float)((Matrix2d const *)arg1)->scale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_scaleX(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float)((Matrix2d const *)arg1)->scaleX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_scaleY(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float)((Matrix2d const *)arg1)->scaleY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix2d_angle(void * jarg1) {
  float jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (float)((Matrix2d const *)arg1)->angle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix2d_isEqualTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Matrix2d const *)arg1)->isEqualTo((Matrix2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix2d_isEqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Matrix2d const *)arg1)->isEqualTo((Matrix2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix2d_isIdentity(void * jarg1) {
  unsigned int jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  bool result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (bool)((Matrix2d const *)arg1)->isIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix2d_isOrtho(void * jarg1) {
  unsigned int jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  bool result;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (bool)((Matrix2d const *)arg1)->isOrtho();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix2d_hasMirror(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d & type is null", 0);
    return 0;
  } 
  result = (bool)((Matrix2d const *)arg1)->hasMirror(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setCoordSystem(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setCoordSystem((Vector2d const &)*arg2,(Vector2d const &)*arg3,(Point2d const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix2d_getCoordSystem(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d & type is null", 0);
    return ;
  } 
  arg3 = (Vector2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d & type is null", 0);
    return ;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  ((Matrix2d const *)arg1)->getCoordSystem(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_coordSystem__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector2d *arg1 = 0 ;
  Vector2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Matrix2d result;
  
  arg1 = (Vector2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::coordSystem((Vector2d const &)*arg1,(Vector2d const &)*arg2,(Point2d const &)*arg3);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_coordSystem__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix2d result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = Matrix2d::coordSystem((Point2d const &)*arg1,arg2,arg3,arg4);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_coordSystem__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  Matrix2d result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = Matrix2d::coordSystem((Point2d const &)*arg1,arg2,arg3);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_coordSystem__SWIG_3(void * jarg1, float jarg2) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  float arg2 ;
  Matrix2d result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = Matrix2d::coordSystem((Point2d const &)*arg1,arg2);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToIdentity(void * jarg1) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (Matrix2d *) &(arg1)->setToIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (Matrix2d *) &(arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToTranslation(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToTranslation((Vector2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToRotation__SWIG_0(void * jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToRotation(arg2,(Point2d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToRotation__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix2d *) &(arg1)->setToRotation(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToScaling__SWIG_0(void * jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToScaling(arg2,(Point2d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToScaling__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix2d *) &(arg1)->setToScaling(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToScaling__SWIG_2(void * jarg1, float jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d *arg4 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToScaling(arg2,arg3,(Point2d const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToScaling__SWIG_3(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix2d *) &(arg1)->setToScaling(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToMirroring__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Point2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToMirroring((Point2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToMirroring__SWIG_1(void * jarg1) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  result = (Matrix2d *) &(arg1)->setToMirroring();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToMirroring__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Point2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToMirroring((Point2d const &)*arg2,(Vector2d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToShearing__SWIG_0(void * jarg1, float jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d *arg4 = 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToShearing(arg2,arg3,(Point2d const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_setToShearing__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Matrix2d *result = 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix2d *) &(arg1)->setToShearing(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_translation(void * jarg1) {
  void * jresult ;
  Vector2d *arg1 = 0 ;
  Matrix2d result;
  
  arg1 = (Vector2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::translation((Vector2d const &)*arg1);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_rotation__SWIG_0(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  Point2d *arg2 = 0 ;
  Matrix2d result;
  
  arg1 = (float)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::rotation(arg1,(Point2d const &)*arg2);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_rotation__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  Matrix2d result;
  
  arg1 = (float)jarg1; 
  result = Matrix2d::rotation(arg1);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_scaling__SWIG_0(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  Point2d *arg2 = 0 ;
  Matrix2d result;
  
  arg1 = (float)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::scaling(arg1,(Point2d const &)*arg2);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_scaling__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  Matrix2d result;
  
  arg1 = (float)jarg1; 
  result = Matrix2d::scaling(arg1);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_scaling__SWIG_2(float jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  Matrix2d result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::scaling(arg1,arg2,(Point2d const &)*arg3);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_scaling__SWIG_3(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Matrix2d result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = Matrix2d::scaling(arg1,arg2);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_mirroring__SWIG_0(void * jarg1) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  Matrix2d result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::mirroring((Point2d const &)*arg1);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_mirroring__SWIG_1() {
  void * jresult ;
  Matrix2d result;
  
  result = Matrix2d::mirroring();
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_mirroring__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  Vector2d *arg2 = 0 ;
  Matrix2d result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::mirroring((Point2d const &)*arg1,(Vector2d const &)*arg2);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_shearing__SWIG_0(float jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  Matrix2d result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::shearing(arg1,arg2,(Point2d const &)*arg3);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_shearing__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Matrix2d result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = Matrix2d::shearing(arg1,arg2);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix2d_transformWith2P(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Matrix2d result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = Matrix2d::transformWith2P((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix2d(void * jarg1) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  
  arg1 = (Matrix2d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RECT_2D_left_set(void * jarg1, float jarg2) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float arg2 ;
  
  arg1 = (tagRECT2D *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RECT_2D_left_get(void * jarg1) {
  float jresult ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  arg1 = (tagRECT2D *)jarg1; 
  result = (float) ((arg1)->left);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RECT_2D_top_set(void * jarg1, float jarg2) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float arg2 ;
  
  arg1 = (tagRECT2D *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->top = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RECT_2D_top_get(void * jarg1) {
  float jresult ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  arg1 = (tagRECT2D *)jarg1; 
  result = (float) ((arg1)->top);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RECT_2D_right_set(void * jarg1, float jarg2) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float arg2 ;
  
  arg1 = (tagRECT2D *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RECT_2D_right_get(void * jarg1) {
  float jresult ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  arg1 = (tagRECT2D *)jarg1; 
  result = (float) ((arg1)->right);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RECT_2D_bottom_set(void * jarg1, float jarg2) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float arg2 ;
  
  arg1 = (tagRECT2D *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bottom = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RECT_2D_bottom_get(void * jarg1) {
  float jresult ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  arg1 = (tagRECT2D *)jarg1; 
  result = (float) ((arg1)->bottom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RECT_2D() {
  void * jresult ;
  tagRECT2D *result = 0 ;
  
  result = (tagRECT2D *)new tagRECT2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RECT_2D_width(void * jarg1) {
  float jresult ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  arg1 = (tagRECT2D *)jarg1; 
  result = (float)((tagRECT2D const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RECT_2D_height(void * jarg1) {
  float jresult ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  arg1 = (tagRECT2D *)jarg1; 
  result = (float)((tagRECT2D const *)arg1)->height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RECT_2D(void * jarg1) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  
  arg1 = (tagRECT2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2d_xmin_set(void * jarg1, float jarg2) {
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->xmin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box2d_xmin_get(void * jarg1) {
  float jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float result;
  
  arg1 = (Box2d *)jarg1; 
  result = (float) ((arg1)->xmin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2d_ymin_set(void * jarg1, float jarg2) {
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ymin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box2d_ymin_get(void * jarg1) {
  float jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float result;
  
  arg1 = (Box2d *)jarg1; 
  result = (float) ((arg1)->ymin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2d_xmax_set(void * jarg1, float jarg2) {
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->xmax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box2d_xmax_get(void * jarg1) {
  float jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float result;
  
  arg1 = (Box2d *)jarg1; 
  result = (float) ((arg1)->xmax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2d_ymax_set(void * jarg1, float jarg2) {
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ymax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box2d_ymax_get(void * jarg1) {
  float jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float result;
  
  arg1 = (Box2d *)jarg1; 
  result = (float) ((arg1)->ymax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_kIdentity() {
  void * jresult ;
  Box2d result;
  
  result = Box2d::kIdentity();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_0() {
  void * jresult ;
  Box2d *result = 0 ;
  
  result = (Box2d *)new Box2d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Box2d *arg1 = 0 ;
  bool arg2 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (Box2d *)new Box2d((Box2d const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_2(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *)new Box2d((Box2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *)new Box2d((Point2d const &)*arg1,(Point2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4, unsigned int jarg5) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  Box2d *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (Box2d *)new Box2d(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_5(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Box2d *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Box2d *)new Box2d(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_6(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  RECT_2D *arg1 = 0 ;
  bool arg2 ;
  Box2d *result = 0 ;
  
  arg1 = (RECT_2D *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RECT_2D const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (Box2d *)new Box2d((RECT_2D const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_7(void * jarg1) {
  void * jresult ;
  RECT_2D *arg1 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (RECT_2D *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RECT_2D const & type is null", 0);
    return 0;
  } 
  result = (Box2d *)new Box2d((RECT_2D const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_8(int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  Box2d *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (Box2d *)new Box2d(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_9(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Box2d *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (Box2d *)new Box2d(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_10(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *)new Box2d((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_11(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Box2d *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  result = (Box2d *)new Box2d(arg1,(Point2d const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_12(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *)new Box2d((Point2d const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2d__SWIG_13(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Box2d *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Box2d *)new Box2d(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2d_get__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  ((Box2d const *)arg1)->get(*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_get__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  RECT_2D *arg2 = 0 ;
  RECT_2D *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (RECT_2D *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RECT_2D & type is null", 0);
    return 0;
  } 
  result = (RECT_2D *) &((Box2d const *)arg1)->get(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_set__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  bool arg3 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (Box2d *) &(arg1)->set((Box2d const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->set((Box2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_set__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->set((Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_set__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Box2d *) &(arg1)->set(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_set__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->set((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_set__SWIG_5(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  result = (Box2d *) &(arg1)->set(arg2,(Point2d const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_set__SWIG_6(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Box2d *) &(arg1)->set((Point2d const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box2d_width(void * jarg1) {
  float jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float result;
  
  arg1 = (Box2d *)jarg1; 
  result = (float)((Box2d const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box2d_height(void * jarg1) {
  float jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float result;
  
  arg1 = (Box2d *)jarg1; 
  result = (float)((Box2d const *)arg1)->height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_size(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Vector2d result;
  
  arg1 = (Box2d *)jarg1; 
  result = ((Box2d const *)arg1)->size();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_center(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  arg1 = (Box2d *)jarg1; 
  result = ((Box2d const *)arg1)->center();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_leftTop(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  arg1 = (Box2d *)jarg1; 
  result = ((Box2d const *)arg1)->leftTop();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_rightTop(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  arg1 = (Box2d *)jarg1; 
  result = ((Box2d const *)arg1)->rightTop();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_leftBottom(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  arg1 = (Box2d *)jarg1; 
  result = ((Box2d const *)arg1)->leftBottom();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_rightBottom(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  arg1 = (Box2d *)jarg1; 
  result = ((Box2d const *)arg1)->rightBottom();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_normalize(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  result = (Box2d *) &(arg1)->normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_swapTopBottom(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  result = (Box2d *) &(arg1)->swapTopBottom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_empty(void * jarg1) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  result = (Box2d *) &(arg1)->empty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isNormalized(void * jarg1) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  result = (bool)((Box2d const *)arg1)->isNormalized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isNull(void * jarg1) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  result = (bool)((Box2d const *)arg1)->isNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isEmpty__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Tol *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Tol *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)((Box2d const *)arg1)->isEmpty((Tol const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isEmpty__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Tol *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isEmpty((Tol const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isEmpty__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  result = (bool)((Box2d const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isEmptyMinus__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Tol *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isEmptyMinus((Tol const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isEmptyMinus__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  result = (bool)((Box2d const *)arg1)->isEmptyMinus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_contains__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->contains((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_contains__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->contains((Point2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_contains__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->contains((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_contains__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->contains((Box2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_inflate__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Box2d *) &(arg1)->inflate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_inflate__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->inflate(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_inflate__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->inflate((Vector2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_inflate__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->inflate((Box2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_inflate__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Box2d *) &(arg1)->inflate(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_deflate__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Box2d *) &(arg1)->deflate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_deflate__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->deflate(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_deflate__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->deflate((Vector2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_deflate__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->deflate((Box2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_deflate__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Box2d *) &(arg1)->deflate(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_offset__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->offset(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_offset__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->offset((Vector2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_scaleBy__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->scaleBy(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_scaleBy__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Box2d *) &(arg1)->scaleBy(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isIntersect(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isIntersect((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_intersectWith__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *arg3 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->intersectWith((Box2d const &)*arg2,(Box2d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_intersectWith__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->intersectWith((Box2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_unionWith__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *arg3 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->unionWith((Box2d const &)*arg2,(Box2d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_unionWith__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->unionWith((Box2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_unionWith__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->unionWith(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_unionWith__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (Box2d *) &(arg1)->unionWith((Point2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2d_offset__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = ((Box2d const *)arg1)->offset((Box2d const &)*arg2);
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isEqualTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Tol *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isEqualTo((Box2d const &)*arg2,(Tol const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2d_isEqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isEqualTo((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Box2d(void * jarg1) {
  Box2d *arg1 = (Box2d *) 0 ;
  
  arg1 = (Box2d *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_toRange(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)mgbase::toRange(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_to0_2PI(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)mgbase::to0_2PI(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_toPI(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)mgbase::toPI(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_deg2Rad(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)mgbase::deg2Rad(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_rad2Deg(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)mgbase::rad2Deg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_dms2Deg(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)mgbase::dms2Deg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_deg2Dms(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)mgbase::deg2Dms(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_getMidAngle(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)mgbase::getMidAngle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_getMidAngle2(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)mgbase::getMidAngle2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_getDiffAngle(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)mgbase::getDiffAngle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mgbase_getGcd(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)mgbase::getGcd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgbase_roundReal(float jarg1, int jarg2) {
  float jresult ;
  float arg1 ;
  int arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)mgbase::roundReal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_mgbase() {
  void * jresult ;
  mgbase *result = 0 ;
  
  result = (mgbase *)new mgbase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_mgbase(void * jarg1) {
  mgbase *arg1 = (mgbase *) 0 ;
  
  arg1 = (mgbase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_fitBezier(void * jarg1, float jarg2, void * jarg3) {
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  mgcurv::fitBezier((Point2d const *)arg1,arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_bezierTanget(void * jarg1, float jarg2, void * jarg3) {
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  mgcurv::bezierTanget((Point2d const *)arg1,arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_splitBezier(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Point2d *arg4 = (Point2d *) 0 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (Point2d *)jarg4; 
  mgcurv::splitBezier((Point2d const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgcurv_bezierIsStraight(void * jarg1) {
  unsigned int jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1; 
  result = (bool)mgcurv::bezierIsStraight((Point2d const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgcurv_lengthOfBezier(void * jarg1) {
  float jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float result;
  
  arg1 = (Point2d *)jarg1; 
  result = (float)mgcurv::lengthOfBezier((Point2d const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgcurv_bezierPointLengthFromStart(void * jarg1, float jarg2) {
  float jresult ;
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)mgcurv::bezierPointLengthFromStart((Point2d const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_bezier4P(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  Point2d *arg6 = 0 ;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  arg6 = (Point2d *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  mgcurv::bezier4P((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,*arg5,*arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_mgcurv_fitCurve(int jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, float jarg6) {
  int jresult ;
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  int arg4 ;
  Point2d *arg5 = (Point2d *) 0 ;
  float arg6 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = (Vector2d *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (Point2d *)jarg5; 
  arg6 = (float)jarg6; 
  result = (int)mgcurv::fitCurve(arg1,arg2,arg3,arg4,(Point2d const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_quadBezierToCubic(void * jarg1, void * jarg2) {
  Point2d *arg1 ;
  Point2d *arg2 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  mgcurv::quadBezierToCubic((Point2d const (*))arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_ellipse90ToBezier(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  mgcurv::ellipse90ToBezier((Point2d const &)*arg1,(Point2d const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_ellipseToBezier(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  Point2d *arg1 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  mgcurv::ellipseToBezier(arg1,(Point2d const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_roundRectToBeziers(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  Point2d *arg1 ;
  Box2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  mgcurv::roundRectToBeziers(arg1,(Box2d const &)*arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_mgcurv_arcToBezier(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  int jresult ;
  Point2d *arg1 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (int)mgcurv::arcToBezier(arg1,(Point2d const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mgcurv_crossTwoCircles(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, float jarg6) {
  int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  Point2d *arg5 = 0 ;
  float arg6 ;
  int result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  result = (int)mgcurv::crossTwoCircles(*arg1,*arg2,(Point2d const &)*arg3,arg4,(Point2d const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mgcurv_crossLineCircle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6, unsigned int jarg7) {
  int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  float arg6 ;
  bool arg7 ;
  int result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (int)mgcurv::crossLineCircle(*arg1,*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mgcurv_crossLineCircle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  float arg6 ;
  int result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  result = (int)mgcurv::crossLineCircle(*arg1,*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgcurv_cubicSplines__SWIG_0(int jarg1, void * jarg2, void * jarg3, int jarg4, float jarg5) {
  unsigned int jresult ;
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  int arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = (Vector2d *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)mgcurv::cubicSplines(arg1,(Point2d const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgcurv_cubicSplines__SWIG_1(int jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = (Vector2d *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)mgcurv::cubicSplines(arg1,(Point2d const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgcurv_cubicSplines__SWIG_2(int jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = (Vector2d *)jarg3; 
  result = (bool)mgcurv::cubicSplines(arg1,(Point2d const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_fitCubicSpline(int jarg1, void * jarg2, void * jarg3, int jarg4, float jarg5, void * jarg6) {
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  int arg4 ;
  float arg5 ;
  Point2d *arg6 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = (Vector2d *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (Point2d *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  mgcurv::fitCubicSpline(arg1,(Point2d const *)arg2,(Vector2d const *)arg3,arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_cubicSplineToBezier__SWIG_0(int jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  int arg4 ;
  Point2d *arg5 ;
  bool arg6 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = (Vector2d *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (Point2d *)jarg5; 
  arg6 = jarg6 ? true : false; 
  mgcurv::cubicSplineToBezier(arg1,(Point2d const *)arg2,(Vector2d const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgcurv_cubicSplineToBezier__SWIG_1(int jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  int arg4 ;
  Point2d *arg5 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = (Vector2d *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (Point2d *)jarg5; 
  mgcurv::cubicSplineToBezier(arg1,(Point2d const *)arg2,(Vector2d const *)arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_mgcurv_bsplinesToBeziers(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  Point2d *arg1 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (Point2d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)mgcurv::bsplinesToBeziers(arg1,arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_mgcurv() {
  void * jresult ;
  mgcurv *result = 0 ;
  
  result = (mgcurv *)new mgcurv();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_mgcurv(void * jarg1) {
  mgcurv *arg1 = (mgcurv *) 0 ;
  
  arg1 = (mgcurv *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isLeft(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isLeft((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isLeft2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Tol *arg4 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Tol *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isLeft2((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Tol const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isLeftOn(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isLeftOn((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isLeftOn2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Tol *arg4 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Tol *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isLeftOn2((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Tol const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isColinear(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isColinear((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isColinear2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Tol *arg4 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Tol *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isColinear2((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Tol const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isIntersectProp(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isIntersectProp((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isBetweenLine(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isBetweenLine((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isProjectBetweenLine(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isProjectBetweenLine((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isProjectBetweenRayline(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isProjectBetweenRayline((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isBetweenLine2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Tol *arg4 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Tol *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isBetweenLine2((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Tol const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isBetweenLine3__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4; 
  result = (bool)mglnrel::isBetweenLine3((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isBetweenLine3__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isBetweenLine3((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_isIntersect(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::isIntersect((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mglnrel_ptToBeeline(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  float result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (float)mglnrel::ptToBeeline((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mglnrel_ptToBeeline2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  float jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d arg3 ;
  Point2d *arg4 = 0 ;
  Point2d *argp3 ;
  float result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  argp3 = (Point2d *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Point2d", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (float)mglnrel::ptToBeeline2((Point2d const &)*arg1,(Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mglnrel_ptToLine(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  float jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d arg3 ;
  Point2d *arg4 = 0 ;
  Point2d *argp3 ;
  float result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  argp3 = (Point2d *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Point2d", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (float)mglnrel::ptToLine((Point2d const &)*arg1,(Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_crossLineAbc__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  Point2d *arg7 = 0 ;
  Tol *arg8 = 0 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (Point2d *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg8 = (Tol *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::crossLineAbc(arg1,arg2,arg3,arg4,arg5,arg6,*arg7,(Tol const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_crossLineAbc__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, void * jarg7) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  Point2d *arg7 = 0 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (Point2d *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::crossLineAbc(arg1,arg2,arg3,arg4,arg5,arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_cross2Line__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  Tol *arg6 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg6 = (Tol *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Tol const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::cross2Line((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,*arg5,(Tol const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_cross2Line__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::cross2Line((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mglnrel_clipLine(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Box2d *arg3 = 0 ;
  bool result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)mglnrel::clipLine(*arg1,*arg2,(Box2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_mglnrel() {
  void * jresult ;
  mglnrel *result = 0 ;
  
  result = (mglnrel *)new mglnrel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_mglnrel(void * jarg1) {
  mglnrel *arg1 = (mglnrel *) 0 ;
  
  arg1 = (mglnrel *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_mgnear_nearestOnBezier(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Point2d *arg3 = 0 ;
  float result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (float)mgnear::nearestOnBezier((Point2d const &)*arg1,(Point2d const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_mgnear_bezierBox1(void * jarg1) {
  void * jresult ;
  Point2d *arg1 ;
  Box2d result;
  
  arg1 = (Point2d *)jarg1; 
  result = mgnear::bezierBox1((Point2d const (*))arg1);
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_mgnear_bezierBox4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Box2d result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = mgnear::bezierBox4((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgnear_beziersBox__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  mgnear::beziersBox(*arg1,arg2,(Point2d const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgnear_beziersBox__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  mgnear::beziersBox(*arg1,arg2,(Point2d const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgnear_beziersIntersectBox__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)mgnear::beziersIntersectBox((Box2d const &)*arg1,arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgnear_beziersIntersectBox__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  result = (bool)mgnear::beziersIntersectBox((Box2d const &)*arg1,arg2,(Point2d const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgnear_cubicSplinesBox__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Vector2d *arg4 = (Vector2d *) 0 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (Vector2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  mgnear::cubicSplinesBox(*arg1,arg2,(Point2d const *)arg3,(Vector2d const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgnear_cubicSplinesBox__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Vector2d *arg4 = (Vector2d *) 0 ;
  bool arg5 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (Vector2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  mgnear::cubicSplinesBox(*arg1,arg2,(Point2d const *)arg3,(Vector2d const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgnear_cubicSplinesBox__SWIG_2(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Vector2d *arg4 = (Vector2d *) 0 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (Vector2d *)jarg4; 
  mgnear::cubicSplinesBox(*arg1,arg2,(Point2d const *)arg3,(Vector2d const *)arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgnear_cubicSplinesIntersectBox__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Vector2d *arg4 = (Vector2d *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (Vector2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)mgnear::cubicSplinesIntersectBox((Box2d const &)*arg1,arg2,(Point2d const *)arg3,(Vector2d const *)arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgnear_cubicSplinesIntersectBox__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Vector2d *arg4 = (Vector2d *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (Vector2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)mgnear::cubicSplinesIntersectBox((Box2d const &)*arg1,arg2,(Point2d const *)arg3,(Vector2d const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_mgnear_cubicSplinesIntersectBox__SWIG_2(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Vector2d *arg4 = (Vector2d *) 0 ;
  bool result;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (Vector2d *)jarg4; 
  result = (bool)mgnear::cubicSplinesIntersectBox((Box2d const &)*arg1,arg2,(Point2d const *)arg3,(Vector2d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgnear_getRectHandle(void * jarg1, int jarg2, void * jarg3) {
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return ;
  } 
  mgnear::getRectHandle((Box2d const &)*arg1,arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgnear_moveRectHandle__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  mgnear::moveRectHandle(*arg1,arg2,(Point2d const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_mgnear_moveRectHandle__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Box2d *arg1 = 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (Box2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  mgnear::moveRectHandle(*arg1,arg2,(Point2d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_mgnear() {
  void * jresult ;
  mgnear *result = 0 ;
  
  result = (mgnear *)new mgnear();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_mgnear(void * jarg1) {
  mgnear *arg1 = (mgnear *) 0 ;
  
  arg1 = (mgnear *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiCanvas(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kLineDashMask_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kLineDashMask;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kLineCapDefault_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kLineCapDefault;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kLineCapMask_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kLineCapMask;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kLineCapButt_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kLineCapButt;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kLineCapRound_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kLineCapRound;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kLineCapSquare_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kLineCapSquare;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kAlignLeft_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kAlignLeft;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kAlignCenter_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kAlignCenter;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kAlignRight_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kAlignRight;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kAlignHorz_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kAlignHorz;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kAlignTop_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kAlignTop;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kAlignBottom_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kAlignBottom;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kAlignVCenter_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kAlignVCenter;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCanvas_kAlignVert_get() {
  int jresult ;
  int result;
  
  result = (int)GiCanvas::kAlignVert;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_setPen(void * jarg1, int jarg2, float jarg3, int jarg4, float jarg5, float jarg6) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->setPen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_setBrush(void * jarg1, int jarg2, int jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setBrush(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_clearRect(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->clearRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawRect(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6, unsigned int jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawRect(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawLine(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawEllipse(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6, unsigned int jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_beginPath(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  (arg1)->beginPath();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_moveTo(void * jarg1, float jarg2, float jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_lineTo(void * jarg1, float jarg2, float jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->lineTo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_bezierTo(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_quadTo(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->quadTo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_closePath(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  (arg1)->closePath();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_drawPath(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->drawPath(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_saveClip(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  (arg1)->saveClip();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_restoreClip(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  (arg1)->restoreClip();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCanvas_clipRect(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->clipRect(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCanvas_clipPath(void * jarg1) {
  unsigned int jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  bool result;
  
  arg1 = (GiCanvas *)jarg1; 
  result = (bool)(arg1)->clipPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCanvas_drawHandle(void * jarg1, float jarg2, float jarg3, int jarg4, float jarg5) {
  unsigned int jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->drawHandle(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCanvas_drawBitmap(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->drawBitmap((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiCanvas_drawTextAt(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, int jarg6, float jarg7) {
  float jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  float arg7 ;
  float result;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float)jarg7; 
  result = (float)(arg1)->drawTextAt((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCanvas_beginShape(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  unsigned int jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool result;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->beginShape(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCanvas_beginShapeSwigExplicitGiCanvas(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  unsigned int jresult ;
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool result;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->GiCanvas::beginShape(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_endShape(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->endShape(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_endShapeSwigExplicitGiCanvas(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->GiCanvas::endShape(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiCanvas() {
  void * jresult ;
  GiCanvas *result = 0 ;
  
  result = (GiCanvas *)new SwigDirector_GiCanvas();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCanvas_director_connect(void *objarg, SwigDirector_GiCanvas::SWIG_Callback0_t callback0, SwigDirector_GiCanvas::SWIG_Callback1_t callback1, SwigDirector_GiCanvas::SWIG_Callback2_t callback2, SwigDirector_GiCanvas::SWIG_Callback3_t callback3, SwigDirector_GiCanvas::SWIG_Callback4_t callback4, SwigDirector_GiCanvas::SWIG_Callback5_t callback5, SwigDirector_GiCanvas::SWIG_Callback6_t callback6, SwigDirector_GiCanvas::SWIG_Callback7_t callback7, SwigDirector_GiCanvas::SWIG_Callback8_t callback8, SwigDirector_GiCanvas::SWIG_Callback9_t callback9, SwigDirector_GiCanvas::SWIG_Callback10_t callback10, SwigDirector_GiCanvas::SWIG_Callback11_t callback11, SwigDirector_GiCanvas::SWIG_Callback12_t callback12, SwigDirector_GiCanvas::SWIG_Callback13_t callback13, SwigDirector_GiCanvas::SWIG_Callback14_t callback14, SwigDirector_GiCanvas::SWIG_Callback15_t callback15, SwigDirector_GiCanvas::SWIG_Callback16_t callback16, SwigDirector_GiCanvas::SWIG_Callback17_t callback17, SwigDirector_GiCanvas::SWIG_Callback18_t callback18, SwigDirector_GiCanvas::SWIG_Callback19_t callback19, SwigDirector_GiCanvas::SWIG_Callback20_t callback20, SwigDirector_GiCanvas::SWIG_Callback21_t callback21) {
  GiCanvas *obj = (GiCanvas *)objarg;
  SwigDirector_GiCanvas *director = dynamic_cast<SwigDirector_GiCanvas *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_r_set(void * jarg1, unsigned char jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GiColor_r_get(void * jarg1) {
  unsigned char jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  arg1 = (GiColor *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_g_set(void * jarg1, unsigned char jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GiColor_g_get(void * jarg1) {
  unsigned char jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  arg1 = (GiColor *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_b_set(void * jarg1, unsigned char jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GiColor_b_get(void * jarg1) {
  unsigned char jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  arg1 = (GiColor *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_a_set(void * jarg1, unsigned char jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GiColor_a_get(void * jarg1) {
  unsigned char jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  arg1 = (GiColor *)jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_0() {
  void * jresult ;
  GiColor *result = 0 ;
  
  result = (GiColor *)new GiColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  GiColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (GiColor *)new GiColor(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_2(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  GiColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (GiColor *)new GiColor(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_3(void * jarg1) {
  void * jresult ;
  GiColor *arg1 = 0 ;
  GiColor *result = 0 ;
  
  arg1 = (GiColor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  result = (GiColor *)new GiColor((GiColor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_4(int jarg1, unsigned int jarg2) {
  void * jresult ;
  int arg1 ;
  bool arg2 ;
  GiColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (GiColor *)new GiColor(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiColor__SWIG_5(int jarg1) {
  void * jresult ;
  int arg1 ;
  GiColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GiColor *)new GiColor(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_White() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::White();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_Black() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::Black();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_Blue() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::Blue();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_Red() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::Red();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_Green() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::Green();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_Invalid() {
  void * jresult ;
  GiColor result;
  
  result = GiColor::Invalid();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiColor_getARGB(void * jarg1) {
  int jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  int result;
  
  arg1 = (GiColor *)jarg1; 
  result = (int)((GiColor const *)arg1)->getARGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_setARGB(void * jarg1, int jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setARGB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_set__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiColor_set__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiColor_withAlpha(void * jarg1, int jarg2) {
  void * jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  GiColor result;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GiColor const *)arg1)->withAlpha(arg2);
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiColor_isInvalid(void * jarg1) {
  unsigned int jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  bool result;
  
  arg1 = (GiColor *)jarg1; 
  result = (bool)((GiColor const *)arg1)->isInvalid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiColor_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiColor *arg1 = (GiColor *) 0 ;
  GiColor *arg2 = 0 ;
  bool result;
  
  arg1 = (GiColor *)jarg1; 
  arg2 = (GiColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  result = (bool)((GiColor const *)arg1)->equals((GiColor const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiColor(void * jarg1) {
  GiColor *arg1 = (GiColor *) 0 ;
  
  arg1 = (GiColor *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kSolidLine_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kSolidLine;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kDashLine_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kDashLine;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kDotLine_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kDotLine;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kDashDot_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kDashDot;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kDashDotdot_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kDashDotdot;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kNullLine_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kNullLine;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kCopyNone_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kCopyNone;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kLineRGB_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kLineRGB;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kLineAlpha_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kLineAlpha;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kLineARGB_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kLineARGB;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kLineWidth_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kLineWidth;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kLineStyle_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kLineStyle;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kFillRGB_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kFillRGB;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kFillAlpha_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kFillAlpha;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kFillARGB_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kFillARGB;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kLineArrayHead_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kLineArrayHead;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kCopyAll_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kCopyAll;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kLineDashMask_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kLineDashMask;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kArrowNone_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kArrowNone;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kArrowSharpClosed_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kArrowSharpClosed;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kArrowSharpLine_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kArrowSharpLine;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kArrowTLine_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kArrowTLine;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kArrowSlashLine_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kArrowSlashLine;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kArrowClosedCircle_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kArrowClosedCircle;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_kArrowOpenedCircle_get() {
  int jresult ;
  int result;
  
  result = (int)GiContext::kArrowOpenedCircle;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_0() {
  void * jresult ;
  GiContext *result = 0 ;
  
  result = (GiContext *)new GiContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_1(float jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *arg4 = 0 ;
  bool arg5 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  argp2 = (GiColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GiColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (GiColor *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (GiContext *)new GiContext(arg1,arg2,arg3,(GiColor const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_2(float jarg1, void * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *arg4 = 0 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  argp2 = (GiColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GiColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (GiColor *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  result = (GiContext *)new GiContext(arg1,arg2,arg3,(GiColor const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_3(float jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  argp2 = (GiColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GiColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (GiContext *)new GiContext(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_4(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  GiColor arg2 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  argp2 = (GiColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GiColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (GiContext *)new GiContext(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_5(float jarg1) {
  void * jresult ;
  float arg1 ;
  GiContext *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GiContext *)new GiContext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiContext__SWIG_6(void * jarg1) {
  void * jresult ;
  GiContext *arg1 = 0 ;
  GiContext *result = 0 ;
  
  arg1 = (GiContext *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  result = (GiContext *)new GiContext((GiContext const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiContext_copy__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  GiContext *result = 0 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (GiContext *) &(arg1)->copy((GiContext const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiContext_copy__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  GiContext *result = 0 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  result = (GiContext *) &(arg1)->copy((GiContext const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  result = (bool)((GiContext const *)arg1)->equals((GiContext const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getLineStyle(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getLineStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getLineStyleEx(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getLineStyleEx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineStyle__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setLineStyle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineStyle__SWIG_1(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineStyle(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiContext_getLineWidth(void * jarg1) {
  float jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  float result;
  
  arg1 = (GiContext *)jarg1; 
  result = (float)((GiContext const *)arg1)->getLineWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiContext_getExtraWidth(void * jarg1) {
  float jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  float result;
  
  arg1 = (GiContext *)jarg1; 
  result = (float)((GiContext const *)arg1)->getExtraWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_isAutoScale(void * jarg1) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  result = (bool)((GiContext const *)arg1)->isAutoScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineWidth(void * jarg1, float jarg2, unsigned int jarg3) {
  GiContext *arg1 = (GiContext *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setLineWidth(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setExtraWidth(void * jarg1, float jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  float arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setExtraWidth(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_isNullLine(void * jarg1) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  result = (bool)((GiContext const *)arg1)->isNullLine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setNullLine(void * jarg1) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  arg1 = (GiContext *)jarg1; 
  (arg1)->setNullLine();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiContext_getLineColor(void * jarg1) {
  void * jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor result;
  
  arg1 = (GiContext *)jarg1; 
  result = ((GiContext const *)arg1)->getLineColor();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineColor__SWIG_0(void * jarg1, void * jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor *arg2 = 0 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return ;
  } 
  (arg1)->setLineColor((GiColor const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineColor__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setLineColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineColor__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setLineColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getLineARGB(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getLineARGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineARGB(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineARGB(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getLineAlpha(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getLineAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setLineAlpha(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineAlpha(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_hasFillColor(void * jarg1) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  result = (bool)((GiContext const *)arg1)->hasFillColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setNoFillColor(void * jarg1) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  arg1 = (GiContext *)jarg1; 
  (arg1)->setNoFillColor();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiContext_getFillColor(void * jarg1) {
  void * jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor result;
  
  arg1 = (GiContext *)jarg1; 
  result = ((GiContext const *)arg1)->getFillColor();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillColor__SWIG_0(void * jarg1, void * jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor *arg2 = 0 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (GiColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return ;
  } 
  (arg1)->setFillColor((GiColor const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillColor__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setFillColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillColor__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setFillColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getFillARGB(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getFillARGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillARGB(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFillARGB(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getFillAlpha(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getFillAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setFillAlpha(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFillAlpha(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiContext_hasArrayHead(void * jarg1) {
  unsigned int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  arg1 = (GiContext *)jarg1; 
  result = (bool)((GiContext const *)arg1)->hasArrayHead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getStartArrayHead(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getStartArrayHead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setStartArrayHead(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStartArrayHead(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiContext_getEndArrayHead(void * jarg1) {
  int jresult ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  arg1 = (GiContext *)jarg1; 
  result = (int)((GiContext const *)arg1)->getEndArrayHead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiContext_setEndArrayHead(void * jarg1, int jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  arg1 = (GiContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEndArrayHead(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiContext(void * jarg1) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  arg1 = (GiContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiTransform__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  GiTransform *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (GiTransform *)new GiTransform(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiTransform__SWIG_1() {
  void * jresult ;
  GiTransform *result = 0 ;
  
  result = (GiTransform *)new GiTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiTransform__SWIG_2(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = 0 ;
  GiTransform *result = 0 ;
  
  arg1 = (GiTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiTransform const & type is null", 0);
    return 0;
  } 
  result = (GiTransform *)new GiTransform((GiTransform const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiTransform(void * jarg1) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_copy(void * jarg1, void * jarg2) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  GiTransform *arg2 = 0 ;
  GiTransform *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (GiTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiTransform const & type is null", 0);
    return 0;
  } 
  result = (GiTransform *) &(arg1)->copy((GiTransform const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getDpiX(void * jarg1) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (float)((GiTransform const *)arg1)->getDpiX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getDpiY(void * jarg1) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (float)((GiTransform const *)arg1)->getDpiY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiTransform_getWidth(void * jarg1) {
  int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  int result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (int)((GiTransform const *)arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiTransform_getHeight(void * jarg1) {
  int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  int result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (int)((GiTransform const *)arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_getCenterW(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d result;
  
  arg1 = (GiTransform *)jarg1; 
  result = ((GiTransform const *)arg1)->getCenterW();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getViewScale(void * jarg1) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (float)((GiTransform const *)arg1)->getViewScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getWorldToDisplayX__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  bool arg2 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (float)((GiTransform const *)arg1)->getWorldToDisplayX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getWorldToDisplayX__SWIG_1(void * jarg1) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (float)((GiTransform const *)arg1)->getWorldToDisplayX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getWorldToDisplayY__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  bool arg2 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (float)((GiTransform const *)arg1)->getWorldToDisplayY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getWorldToDisplayY__SWIG_1(void * jarg1) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (float)((GiTransform const *)arg1)->getWorldToDisplayY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_displayToModel__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  bool arg3 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (float)((GiTransform const *)arg1)->displayToModel(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_displayToModel__SWIG_1(void * jarg1, float jarg2) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)((GiTransform const *)arg1)->displayToModel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_modelToWorld(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->modelToWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_worldToModel(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->worldToModel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_displayToWorld(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->displayToWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_worldToDisplay(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->worldToDisplay();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_displayToModel__SWIG_2(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->displayToModel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_modelToDisplay(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->modelToDisplay();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_setWndSize(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setWndSize(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiTransform_setResolution__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setResolution(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiTransform_setResolution__SWIG_1(void * jarg1, float jarg2) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setResolution(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_setModelTransform(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setModelTransform((Matrix2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_getWndRectW(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d result;
  
  arg1 = (GiTransform *)jarg1; 
  result = ((GiTransform const *)arg1)->getWndRectW();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_getWndRectM(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d result;
  
  arg1 = (GiTransform *)jarg1; 
  result = ((GiTransform const *)arg1)->getWndRectM();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_getWndRect(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d result;
  
  arg1 = (GiTransform *)jarg1; 
  result = ((GiTransform const *)arg1)->getWndRect();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getMinViewScale(void * jarg1) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (float)((GiTransform const *)arg1)->getMinViewScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getMaxViewScale(void * jarg1) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (float)((GiTransform const *)arg1)->getMaxViewScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_getWorldLimits(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d result;
  
  arg1 = (GiTransform *)jarg1; 
  result = ((GiTransform const *)arg1)->getWorldLimits();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiTransform_setViewScaleRange(void * jarg1, float jarg2, float jarg3) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setViewScaleRange(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiTransform_setWorldLimits(void * jarg1, void * jarg2) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (arg1)->setWorldLimits((Box2d const &)*arg2);
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomWnd__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomWnd((Point2d const &)*arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomWnd__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->zoomWnd((Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d *arg2 = 0 ;
  RECT_2D *arg3 = (RECT_2D *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg3 = (RECT_2D *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomTo((Box2d const &)*arg2,(RECT_2D const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d *arg2 = 0 ;
  RECT_2D *arg3 = (RECT_2D *) 0 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg3 = (RECT_2D *)jarg3; 
  result = (bool)(arg1)->zoomTo((Box2d const &)*arg2,(RECT_2D const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomTo__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->zoomTo((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomTo__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomTo((Point2d const &)*arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomTo__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3; 
  result = (bool)(arg1)->zoomTo((Point2d const &)*arg2,(Point2d const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomTo__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->zoomTo((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomPan__SWIG_0(void * jarg1, float jarg2, float jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomPan(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomPan__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->zoomPan(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomByFactor__SWIG_0(void * jarg1, float jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomByFactor(arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomByFactor__SWIG_1(void * jarg1, float jarg2, void * jarg3) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3; 
  result = (bool)(arg1)->zoomByFactor(arg2,(Point2d const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomByFactor__SWIG_2(void * jarg1, float jarg2) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->zoomByFactor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomScale__SWIG_0(void * jarg1, float jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomScale(arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomScale__SWIG_1(void * jarg1, float jarg2, void * jarg3) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Point2d *)jarg3; 
  result = (bool)(arg1)->zoomScale(arg2,(Point2d const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoomScale__SWIG_2(void * jarg1, float jarg2) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->zoomScale(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_zoom(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d arg2 ;
  float arg3 ;
  Point2d *argp2 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  argp2 = (Point2d *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Point2d", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->zoom(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiTransform_enableZoom(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->enableZoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiTransform_getZoomValue(void * jarg1, void * jarg2) {
  float jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  float result;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (float)((GiTransform const *)arg1)->getZoomValue(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiTransform_getZoomTimes(void * jarg1) {
  long jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  long result;
  
  arg1 = (GiTransform *)jarg1; 
  result = (long)((GiTransform const *)arg1)->getZoomTimes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiSaveModelTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *arg2 = 0 ;
  GiSaveModelTransform *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = (GiSaveModelTransform *)new GiSaveModelTransform((GiTransform const *)arg1,(Matrix2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiSaveModelTransform(void * jarg1) {
  GiSaveModelTransform *arg1 = (GiSaveModelTransform *) 0 ;
  
  arg1 = (GiSaveModelTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgPath__SWIG_0() {
  void * jresult ;
  MgPath *result = 0 ;
  
  result = (MgPath *)new MgPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgPath__SWIG_1(void * jarg1) {
  void * jresult ;
  MgPath *arg1 = 0 ;
  MgPath *result = 0 ;
  
  arg1 = (MgPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath const & type is null", 0);
    return 0;
  } 
  result = (MgPath *)new MgPath((MgPath const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgPath__SWIG_2(int jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  char *arg3 = (char *) 0 ;
  MgPath *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (MgPath *)new MgPath(arg1,(Point2d const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgPath__SWIG_3(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MgPath *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (MgPath *)new MgPath((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgPath(void * jarg1) {
  MgPath *arg1 = (MgPath *) 0 ;
  
  arg1 = (MgPath *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_copy(void * jarg1, void * jarg2) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  MgPath *arg2 = 0 ;
  MgPath *result = 0 ;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath const & type is null", 0);
    return 0;
  } 
  result = (MgPath *) &(arg1)->copy((MgPath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_append(void * jarg1, void * jarg2) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  MgPath *arg2 = 0 ;
  MgPath *result = 0 ;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath const & type is null", 0);
    return 0;
  } 
  result = (MgPath *) &(arg1)->append((MgPath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_addSVGPath(void * jarg1, char * jarg2) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  char *arg2 = (char *) 0 ;
  MgPath *result = 0 ;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (MgPath *) &(arg1)->addSVGPath((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_reverse(void * jarg1) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  MgPath *result = 0 ;
  
  arg1 = (MgPath *)jarg1; 
  result = (MgPath *) &(arg1)->reverse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_genericRoundLines__SWIG_0(void * jarg1, int jarg2, void * jarg3, float jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  float arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->genericRoundLines(arg2,(Point2d const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_genericRoundLines__SWIG_1(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->genericRoundLines(arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPath_getCount(void * jarg1) {
  int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int result;
  
  arg1 = (MgPath *)jarg1; 
  result = (int)((MgPath const *)arg1)->getCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPath_getSubPathCount(void * jarg1) {
  int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int result;
  
  arg1 = (MgPath *)jarg1; 
  result = (int)((MgPath const *)arg1)->getSubPathCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_getStartPoint(void * jarg1) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d result;
  
  arg1 = (MgPath *)jarg1; 
  result = ((MgPath const *)arg1)->getStartPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_getStartTangent(void * jarg1) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Vector2d result;
  
  arg1 = (MgPath *)jarg1; 
  result = ((MgPath const *)arg1)->getStartTangent();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_getEndPoint(void * jarg1) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d result;
  
  arg1 = (MgPath *)jarg1; 
  result = ((MgPath const *)arg1)->getEndPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_getEndTangent(void * jarg1) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Vector2d result;
  
  arg1 = (MgPath *)jarg1; 
  result = ((MgPath const *)arg1)->getEndTangent();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_isLine(void * jarg1) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  result = (bool)((MgPath const *)arg1)->isLine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_isLines(void * jarg1) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  result = (bool)((MgPath const *)arg1)->isLines();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_isCurve(void * jarg1) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  result = (bool)((MgPath const *)arg1)->isCurve();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  result = (bool)((MgPath const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgPath_getLength(void * jarg1) {
  float jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  float result;
  
  arg1 = (MgPath *)jarg1; 
  result = (float)((MgPath const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPath_getNodeType(void * jarg1, int jarg2) {
  int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgPath const *)arg1)->getNodeType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPath_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgPath const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPath_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPath_clear(void * jarg1) {
  MgPath *arg1 = (MgPath *) 0 ;
  
  arg1 = (MgPath *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPath_transform(void * jarg1, void * jarg2) {
  MgPath *arg1 = (MgPath *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPath_startFigure(void * jarg1) {
  MgPath *arg1 = (MgPath *) 0 ;
  
  arg1 = (MgPath *)jarg1; 
  (arg1)->startFigure();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_moveTo__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->moveTo((Point2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_moveTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->moveTo((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_lineTo__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->lineTo((Point2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_lineTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->lineTo((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_horzTo__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  float arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->horzTo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_horzTo__SWIG_1(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->horzTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_vertTo__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  float arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->vertTo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_vertTo__SWIG_1(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->vertTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_linesTo__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->linesTo(arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_linesTo__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  result = (bool)(arg1)->linesTo(arg2,(Point2d const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_beziersTo__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->beziersTo(arg2,(Point2d const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_beziersTo__SWIG_1(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->beziersTo(arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_beziersTo__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  result = (bool)(arg1)->beziersTo(arg2,(Point2d const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_bezierTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->bezierTo((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_bezierTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->bezierTo((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_smoothBezierTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->smoothBezierTo((Point2d const &)*arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_smoothBezierTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->smoothBezierTo((Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_quadsTo__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->quadsTo(arg2,(Point2d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_quadsTo__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  result = (bool)(arg1)->quadsTo(arg2,(Point2d const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_quadTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->quadTo((Point2d const &)*arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_quadTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->quadTo((Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_smoothQuadTo__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->smoothQuadTo((Point2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_smoothQuadTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->smoothQuadTo((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_arcTo__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->arcTo((Point2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_arcTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->arcTo((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_arcTo__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->arcTo((Point2d const &)*arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_arcTo__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->arcTo((Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_closeFigure(void * jarg1) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  result = (bool)(arg1)->closeFigure();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_trimStart(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->trimStart((Point2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPath_crossWithPath(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MgPath *arg1 = (MgPath *) 0 ;
  MgPath *arg2 = 0 ;
  Box2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (MgPath *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath const & type is null", 0);
    return 0;
  } 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (bool)((MgPath const *)arg1)->crossWithPath((MgPath const &)*arg2,(Box2d const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiGraphics__SWIG_0() {
  void * jresult ;
  GiGraphics *result = 0 ;
  
  result = (GiGraphics *)new GiGraphics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiGraphics__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  bool arg2 ;
  GiGraphics *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (GiGraphics *)new GiGraphics(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiGraphics__SWIG_2(void * jarg1) {
  void * jresult ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  GiGraphics *result = 0 ;
  
  arg1 = (GiTransform *)jarg1; 
  result = (GiGraphics *)new GiGraphics(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiGraphics__SWIG_3(void * jarg1) {
  void * jresult ;
  GiGraphics *arg1 = 0 ;
  GiGraphics *result = 0 ;
  
  arg1 = (GiGraphics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics const & type is null", 0);
    return 0;
  } 
  result = (GiGraphics *)new GiGraphics((GiGraphics const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiGraphics(void * jarg1) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  
  arg1 = (GiGraphics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiGraphics_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  GiGraphics *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (GiGraphics *)GiGraphics::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiGraphics_toHandle(void * jarg1) {
  long jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  long result;
  
  arg1 = (GiGraphics *)jarg1; 
  result = (long)((GiGraphics const *)arg1)->toHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiGraphics_kAlignLeft_get() {
  int jresult ;
  int result;
  
  result = (int)GiGraphics::kAlignLeft;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiGraphics_kAlignCenter_get() {
  int jresult ;
  int result;
  
  result = (int)GiGraphics::kAlignCenter;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiGraphics_kAlignRight_get() {
  int jresult ;
  int result;
  
  result = (int)GiGraphics::kAlignRight;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiGraphics_kAlignTop_get() {
  int jresult ;
  int result;
  
  result = (int)GiGraphics::kAlignTop;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiGraphics_kAlignBottom_get() {
  int jresult ;
  int result;
  
  result = (int)GiGraphics::kAlignBottom;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiGraphics_kAlignVCenter_get() {
  int jresult ;
  int result;
  
  result = (int)GiGraphics::kAlignVCenter;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiGraphics_kAlignHVCenter_get() {
  int jresult ;
  int result;
  
  result = (int)GiGraphics::kAlignHVCenter;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiGraphics_copy(void * jarg1, void * jarg2) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiGraphics *arg2 = 0 ;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiGraphics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics const & type is null", 0);
    return ;
  } 
  (arg1)->copy((GiGraphics const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiGraphics_xf(void * jarg1) {
  void * jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiTransform *result = 0 ;
  
  arg1 = (GiGraphics *)jarg1; 
  result = (GiTransform *) &((GiGraphics const *)arg1)->xf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_isDrawing(void * jarg1) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  result = (bool)((GiGraphics const *)arg1)->isDrawing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_isPrint(void * jarg1) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  result = (bool)((GiGraphics const *)arg1)->isPrint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_isStopping(void * jarg1) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  result = (bool)((GiGraphics const *)arg1)->isStopping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiGraphics_stopDrawing__SWIG_0(void * jarg1, unsigned int jarg2) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool arg2 ;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->stopDrawing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiGraphics_stopDrawing__SWIG_1(void * jarg1) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  
  arg1 = (GiGraphics *)jarg1; 
  (arg1)->stopDrawing();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiGraphics_getClipModel(void * jarg1) {
  void * jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Box2d result;
  
  arg1 = (GiGraphics *)jarg1; 
  result = ((GiGraphics const *)arg1)->getClipModel();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiGraphics_getClipWorld(void * jarg1) {
  void * jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Box2d result;
  
  arg1 = (GiGraphics *)jarg1; 
  result = ((GiGraphics const *)arg1)->getClipWorld();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiGraphics_getClipBox(void * jarg1, void * jarg2) {
  void * jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  RECT_2D *arg2 = 0 ;
  RECT_2D *result = 0 ;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (RECT_2D *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RECT_2D & type is null", 0);
    return 0;
  } 
  result = (RECT_2D *) &((GiGraphics const *)arg1)->getClipBox(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_setClipBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  RECT_2D *arg2 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (RECT_2D *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RECT_2D const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setClipBox((RECT_2D const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_setClipWorld(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setClipWorld((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_isGrayMode(void * jarg1) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  result = (bool)((GiGraphics const *)arg1)->isGrayMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiGraphics_setGrayMode(void * jarg1, unsigned int jarg2) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool arg2 ;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setGrayMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiGraphics_getBkColor(void * jarg1) {
  void * jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiColor result;
  
  arg1 = (GiGraphics *)jarg1; 
  result = ((GiGraphics const *)arg1)->getBkColor();
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiGraphics_setBkColor(void * jarg1, void * jarg2) {
  void * jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiColor *arg2 = 0 ;
  GiColor result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  result = (arg1)->setBkColor((GiColor const &)*arg2);
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiGraphics_calcPenColor(void * jarg1, void * jarg2) {
  void * jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiColor *arg2 = 0 ;
  GiColor result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiColor const & type is null", 0);
    return 0;
  } 
  result = ((GiGraphics const *)arg1)->calcPenColor((GiColor const &)*arg2);
  jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiGraphics_calcPenWidth(void * jarg1, float jarg2, unsigned int jarg3) {
  float jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  bool arg3 ;
  float result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (float)((GiGraphics const *)arg1)->calcPenWidth(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiGraphics_setMaxPenWidth__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setMaxPenWidth(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiGraphics_setMaxPenWidth__SWIG_1(void * jarg1, float jarg2) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaxPenWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiGraphics_setPenWidthFactor(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  GiGraphics::setPenWidthFactor(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_setPhaseEnabled(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setPhaseEnabled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawLine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawLine((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawLine__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->drawLine((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawRayline__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawRayline((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawRayline__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->drawRayline((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBeeline__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawBeeline((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBeeline__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->drawBeeline((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawLines__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawLines((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawLines__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  result = (bool)(arg1)->drawLines((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBeziers__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBeziers__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBeziers__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBeziers__SWIG_3(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = (Vector2d *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBeziers__SWIG_4(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool arg6 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = (Vector2d *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBeziers__SWIG_5(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = (Vector2d *)jarg5; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawArc__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->drawArc((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawArc__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->drawArc((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawArc3P__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  bool arg6 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawArc3P((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawArc3P__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->drawArc3P((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawPolygon__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawPolygon((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawPolygon__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  result = (bool)(arg1)->drawPolygon((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawCircle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawCircle((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawCircle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->drawCircle((GiContext const *)arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawEllipse__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawEllipse__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawEllipse__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Box2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawEllipse__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Box2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawPie__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->drawPie((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawPie__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->drawPie((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawRect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->drawRect((GiContext const *)arg2,(Box2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawRect__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->drawRect((GiContext const *)arg2,(Box2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawRoundRect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawRoundRect((GiContext const *)arg2,(Box2d const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawRoundRect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->drawRoundRect((GiContext const *)arg2,(Box2d const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawRoundRect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (Box2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->drawRoundRect((GiContext const *)arg2,(Box2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawHermiteSplines__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = (Vector2d *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->drawHermiteSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawHermiteSplines__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool arg6 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = (Vector2d *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawHermiteSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawHermiteSplines__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = (Vector2d *)jarg5; 
  result = (bool)(arg1)->drawHermiteSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBSplines__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawBSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBSplines__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawBSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawBSplines__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  result = (bool)(arg1)->drawBSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawQuadSplines__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawQuadSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawQuadSplines__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawQuadSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawQuadSplines__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4; 
  result = (bool)(arg1)->drawQuadSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawPath__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  MgPath *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (MgPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawPath((GiContext const *)arg2,(MgPath const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawPath__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  MgPath *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiContext *)jarg2; 
  arg3 = (MgPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->drawPath((GiContext const *)arg2,(MgPath const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawHandle__SWIG_0(void * jarg1, void * jarg2, int jarg3, float jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Point2d *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawHandle((Point2d const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawHandle__SWIG_1(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Point2d *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->drawHandle((Point2d const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_drawHandle__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Point2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->drawHandle((Point2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiGraphics_drawTextAt__SWIG_0(void * jarg1, int jarg2, char * jarg3, void * jarg4, float jarg5, int jarg6, float jarg7) {
  float jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  Point2d *arg4 = 0 ;
  float arg5 ;
  int arg6 ;
  float arg7 ;
  float result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float)jarg7; 
  result = (float)(arg1)->drawTextAt(arg2,(char const *)arg3,(Point2d const &)*arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiGraphics_drawTextAt__SWIG_1(void * jarg1, int jarg2, char * jarg3, void * jarg4, float jarg5, int jarg6) {
  float jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  Point2d *arg4 = 0 ;
  float arg5 ;
  int arg6 ;
  float result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (float)(arg1)->drawTextAt(arg2,(char const *)arg3,(Point2d const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiGraphics_drawTextAt__SWIG_2(void * jarg1, int jarg2, char * jarg3, void * jarg4, float jarg5) {
  float jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  Point2d *arg4 = 0 ;
  float arg5 ;
  float result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = (float)(arg1)->drawTextAt(arg2,(char const *)arg3,(Point2d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_beginPaint__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiCanvas *arg2 = (GiCanvas *) 0 ;
  RECT_2D *arg3 = 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiCanvas *)jarg2; 
  arg3 = (RECT_2D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RECT_2D const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->beginPaint(arg2,(RECT_2D const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiGraphics_beginPaint__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiCanvas *arg2 = (GiCanvas *) 0 ;
  bool result;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (GiCanvas *)jarg2; 
  result = (bool)(arg1)->beginPaint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiGraphics_endPaint(void * jarg1) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  
  arg1 = (GiGraphics *)jarg1; 
  (arg1)->endPaint();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiSaveClipBox(void * jarg1, void * jarg2) {
  void * jresult ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Box2d *arg2 = 0 ;
  GiSaveClipBox *result = 0 ;
  
  arg1 = (GiGraphics *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (GiSaveClipBox *)new GiSaveClipBox(arg1,(Box2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiSaveClipBox(void * jarg1) {
  GiSaveClipBox *arg1 = (GiSaveClipBox *) 0 ;
  
  arg1 = (GiSaveClipBox *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiSaveClipBox_succeed(void * jarg1) {
  unsigned int jresult ;
  GiSaveClipBox *arg1 = (GiSaveClipBox *) 0 ;
  bool result;
  
  arg1 = (GiSaveClipBox *)jarg1; 
  result = (bool)((GiSaveClipBox const *)arg1)->succeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Ints(void * jarg1) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  
  arg1 = (mgvector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ints__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< int > *)new mgvector< int >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ints__SWIG_1() {
  void * jresult ;
  mgvector< int > *result = 0 ;
  
  result = (mgvector< int > *)new mgvector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ints_setSize(void * jarg1, int jarg2) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (mgvector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ints__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  mgvector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (mgvector< int > *)new mgvector< int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ints__SWIG_3(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  mgvector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (mgvector< int > *)new mgvector< int >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ints_count(void * jarg1) {
  int jresult ;
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int result;
  
  arg1 = (mgvector< int > *)jarg1; 
  result = (int)((mgvector< int > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ints_get(void * jarg1, int jarg2) {
  int jresult ;
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (mgvector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((mgvector< int > const *)arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ints_set__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (mgvector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ints_set__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (mgvector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Longs(void * jarg1) {
  mgvector< long > *arg1 = (mgvector< long > *) 0 ;
  
  arg1 = (mgvector< long > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Longs__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< long > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< long > *)new mgvector< long >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Longs__SWIG_1() {
  void * jresult ;
  mgvector< long > *result = 0 ;
  
  result = (mgvector< long > *)new mgvector< long >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Longs_setSize(void * jarg1, int jarg2) {
  mgvector< long > *arg1 = (mgvector< long > *) 0 ;
  int arg2 ;
  
  arg1 = (mgvector< long > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Longs__SWIG_2(long jarg1, long jarg2) {
  void * jresult ;
  long arg1 ;
  long arg2 ;
  mgvector< long > *result = 0 ;
  
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  result = (mgvector< long > *)new mgvector< long >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Longs__SWIG_3(long jarg1, long jarg2, long jarg3, long jarg4) {
  void * jresult ;
  long arg1 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  mgvector< long > *result = 0 ;
  
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (mgvector< long > *)new mgvector< long >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Longs_count(void * jarg1) {
  int jresult ;
  mgvector< long > *arg1 = (mgvector< long > *) 0 ;
  int result;
  
  arg1 = (mgvector< long > *)jarg1; 
  result = (int)((mgvector< long > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Longs_get(void * jarg1, int jarg2) {
  long jresult ;
  mgvector< long > *arg1 = (mgvector< long > *) 0 ;
  int arg2 ;
  long result;
  
  arg1 = (mgvector< long > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (long)((mgvector< long > const *)arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Longs_set__SWIG_0(void * jarg1, int jarg2, long jarg3) {
  mgvector< long > *arg1 = (mgvector< long > *) 0 ;
  int arg2 ;
  long arg3 ;
  
  arg1 = (mgvector< long > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Longs_set__SWIG_1(void * jarg1, int jarg2, long jarg3, long jarg4) {
  mgvector< long > *arg1 = (mgvector< long > *) 0 ;
  int arg2 ;
  long arg3 ;
  long arg4 ;
  
  arg1 = (mgvector< long > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Floats(void * jarg1) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  
  arg1 = (mgvector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Floats__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< float > *)new mgvector< float >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Floats__SWIG_1() {
  void * jresult ;
  mgvector< float > *result = 0 ;
  
  result = (mgvector< float > *)new mgvector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Floats_setSize(void * jarg1, int jarg2) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (mgvector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Floats__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  mgvector< float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (mgvector< float > *)new mgvector< float >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Floats__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  mgvector< float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (mgvector< float > *)new mgvector< float >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Floats_count(void * jarg1) {
  int jresult ;
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int result;
  
  arg1 = (mgvector< float > *)jarg1; 
  result = (int)((mgvector< float > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Floats_get(void * jarg1, int jarg2) {
  float jresult ;
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (mgvector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((mgvector< float > const *)arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Floats_set__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (mgvector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Floats_set__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (mgvector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Chars(void * jarg1) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  
  arg1 = (mgvector< char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Chars__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< char > *)new mgvector< char >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Chars__SWIG_1() {
  void * jresult ;
  mgvector< char > *result = 0 ;
  
  result = (mgvector< char > *)new mgvector< char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Chars_setSize(void * jarg1, int jarg2) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  
  arg1 = (mgvector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Chars__SWIG_2(char jarg1, char jarg2) {
  void * jresult ;
  char arg1 ;
  char arg2 ;
  mgvector< char > *result = 0 ;
  
  arg1 = (char)jarg1; 
  arg2 = (char)jarg2; 
  result = (mgvector< char > *)new mgvector< char >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Chars__SWIG_3(char jarg1, char jarg2, char jarg3, char jarg4) {
  void * jresult ;
  char arg1 ;
  char arg2 ;
  char arg3 ;
  char arg4 ;
  mgvector< char > *result = 0 ;
  
  arg1 = (char)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (mgvector< char > *)new mgvector< char >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Chars_count(void * jarg1) {
  int jresult ;
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int result;
  
  arg1 = (mgvector< char > *)jarg1; 
  result = (int)((mgvector< char > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_Chars_get(void * jarg1, int jarg2) {
  char jresult ;
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (mgvector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char)((mgvector< char > const *)arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Chars_set__SWIG_0(void * jarg1, int jarg2, char jarg3) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  char arg3 ;
  
  arg1 = (mgvector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Chars_set__SWIG_1(void * jarg1, int jarg2, char jarg3, char jarg4) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  char arg3 ;
  char arg4 ;
  
  arg1 = (mgvector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConstShapes(void * jarg1) {
  mgvector< MgShape const * > *arg1 = (mgvector< MgShape const * > *) 0 ;
  
  arg1 = (mgvector< MgShape const * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConstShapes__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< MgShape const * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< MgShape const * > *)new mgvector< MgShape const * >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConstShapes__SWIG_1() {
  void * jresult ;
  mgvector< MgShape const * > *result = 0 ;
  
  result = (mgvector< MgShape const * > *)new mgvector< MgShape const * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConstShapes_setSize(void * jarg1, int jarg2) {
  mgvector< MgShape const * > *arg1 = (mgvector< MgShape const * > *) 0 ;
  int arg2 ;
  
  arg1 = (mgvector< MgShape const * > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConstShapes__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  mgvector< MgShape const * > *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (mgvector< MgShape const * > *)new mgvector< MgShape const * >((MgShape const *)arg1,(MgShape const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConstShapes__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  MgShape *arg4 = (MgShape *) 0 ;
  mgvector< MgShape const * > *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (MgShape *)jarg4; 
  result = (mgvector< MgShape const * > *)new mgvector< MgShape const * >((MgShape const *)arg1,(MgShape const *)arg2,(MgShape const *)arg3,(MgShape const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConstShapes_count(void * jarg1) {
  int jresult ;
  mgvector< MgShape const * > *arg1 = (mgvector< MgShape const * > *) 0 ;
  int result;
  
  arg1 = (mgvector< MgShape const * > *)jarg1; 
  result = (int)((mgvector< MgShape const * > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConstShapes_get(void * jarg1, int jarg2) {
  void * jresult ;
  mgvector< MgShape const * > *arg1 = (mgvector< MgShape const * > *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (mgvector< MgShape const * > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((mgvector< MgShape const * > const *)arg1)->get(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConstShapes_set__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  mgvector< MgShape const * > *arg1 = (mgvector< MgShape const * > *) 0 ;
  int arg2 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (mgvector< MgShape const * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->set(arg2,(MgShape const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConstShapes_set__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  mgvector< MgShape const * > *arg1 = (mgvector< MgShape const * > *) 0 ;
  int arg2 ;
  MgShape *arg3 = (MgShape *) 0 ;
  MgShape *arg4 = (MgShape *) 0 ;
  
  arg1 = (mgvector< MgShape const * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (MgShape *)jarg4; 
  (arg1)->set(arg2,(MgShape const *)arg3,(MgShape const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shapes(void * jarg1) {
  mgvector< MgShape * > *arg1 = (mgvector< MgShape * > *) 0 ;
  
  arg1 = (mgvector< MgShape * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shapes__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  mgvector< MgShape * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (mgvector< MgShape * > *)new mgvector< MgShape * >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shapes__SWIG_1() {
  void * jresult ;
  mgvector< MgShape * > *result = 0 ;
  
  result = (mgvector< MgShape * > *)new mgvector< MgShape * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shapes_setSize(void * jarg1, int jarg2) {
  mgvector< MgShape * > *arg1 = (mgvector< MgShape * > *) 0 ;
  int arg2 ;
  
  arg1 = (mgvector< MgShape * > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shapes__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  mgvector< MgShape * > *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (mgvector< MgShape * > *)new mgvector< MgShape * >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shapes__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  MgShape *arg4 = (MgShape *) 0 ;
  mgvector< MgShape * > *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (MgShape *)jarg4; 
  result = (mgvector< MgShape * > *)new mgvector< MgShape * >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shapes_count(void * jarg1) {
  int jresult ;
  mgvector< MgShape * > *arg1 = (mgvector< MgShape * > *) 0 ;
  int result;
  
  arg1 = (mgvector< MgShape * > *)jarg1; 
  result = (int)((mgvector< MgShape * > const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shapes_get(void * jarg1, int jarg2) {
  void * jresult ;
  mgvector< MgShape * > *arg1 = (mgvector< MgShape * > *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (mgvector< MgShape * > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((mgvector< MgShape * > const *)arg1)->get(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shapes_set__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  mgvector< MgShape * > *arg1 = (mgvector< MgShape * > *) 0 ;
  int arg2 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (mgvector< MgShape * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shapes_set__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  mgvector< MgShape * > *arg1 = (mgvector< MgShape * > *) 0 ;
  int arg2 ;
  MgShape *arg3 = (MgShape *) 0 ;
  MgShape *arg4 = (MgShape *) 0 ;
  
  arg1 = (mgvector< MgShape * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (MgShape *)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgStorage(void * jarg1) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  
  arg1 = (MgStorage *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgStorage_readNode(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->readNode((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgStorage_writeNode(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->writeNode((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgStorage_readBool(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->readBool((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgStorage_readFloat(void * jarg1, char * jarg2, float jarg3) {
  float jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->readFloat((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MgStorage_readDouble(void * jarg1, char * jarg2, double jarg3) {
  double jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->readDouble((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgStorage_writeBool(void * jarg1, char * jarg2, unsigned int jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->writeBool((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgStorage_writeFloat(void * jarg1, char * jarg2, float jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->writeFloat((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgStorage_writeDouble(void * jarg1, char * jarg2, double jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->writeDouble((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgStorage_writeString(void * jarg1, char * jarg2, char * jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeString((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgStorage_readFloatArray(void * jarg1, char * jarg2) {
  int jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->readFloatArray((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgStorage_readIntArray(void * jarg1, char * jarg2) {
  int jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->readIntArray((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgStorage_readString(void * jarg1, char * jarg2) {
  int jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->readString((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgStorage_readInt(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->readInt((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgStorage_writeInt(void * jarg1, char * jarg2, int jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->writeInt((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgStorage_writeUInt(void * jarg1, char * jarg2, int jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->writeUInt((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgStorage_setError(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setError((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgJsonFile(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  MgJsonFile *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (MgJsonFile *)new MgJsonFile((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgJsonFile(void * jarg1) {
  MgJsonFile *arg1 = (MgJsonFile *) 0 ;
  
  arg1 = (MgJsonFile *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgJsonFile_opened(void * jarg1) {
  unsigned int jresult ;
  MgJsonFile *arg1 = (MgJsonFile *) 0 ;
  bool result;
  
  arg1 = (MgJsonFile *)jarg1; 
  result = (bool)((MgJsonFile const *)arg1)->opened();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgJsonFile_close(void * jarg1) {
  MgJsonFile *arg1 = (MgJsonFile *) 0 ;
  
  arg1 = (MgJsonFile *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgJsonStorage() {
  void * jresult ;
  MgJsonStorage *result = 0 ;
  
  result = (MgJsonStorage *)new MgJsonStorage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgJsonStorage(void * jarg1) {
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgJsonStorage_storageForRead__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  MgStorage *result = 0 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (MgStorage *)(arg1)->storageForRead((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgJsonStorage_storageForWrite(void * jarg1) {
  void * jresult ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  MgStorage *result = 0 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  result = (MgStorage *)(arg1)->storageForWrite();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgJsonStorage_storageForRead__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  MgJsonFile *arg2 = 0 ;
  MgStorage *result = 0 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  arg2 = (MgJsonFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgJsonFile const & type is null", 0);
    return 0;
  } 
  result = (MgStorage *)(arg1)->storageForRead((MgJsonFile const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgJsonStorage_save__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  MgJsonFile *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgJsonStorage *)jarg1; 
  arg2 = (MgJsonFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgJsonFile const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->save((MgJsonFile const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgJsonStorage_save__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  MgJsonFile *arg2 = 0 ;
  bool result;
  
  arg1 = (MgJsonStorage *)jarg1; 
  arg2 = (MgJsonFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgJsonFile const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->save((MgJsonFile const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MgJsonStorage_stringify__SWIG_0(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  bool arg2 ;
  char *result = 0 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (char *)(arg1)->stringify(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MgJsonStorage_stringify__SWIG_1(void * jarg1) {
  char * jresult ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  char *result = 0 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  result = (char *)(arg1)->stringify();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgJsonStorage_clear(void * jarg1) {
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MgJsonStorage_getParseError(void * jarg1) {
  char * jresult ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  char *result = 0 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  result = (char *)(arg1)->getParseError();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgJsonStorage_setArrayMode(void * jarg1, unsigned int jarg2) {
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  bool arg2 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setArrayMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgJsonStorage_saveNumberAsString(void * jarg1, unsigned int jarg2) {
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  bool arg2 ;
  
  arg1 = (MgJsonStorage *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->saveNumberAsString(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgJsonStorage_toUTF8(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)MgJsonStorage::toUTF8((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgJsonStorage_toUTF16(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)MgJsonStorage::toUTF16((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgObject_clone(void * jarg1) {
  void * jresult ;
  MgObject *arg1 = (MgObject *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgObject *)jarg1; 
  result = (MgObject *)((MgObject const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgObject_copy(void * jarg1, void * jarg2) {
  MgObject *arg1 = (MgObject *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgObject *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgObject_release(void * jarg1) {
  MgObject *arg1 = (MgObject *) 0 ;
  
  arg1 = (MgObject *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgObject_addRef(void * jarg1) {
  MgObject *arg1 = (MgObject *) 0 ;
  
  arg1 = (MgObject *)jarg1; 
  (arg1)->addRef();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgObject_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgObject *arg1 = (MgObject *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgObject *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgObject const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgObject_getType(void * jarg1) {
  int jresult ;
  MgObject *arg1 = (MgObject *) 0 ;
  int result;
  
  arg1 = (MgObject *)jarg1; 
  result = (int)((MgObject const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgObject_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgObject *arg1 = (MgObject *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgObject const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgObject() {
  void * jresult ;
  MgObject *result = 0 ;
  
  result = (MgObject *)new SwigDirector_MgObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgObject_director_connect(void *objarg, SwigDirector_MgObject::SWIG_Callback0_t callback0, SwigDirector_MgObject::SWIG_Callback1_t callback1, SwigDirector_MgObject::SWIG_Callback2_t callback2, SwigDirector_MgObject::SWIG_Callback3_t callback3, SwigDirector_MgObject::SWIG_Callback4_t callback4, SwigDirector_MgObject::SWIG_Callback5_t callback5, SwigDirector_MgObject::SWIG_Callback6_t callback6) {
  MgObject *obj = (MgObject *)objarg;
  SwigDirector_MgObject *director = dynamic_cast<SwigDirector_MgObject *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_nearpt_set(void * jarg1, void * jarg2) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgHitResult *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->nearpt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgHitResult_nearpt_get(void * jarg1) {
  void * jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (Point2d *)& ((arg1)->nearpt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_segment_set(void * jarg1, int jarg2) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  int arg2 ;
  
  arg1 = (MgHitResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->segment = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgHitResult_segment_get(void * jarg1) {
  int jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  int result;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (int) ((arg1)->segment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_inside_set(void * jarg1, unsigned int jarg2) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  bool arg2 ;
  
  arg1 = (MgHitResult *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->inside = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgHitResult_inside_get(void * jarg1) {
  unsigned int jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  bool result;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (bool) ((arg1)->inside);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_contained_set(void * jarg1, unsigned int jarg2) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  bool arg2 ;
  
  arg1 = (MgHitResult *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->contained = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgHitResult_contained_get(void * jarg1) {
  unsigned int jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  bool result;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (bool) ((arg1)->contained);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_dist_set(void * jarg1, float jarg2) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  float arg2 ;
  
  arg1 = (MgHitResult *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgHitResult_dist_get(void * jarg1) {
  float jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  float result;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (float) ((arg1)->dist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_mask_set(void * jarg1, int jarg2) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  int arg2 ;
  
  arg1 = (MgHitResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgHitResult_mask_get(void * jarg1) {
  int jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  int result;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (int) ((arg1)->mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_ignoreHandle_set(void * jarg1, int jarg2) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  int arg2 ;
  
  arg1 = (MgHitResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ignoreHandle = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgHitResult_ignoreHandle_get(void * jarg1) {
  int jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  int result;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (int) ((arg1)->ignoreHandle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgHitResult() {
  void * jresult ;
  MgHitResult *result = 0 ;
  
  result = (MgHitResult *)new MgHitResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgHitResult_snapVertexEnabled(void * jarg1) {
  unsigned int jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  bool result;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (bool)((MgHitResult const *)arg1)->snapVertexEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgHitResult_snapEdgeEnabled(void * jarg1) {
  unsigned int jresult ;
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  bool result;
  
  arg1 = (MgHitResult *)jarg1; 
  result = (bool)((MgHitResult const *)arg1)->snapEdgeEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_disnableSnapVertex(void * jarg1) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  
  arg1 = (MgHitResult *)jarg1; 
  (arg1)->disnableSnapVertex();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgHitResult_disnableSnapEdge(void * jarg1) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  
  arg1 = (MgHitResult *)jarg1; 
  (arg1)->disnableSnapEdge();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgHitResult(void * jarg1) {
  MgHitResult *arg1 = (MgHitResult *) 0 ;
  
  arg1 = (MgHitResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgBaseShape() {
  void * jresult ;
  MgBaseShape *result = 0 ;
  
  result = (MgBaseShape *)new SwigDirector_MgBaseShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgBaseShape(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseShape_Type() {
  int jresult ;
  int result;
  
  result = (int)MgBaseShape::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseShape_minTol() {
  void * jresult ;
  Tol *result = 0 ;
  
  result = (Tol *) &MgBaseShape::minTol();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgBaseShape_toHandle(void * jarg1) {
  long jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  long result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (long)((MgBaseShape const *)arg1)->toHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseShape_cloneShape(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgBaseShape *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgBaseShape *)((MgBaseShape const *)arg1)->cloneShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseShape_getExtent(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Box2d result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = ((MgBaseShape const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseShape_getExtentSwigExplicitMgBaseShape(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Box2d result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = ((MgBaseShape const *)arg1)->MgBaseShape::getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgBaseShape_getChangeCount(void * jarg1) {
  long jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  long result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (long)((MgBaseShape const *)arg1)->getChangeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgBaseShape_getChangeCountSwigExplicitMgBaseShape(void * jarg1) {
  long jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  long result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (long)((MgBaseShape const *)arg1)->MgBaseShape::getChangeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_resetChangeCount(void * jarg1, long jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  long arg2 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->resetChangeCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_resetChangeCountSwigExplicitMgBaseShape(void * jarg1, long jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  long arg2 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->MgBaseShape::resetChangeCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_afterChanged(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->afterChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_afterChangedSwigExplicitMgBaseShape(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->MgBaseShape::afterChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_update(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_updateSwigExplicitMgBaseShape(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->MgBaseShape::update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_transform(void * jarg1, void * jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_transformSwigExplicitMgBaseShape(void * jarg1, void * jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->MgBaseShape::transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_clear(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_clearSwigExplicitMgBaseShape(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->MgBaseShape::clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_clearCachedData(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_clearCachedDataSwigExplicitMgBaseShape(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->MgBaseShape::clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseShape_getPointCount(void * jarg1) {
  int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (int)((MgBaseShape const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseShape_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgBaseShape const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (bool)((MgBaseShape const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isClosedSwigExplicitMgBaseShape(void * jarg1) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isCurve(void * jarg1) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (bool)((MgBaseShape const *)arg1)->isCurve();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isCurveSwigExplicitMgBaseShape(void * jarg1) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::isCurve();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgBaseShape_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgBaseShape const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgBaseShape_hitTest2(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  Point2d *arg4 = 0 ;
  float result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (float)((MgBaseShape const *)arg1)->hitTest2((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgBaseShape const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_hitTestBoxSwigExplicitMgBaseShape(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgBaseShape const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_drawSwigExplicitMgBaseShape(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_draw2(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgObject *arg2 = (MgObject *) 0 ;
  int arg3 ;
  GiGraphics *arg4 = 0 ;
  GiContext *arg5 = 0 ;
  int arg6 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgObject *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (GiGraphics *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg5 = (GiContext *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = (bool)((MgBaseShape const *)arg1)->draw2((MgObject const *)arg2,arg3,*arg4,(GiContext const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_draw2SwigExplicitMgBaseShape(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgObject *arg2 = (MgObject *) 0 ;
  int arg3 ;
  GiGraphics *arg4 = 0 ;
  GiContext *arg5 = 0 ;
  int arg6 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgObject *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (GiGraphics *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg5 = (GiContext *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::draw2((MgObject const *)arg2,arg3,*arg4,(GiContext const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_output(void * jarg1, void * jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgBaseShape const *)arg1)->output(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseShape_getPath(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgPath result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = ((MgBaseShape const *)arg1)->getPath();
  jresult = new MgPath((const MgPath &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_saveSwigExplicitMgBaseShape(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_loadSwigExplicitMgBaseShape(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->MgBaseShape::load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseShape_getHandleCount(void * jarg1) {
  int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (int)((MgBaseShape const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseShape_getHandleCountSwigExplicitMgBaseShape(void * jarg1) {
  int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (int)((MgBaseShape const *)arg1)->MgBaseShape::getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseShape_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgBaseShape const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseShape_getHandlePointSwigExplicitMgBaseShape(void * jarg1, int jarg2) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgBaseShape const *)arg1)->MgBaseShape::getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_setHandlePointSwigExplicitMgBaseShape(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->MgBaseShape::setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isHandleFixedSwigExplicitMgBaseShape(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseShape_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgBaseShape const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseShape_getHandleTypeSwigExplicitMgBaseShape(void * jarg1, int jarg2) {
  int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgBaseShape const *)arg1)->MgBaseShape::getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_offsetSwigExplicitMgBaseShape(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->MgBaseShape::offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_getFlag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgShapeBit arg2 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgShapeBit)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->getFlag(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_setFlag(void * jarg1, int jarg2, unsigned int jarg3) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgShapeBit arg2 ;
  bool arg3 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgShapeBit)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setFlag(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_setFlagSwigExplicitMgBaseShape(void * jarg1, int jarg2, unsigned int jarg3) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgShapeBit arg2 ;
  bool arg3 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgShapeBit)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->MgBaseShape::setFlag(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_copy(void * jarg1, void * jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_copySwigExplicitMgBaseShape(void * jarg1, void * jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->MgBaseShape::copy((MgObject const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgBaseShape const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_equalsSwigExplicitMgBaseShape(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isKindOfSwigExplicitMgBaseShape(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->MgBaseShape::isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_addRef(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->addRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_addRefSwigExplicitMgBaseShape(void * jarg1) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  (arg1)->MgBaseShape::addRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_setExtent(void * jarg1, void * jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Box2d *arg2 = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return ;
  } 
  (arg1)->setExtent((Box2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_setOwner(void * jarg1, void * jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgObject *arg2 = (MgObject *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgObject *)jarg2; 
  (arg1)->setOwner(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_setOwnerSwigExplicitMgBaseShape(void * jarg1, void * jarg2) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgObject *arg2 = (MgObject *) 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  arg2 = (MgObject *)jarg2; 
  (arg1)->MgBaseShape::setOwner(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseShape_getSubType(void * jarg1) {
  int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (int)((MgBaseShape const *)arg1)->getSubType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseShape_getSubTypeSwigExplicitMgBaseShape(void * jarg1) {
  int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (int)((MgBaseShape const *)arg1)->MgBaseShape::getSubType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isVisible(void * jarg1) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (bool)((MgBaseShape const *)arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseShape_isLocked(void * jarg1) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (bool)((MgBaseShape const *)arg1)->isLocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgBaseShape_linesHit(int jarg1, void * jarg2, unsigned int jarg3, void * jarg4, float jarg5, void * jarg6) {
  float jresult ;
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  bool arg3 ;
  Point2d *arg4 = 0 ;
  float arg5 ;
  MgHitResult *arg6 = 0 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (Point2d *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  arg6 = (MgHitResult *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)MgBaseShape::linesHit(arg1,(Point2d const *)arg2,arg3,(Point2d const &)*arg4,arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseShape_director_connect(void *objarg, SwigDirector_MgBaseShape::SWIG_Callback0_t callback0, SwigDirector_MgBaseShape::SWIG_Callback1_t callback1, SwigDirector_MgBaseShape::SWIG_Callback2_t callback2, SwigDirector_MgBaseShape::SWIG_Callback3_t callback3, SwigDirector_MgBaseShape::SWIG_Callback4_t callback4, SwigDirector_MgBaseShape::SWIG_Callback5_t callback5, SwigDirector_MgBaseShape::SWIG_Callback6_t callback6, SwigDirector_MgBaseShape::SWIG_Callback7_t callback7, SwigDirector_MgBaseShape::SWIG_Callback8_t callback8, SwigDirector_MgBaseShape::SWIG_Callback9_t callback9, SwigDirector_MgBaseShape::SWIG_Callback10_t callback10, SwigDirector_MgBaseShape::SWIG_Callback11_t callback11, SwigDirector_MgBaseShape::SWIG_Callback12_t callback12, SwigDirector_MgBaseShape::SWIG_Callback13_t callback13, SwigDirector_MgBaseShape::SWIG_Callback14_t callback14, SwigDirector_MgBaseShape::SWIG_Callback15_t callback15, SwigDirector_MgBaseShape::SWIG_Callback16_t callback16, SwigDirector_MgBaseShape::SWIG_Callback17_t callback17, SwigDirector_MgBaseShape::SWIG_Callback18_t callback18, SwigDirector_MgBaseShape::SWIG_Callback19_t callback19, SwigDirector_MgBaseShape::SWIG_Callback20_t callback20, SwigDirector_MgBaseShape::SWIG_Callback21_t callback21, SwigDirector_MgBaseShape::SWIG_Callback22_t callback22, SwigDirector_MgBaseShape::SWIG_Callback23_t callback23, SwigDirector_MgBaseShape::SWIG_Callback24_t callback24, SwigDirector_MgBaseShape::SWIG_Callback25_t callback25, SwigDirector_MgBaseShape::SWIG_Callback26_t callback26, SwigDirector_MgBaseShape::SWIG_Callback27_t callback27, SwigDirector_MgBaseShape::SWIG_Callback28_t callback28, SwigDirector_MgBaseShape::SWIG_Callback29_t callback29, SwigDirector_MgBaseShape::SWIG_Callback30_t callback30, SwigDirector_MgBaseShape::SWIG_Callback31_t callback31, SwigDirector_MgBaseShape::SWIG_Callback32_t callback32, SwigDirector_MgBaseShape::SWIG_Callback33_t callback33, SwigDirector_MgBaseShape::SWIG_Callback34_t callback34, SwigDirector_MgBaseShape::SWIG_Callback35_t callback35) {
  MgBaseShape *obj = (MgBaseShape *)objarg;
  SwigDirector_MgBaseShape *director = dynamic_cast<SwigDirector_MgBaseShape *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseRect_Type() {
  int jresult ;
  int result;
  
  result = (int)MgBaseRect::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseRect_getCenter(void * jarg1) {
  void * jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d result;
  
  arg1 = (MgBaseRect *)jarg1; 
  result = ((MgBaseRect const *)arg1)->getCenter();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseRect_getRect(void * jarg1) {
  void * jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Box2d result;
  
  arg1 = (MgBaseRect *)jarg1; 
  result = ((MgBaseRect const *)arg1)->getRect();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgBaseRect_getWidth(void * jarg1) {
  float jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float result;
  
  arg1 = (MgBaseRect *)jarg1; 
  result = (float)((MgBaseRect const *)arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgBaseRect_getHeight(void * jarg1) {
  float jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float result;
  
  arg1 = (MgBaseRect *)jarg1; 
  result = (float)((MgBaseRect const *)arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgBaseRect_getDiagonalLength(void * jarg1) {
  float jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float result;
  
  arg1 = (MgBaseRect *)jarg1; 
  result = (float)((MgBaseRect const *)arg1)->getDiagonalLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgBaseRect_getAngle(void * jarg1) {
  float jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float result;
  
  arg1 = (MgBaseRect *)jarg1; 
  result = (float)((MgBaseRect const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseRect_isEmpty(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MgBaseRect *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)((MgBaseRect const *)arg1)->isEmpty(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseRect_isOrtho(void * jarg1) {
  unsigned int jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  bool result;
  
  arg1 = (MgBaseRect *)jarg1; 
  result = (bool)((MgBaseRect const *)arg1)->isOrtho();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseRect_setRect2P(void * jarg1, void * jarg2, void * jarg3) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgBaseRect *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setRect2P((Point2d const &)*arg2,(Point2d const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseRect_setRectWithAngle(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  Point2d *arg5 = 0 ;
  
  arg1 = (MgBaseRect *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setRectWithAngle((Point2d const &)*arg2,(Point2d const &)*arg3,arg4,(Point2d const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseRect_setRect4P(void * jarg1, void * jarg2) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 ;
  
  arg1 = (MgBaseRect *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  (arg1)->setRect4P((Point2d const (*))arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseRect_transformWith2P(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 = 0 ;
  int arg3 ;
  Point2d *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgBaseRect *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->transformWith2P((Point2d const &)*arg2,arg3,(Point2d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseRect_setCenter(void * jarg1, void * jarg2) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 = 0 ;
  
  arg1 = (MgBaseRect *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setCenter((Point2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseRect_setSquare(void * jarg1, unsigned int jarg2) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  bool arg2 ;
  
  arg1 = (MgBaseRect *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSquare(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgBaseRect() {
  void * jresult ;
  MgBaseRect *result = 0 ;
  
  result = (MgBaseRect *)new SwigDirector_MgBaseRect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgBaseRect(void * jarg1) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  
  arg1 = (MgBaseRect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseRect_director_connect(void *objarg, SwigDirector_MgBaseRect::SWIG_Callback0_t callback0, SwigDirector_MgBaseRect::SWIG_Callback1_t callback1, SwigDirector_MgBaseRect::SWIG_Callback2_t callback2, SwigDirector_MgBaseRect::SWIG_Callback3_t callback3, SwigDirector_MgBaseRect::SWIG_Callback4_t callback4, SwigDirector_MgBaseRect::SWIG_Callback5_t callback5, SwigDirector_MgBaseRect::SWIG_Callback6_t callback6, SwigDirector_MgBaseRect::SWIG_Callback7_t callback7, SwigDirector_MgBaseRect::SWIG_Callback8_t callback8, SwigDirector_MgBaseRect::SWIG_Callback9_t callback9, SwigDirector_MgBaseRect::SWIG_Callback10_t callback10, SwigDirector_MgBaseRect::SWIG_Callback11_t callback11, SwigDirector_MgBaseRect::SWIG_Callback12_t callback12, SwigDirector_MgBaseRect::SWIG_Callback13_t callback13, SwigDirector_MgBaseRect::SWIG_Callback14_t callback14, SwigDirector_MgBaseRect::SWIG_Callback15_t callback15, SwigDirector_MgBaseRect::SWIG_Callback16_t callback16, SwigDirector_MgBaseRect::SWIG_Callback17_t callback17, SwigDirector_MgBaseRect::SWIG_Callback18_t callback18, SwigDirector_MgBaseRect::SWIG_Callback19_t callback19, SwigDirector_MgBaseRect::SWIG_Callback20_t callback20, SwigDirector_MgBaseRect::SWIG_Callback21_t callback21, SwigDirector_MgBaseRect::SWIG_Callback22_t callback22, SwigDirector_MgBaseRect::SWIG_Callback23_t callback23, SwigDirector_MgBaseRect::SWIG_Callback24_t callback24, SwigDirector_MgBaseRect::SWIG_Callback25_t callback25, SwigDirector_MgBaseRect::SWIG_Callback26_t callback26, SwigDirector_MgBaseRect::SWIG_Callback27_t callback27, SwigDirector_MgBaseRect::SWIG_Callback28_t callback28, SwigDirector_MgBaseRect::SWIG_Callback29_t callback29, SwigDirector_MgBaseRect::SWIG_Callback30_t callback30, SwigDirector_MgBaseRect::SWIG_Callback31_t callback31, SwigDirector_MgBaseRect::SWIG_Callback32_t callback32, SwigDirector_MgBaseRect::SWIG_Callback33_t callback33, SwigDirector_MgBaseRect::SWIG_Callback34_t callback34, SwigDirector_MgBaseRect::SWIG_Callback35_t callback35) {
  MgBaseRect *obj = (MgBaseRect *)objarg;
  SwigDirector_MgBaseRect *director = dynamic_cast<SwigDirector_MgBaseRect *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgRect() {
  void * jresult ;
  MgRect *result = 0 ;
  
  result = (MgRect *)new MgRect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgRect(void * jarg1) {
  MgRect *arg1 = (MgRect *) 0 ;
  
  arg1 = (MgRect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRect_create() {
  void * jresult ;
  MgRect *result = 0 ;
  
  result = (MgRect *)MgRect::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRect_Type() {
  int jresult ;
  int result;
  
  result = (int)MgRect::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRect_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgRect *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgRect *)MgRect::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRect_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgRect *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgRect *)MgRect::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRect_clone(void * jarg1) {
  void * jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgRect *)jarg1; 
  result = (MgObject *)((MgRect const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRect_copy(void * jarg1, void * jarg2) {
  MgRect *arg1 = (MgRect *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRect_release(void * jarg1) {
  MgRect *arg1 = (MgRect *) 0 ;
  
  arg1 = (MgRect *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgRect const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRect_getType(void * jarg1) {
  int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int result;
  
  arg1 = (MgRect *)jarg1; 
  result = (int)((MgRect const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgRect const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRect_getExtent(void * jarg1) {
  void * jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  Box2d result;
  
  arg1 = (MgRect *)jarg1; 
  result = ((MgRect const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRect_update(void * jarg1) {
  MgRect *arg1 = (MgRect *) 0 ;
  
  arg1 = (MgRect *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRect_transform(void * jarg1, void * jarg2) {
  MgRect *arg1 = (MgRect *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRect_clear(void * jarg1) {
  MgRect *arg1 = (MgRect *) 0 ;
  
  arg1 = (MgRect *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRect_clearCachedData(void * jarg1) {
  MgRect *arg1 = (MgRect *) 0 ;
  
  arg1 = (MgRect *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRect_getPointCount(void * jarg1) {
  int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int result;
  
  arg1 = (MgRect *)jarg1; 
  result = (int)((MgRect const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRect_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgRect const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRect_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgRect *arg1 = (MgRect *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  result = (bool)((MgRect const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgRect const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgRect const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRect_output(void * jarg1, void * jarg2) {
  MgRect *arg1 = (MgRect *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgRect const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgRect const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRect_getHandleCount(void * jarg1) {
  int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int result;
  
  arg1 = (MgRect *)jarg1; 
  result = (int)((MgRect const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRect_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgRect const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgRect const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRect_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgRect const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRect_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgRect_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgRect *arg1 = (MgRect *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgRect *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgRect const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseLines_Type() {
  int jresult ;
  int result;
  
  result = (int)MgBaseLines::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseLines_setClosed(void * jarg1, unsigned int jarg2) {
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  bool arg2 ;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setClosed(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgBaseLines_endPoint(void * jarg1) {
  void * jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  Point2d result;
  
  arg1 = (MgBaseLines *)jarg1; 
  result = ((MgBaseLines const *)arg1)->endPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_resize(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_resizeSwigExplicitMgBaseLines(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->MgBaseLines::resize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_addPoint(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addPoint((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_addPointSwigExplicitMgBaseLines(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->MgBaseLines::addPoint((Point2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_insertPoint(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->insertPoint(arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_insertPointSwigExplicitMgBaseLines(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->MgBaseLines::insertPoint(arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_removePoint(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->removePoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_removePointSwigExplicitMgBaseLines(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->MgBaseLines::removePoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgBaseLines_maxEdgeIndex(void * jarg1) {
  int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int result;
  
  arg1 = (MgBaseLines *)jarg1; 
  result = (int)((MgBaseLines const *)arg1)->maxEdgeIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgBaseLines_isIncrementFrom(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  MgBaseLines *arg2 = 0 ;
  bool result;
  
  arg1 = (MgBaseLines *)jarg1; 
  arg2 = (MgBaseLines *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgBaseLines const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgBaseLines const *)arg1)->isIncrementFrom((MgBaseLines const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgBaseLines() {
  void * jresult ;
  MgBaseLines *result = 0 ;
  
  result = (MgBaseLines *)new SwigDirector_MgBaseLines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgBaseLines_director_connect(void *objarg, SwigDirector_MgBaseLines::SWIG_Callback0_t callback0, SwigDirector_MgBaseLines::SWIG_Callback1_t callback1, SwigDirector_MgBaseLines::SWIG_Callback2_t callback2, SwigDirector_MgBaseLines::SWIG_Callback3_t callback3, SwigDirector_MgBaseLines::SWIG_Callback4_t callback4, SwigDirector_MgBaseLines::SWIG_Callback5_t callback5, SwigDirector_MgBaseLines::SWIG_Callback6_t callback6, SwigDirector_MgBaseLines::SWIG_Callback7_t callback7, SwigDirector_MgBaseLines::SWIG_Callback8_t callback8, SwigDirector_MgBaseLines::SWIG_Callback9_t callback9, SwigDirector_MgBaseLines::SWIG_Callback10_t callback10, SwigDirector_MgBaseLines::SWIG_Callback11_t callback11, SwigDirector_MgBaseLines::SWIG_Callback12_t callback12, SwigDirector_MgBaseLines::SWIG_Callback13_t callback13, SwigDirector_MgBaseLines::SWIG_Callback14_t callback14, SwigDirector_MgBaseLines::SWIG_Callback15_t callback15, SwigDirector_MgBaseLines::SWIG_Callback16_t callback16, SwigDirector_MgBaseLines::SWIG_Callback17_t callback17, SwigDirector_MgBaseLines::SWIG_Callback18_t callback18, SwigDirector_MgBaseLines::SWIG_Callback19_t callback19, SwigDirector_MgBaseLines::SWIG_Callback20_t callback20, SwigDirector_MgBaseLines::SWIG_Callback21_t callback21, SwigDirector_MgBaseLines::SWIG_Callback22_t callback22, SwigDirector_MgBaseLines::SWIG_Callback23_t callback23, SwigDirector_MgBaseLines::SWIG_Callback24_t callback24, SwigDirector_MgBaseLines::SWIG_Callback25_t callback25, SwigDirector_MgBaseLines::SWIG_Callback26_t callback26, SwigDirector_MgBaseLines::SWIG_Callback27_t callback27, SwigDirector_MgBaseLines::SWIG_Callback28_t callback28, SwigDirector_MgBaseLines::SWIG_Callback29_t callback29, SwigDirector_MgBaseLines::SWIG_Callback30_t callback30, SwigDirector_MgBaseLines::SWIG_Callback31_t callback31, SwigDirector_MgBaseLines::SWIG_Callback32_t callback32, SwigDirector_MgBaseLines::SWIG_Callback33_t callback33, SwigDirector_MgBaseLines::SWIG_Callback34_t callback34, SwigDirector_MgBaseLines::SWIG_Callback35_t callback35, SwigDirector_MgBaseLines::SWIG_Callback36_t callback36, SwigDirector_MgBaseLines::SWIG_Callback37_t callback37, SwigDirector_MgBaseLines::SWIG_Callback38_t callback38, SwigDirector_MgBaseLines::SWIG_Callback39_t callback39) {
  MgBaseLines *obj = (MgBaseLines *)objarg;
  SwigDirector_MgBaseLines *director = dynamic_cast<SwigDirector_MgBaseLines *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36, callback37, callback38, callback39);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgLines() {
  void * jresult ;
  MgLines *result = 0 ;
  
  result = (MgLines *)new MgLines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgLines(void * jarg1) {
  MgLines *arg1 = (MgLines *) 0 ;
  
  arg1 = (MgLines *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLines_create() {
  void * jresult ;
  MgLines *result = 0 ;
  
  result = (MgLines *)MgLines::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLines_Type() {
  int jresult ;
  int result;
  
  result = (int)MgLines::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLines_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgLines *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgLines *)MgLines::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLines_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgLines *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgLines *)MgLines::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLines_clone(void * jarg1) {
  void * jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgLines *)jarg1; 
  result = (MgObject *)((MgLines const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLines_copy(void * jarg1, void * jarg2) {
  MgLines *arg1 = (MgLines *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLines_release(void * jarg1) {
  MgLines *arg1 = (MgLines *) 0 ;
  
  arg1 = (MgLines *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgLines const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLines_getType(void * jarg1) {
  int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int result;
  
  arg1 = (MgLines *)jarg1; 
  result = (int)((MgLines const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgLines const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLines_getExtent(void * jarg1) {
  void * jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  Box2d result;
  
  arg1 = (MgLines *)jarg1; 
  result = ((MgLines const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLines_update(void * jarg1) {
  MgLines *arg1 = (MgLines *) 0 ;
  
  arg1 = (MgLines *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLines_transform(void * jarg1, void * jarg2) {
  MgLines *arg1 = (MgLines *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLines_clear(void * jarg1) {
  MgLines *arg1 = (MgLines *) 0 ;
  
  arg1 = (MgLines *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLines_clearCachedData(void * jarg1) {
  MgLines *arg1 = (MgLines *) 0 ;
  
  arg1 = (MgLines *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLines_getPointCount(void * jarg1) {
  int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int result;
  
  arg1 = (MgLines *)jarg1; 
  result = (int)((MgLines const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLines_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgLines const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLines_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgLines *arg1 = (MgLines *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  result = (bool)((MgLines const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgLines const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgLines const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLines_output(void * jarg1, void * jarg2) {
  MgLines *arg1 = (MgLines *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgLines const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgLines const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLines_getHandleCount(void * jarg1) {
  int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int result;
  
  arg1 = (MgLines *)jarg1; 
  result = (int)((MgLines const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLines_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgLines const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgLines const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLines_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgLines const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLines_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgLines_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgLines *arg1 = (MgLines *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgLines *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgLines const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCoreShapeFactory() {
  void * jresult ;
  MgCoreShapeFactory *result = 0 ;
  
  result = (MgCoreShapeFactory *)new MgCoreShapeFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCoreShapeFactory(void * jarg1) {
  MgCoreShapeFactory *arg1 = (MgCoreShapeFactory *) 0 ;
  
  arg1 = (MgCoreShapeFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCoreShapeFactory_createShape(void * jarg1, int jarg2) {
  void * jresult ;
  MgCoreShapeFactory *arg1 = (MgCoreShapeFactory *) 0 ;
  int arg2 ;
  MgBaseShape *result = 0 ;
  
  arg1 = (MgCoreShapeFactory *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgBaseShape *)(arg1)->createShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgArc() {
  void * jresult ;
  MgArc *result = 0 ;
  
  result = (MgArc *)new MgArc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgArc(void * jarg1) {
  MgArc *arg1 = (MgArc *) 0 ;
  
  arg1 = (MgArc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_create() {
  void * jresult ;
  MgArc *result = 0 ;
  
  result = (MgArc *)MgArc::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgArc_Type() {
  int jresult ;
  int result;
  
  result = (int)MgArc::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgArc *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgArc *)MgArc::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgArc *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgArc *)MgArc::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_clone(void * jarg1) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgArc *)jarg1; 
  result = (MgObject *)((MgArc const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgArc_copy(void * jarg1, void * jarg2) {
  MgArc *arg1 = (MgArc *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgArc_release(void * jarg1) {
  MgArc *arg1 = (MgArc *) 0 ;
  
  arg1 = (MgArc *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgArc const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgArc_getType(void * jarg1) {
  int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int result;
  
  arg1 = (MgArc *)jarg1; 
  result = (int)((MgArc const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgArc const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getExtent(void * jarg1) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Box2d result;
  
  arg1 = (MgArc *)jarg1; 
  result = ((MgArc const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgArc_update(void * jarg1) {
  MgArc *arg1 = (MgArc *) 0 ;
  
  arg1 = (MgArc *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgArc_transform(void * jarg1, void * jarg2) {
  MgArc *arg1 = (MgArc *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgArc_clear(void * jarg1) {
  MgArc *arg1 = (MgArc *) 0 ;
  
  arg1 = (MgArc *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgArc_clearCachedData(void * jarg1) {
  MgArc *arg1 = (MgArc *) 0 ;
  
  arg1 = (MgArc *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgArc_getPointCount(void * jarg1) {
  int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int result;
  
  arg1 = (MgArc *)jarg1; 
  result = (int)((MgArc const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgArc const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgArc_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgArc *arg1 = (MgArc *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  result = (bool)((MgArc const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgArc const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgArc const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgArc_output(void * jarg1, void * jarg2) {
  MgArc *arg1 = (MgArc *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgArc const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgArc const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgArc_getHandleCount(void * jarg1) {
  int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int result;
  
  arg1 = (MgArc *)jarg1; 
  result = (int)((MgArc const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgArc const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgArc const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgArc_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgArc const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgArc_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgArc const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getCenter(void * jarg1) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d result;
  
  arg1 = (MgArc *)jarg1; 
  result = ((MgArc const *)arg1)->getCenter();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getStartPoint(void * jarg1) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d result;
  
  arg1 = (MgArc *)jarg1; 
  result = ((MgArc const *)arg1)->getStartPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getEndPoint(void * jarg1) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d result;
  
  arg1 = (MgArc *)jarg1; 
  result = ((MgArc const *)arg1)->getEndPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getMidPoint(void * jarg1) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d result;
  
  arg1 = (MgArc *)jarg1; 
  result = ((MgArc const *)arg1)->getMidPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgArc_getRadius(void * jarg1) {
  float jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  float result;
  
  arg1 = (MgArc *)jarg1; 
  result = (float)((MgArc const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgArc_getStartAngle(void * jarg1) {
  float jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  float result;
  
  arg1 = (MgArc *)jarg1; 
  result = (float)((MgArc const *)arg1)->getStartAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgArc_getEndAngle(void * jarg1) {
  float jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  float result;
  
  arg1 = (MgArc *)jarg1; 
  result = (float)((MgArc const *)arg1)->getEndAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgArc_getSweepAngle(void * jarg1) {
  float jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  float result;
  
  arg1 = (MgArc *)jarg1; 
  result = (float)((MgArc const *)arg1)->getSweepAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getStartTangent(void * jarg1) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Vector2d result;
  
  arg1 = (MgArc *)jarg1; 
  result = ((MgArc const *)arg1)->getStartTangent();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgArc_getEndTangent(void * jarg1) {
  void * jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Vector2d result;
  
  arg1 = (MgArc *)jarg1; 
  result = ((MgArc const *)arg1)->getEndTangent();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_setStartMidEnd(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setStartMidEnd((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_setCenterStartEnd__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setCenterStartEnd((Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_setCenterStartEnd__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setCenterStartEnd((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_setTanStartEnd(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Vector2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setTanStartEnd((Vector2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgArc_setCenterRadius(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (MgArc *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->setCenterRadius((Point2d const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgDiamond() {
  void * jresult ;
  MgDiamond *result = 0 ;
  
  result = (MgDiamond *)new MgDiamond();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgDiamond(void * jarg1) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDiamond_create() {
  void * jresult ;
  MgDiamond *result = 0 ;
  
  result = (MgDiamond *)MgDiamond::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDiamond_Type() {
  int jresult ;
  int result;
  
  result = (int)MgDiamond::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDiamond_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgDiamond *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgDiamond *)MgDiamond::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDiamond_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgDiamond *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgDiamond *)MgDiamond::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDiamond_clone(void * jarg1) {
  void * jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  result = (MgObject *)((MgDiamond const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDiamond_copy(void * jarg1, void * jarg2) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDiamond_release(void * jarg1) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgDiamond const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDiamond_getType(void * jarg1) {
  int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int result;
  
  arg1 = (MgDiamond *)jarg1; 
  result = (int)((MgDiamond const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgDiamond const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDiamond_getExtent(void * jarg1) {
  void * jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  Box2d result;
  
  arg1 = (MgDiamond *)jarg1; 
  result = ((MgDiamond const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDiamond_update(void * jarg1) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDiamond_transform(void * jarg1, void * jarg2) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDiamond_clear(void * jarg1) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDiamond_clearCachedData(void * jarg1) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDiamond_getPointCount(void * jarg1) {
  int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int result;
  
  arg1 = (MgDiamond *)jarg1; 
  result = (int)((MgDiamond const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDiamond_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgDiamond const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDiamond_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  result = (bool)((MgDiamond const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgDiamond const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgDiamond const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDiamond_output(void * jarg1, void * jarg2) {
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgDiamond const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgDiamond const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDiamond_getHandleCount(void * jarg1) {
  int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int result;
  
  arg1 = (MgDiamond *)jarg1; 
  result = (int)((MgDiamond const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDiamond_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgDiamond const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgDiamond const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDiamond_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgDiamond const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDiamond_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgDiamond_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgDiamond *arg1 = (MgDiamond *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgDiamond *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgDiamond const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgDot() {
  void * jresult ;
  MgDot *result = 0 ;
  
  result = (MgDot *)new MgDot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgDot(void * jarg1) {
  MgDot *arg1 = (MgDot *) 0 ;
  
  arg1 = (MgDot *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDot_create() {
  void * jresult ;
  MgDot *result = 0 ;
  
  result = (MgDot *)MgDot::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDot_Type() {
  int jresult ;
  int result;
  
  result = (int)MgDot::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDot_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgDot *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgDot *)MgDot::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDot_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgDot *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgDot *)MgDot::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDot_clone(void * jarg1) {
  void * jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgDot *)jarg1; 
  result = (MgObject *)((MgDot const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_copy(void * jarg1, void * jarg2) {
  MgDot *arg1 = (MgDot *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_release(void * jarg1) {
  MgDot *arg1 = (MgDot *) 0 ;
  
  arg1 = (MgDot *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgDot const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDot_getType(void * jarg1) {
  int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int result;
  
  arg1 = (MgDot *)jarg1; 
  result = (int)((MgDot const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgDot const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDot_getExtent(void * jarg1) {
  void * jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  Box2d result;
  
  arg1 = (MgDot *)jarg1; 
  result = ((MgDot const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_update(void * jarg1) {
  MgDot *arg1 = (MgDot *) 0 ;
  
  arg1 = (MgDot *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_transform(void * jarg1, void * jarg2) {
  MgDot *arg1 = (MgDot *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_clear(void * jarg1) {
  MgDot *arg1 = (MgDot *) 0 ;
  
  arg1 = (MgDot *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_clearCachedData(void * jarg1) {
  MgDot *arg1 = (MgDot *) 0 ;
  
  arg1 = (MgDot *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDot_getPointCount(void * jarg1) {
  int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int result;
  
  arg1 = (MgDot *)jarg1; 
  result = (int)((MgDot const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDot_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgDot const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  result = (bool)((MgDot const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgDot const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgDot const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_output(void * jarg1, void * jarg2) {
  MgDot *arg1 = (MgDot *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgDot const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgDot const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDot_getHandleCount(void * jarg1) {
  int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int result;
  
  arg1 = (MgDot *)jarg1; 
  result = (int)((MgDot const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgDot_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgDot const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgDot const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDot_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgDot const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgDot_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgDot_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgDot const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgDot_getPointType(void * jarg1) {
  int jresult ;
  MgDot *arg1 = (MgDot *) 0 ;
  int result;
  
  arg1 = (MgDot *)jarg1; 
  result = (int)((MgDot const *)arg1)->getPointType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgDot_setPointType(void * jarg1, int jarg2) {
  MgDot *arg1 = (MgDot *) 0 ;
  int arg2 ;
  
  arg1 = (MgDot *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPointType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgEllipse() {
  void * jresult ;
  MgEllipse *result = 0 ;
  
  result = (MgEllipse *)new MgEllipse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgEllipse(void * jarg1) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgEllipse_create() {
  void * jresult ;
  MgEllipse *result = 0 ;
  
  result = (MgEllipse *)MgEllipse::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgEllipse_Type() {
  int jresult ;
  int result;
  
  result = (int)MgEllipse::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgEllipse_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgEllipse *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgEllipse *)MgEllipse::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgEllipse_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgEllipse *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgEllipse *)MgEllipse::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgEllipse_clone(void * jarg1) {
  void * jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  result = (MgObject *)((MgEllipse const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_copy(void * jarg1, void * jarg2) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_release(void * jarg1) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgEllipse const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgEllipse_getType(void * jarg1) {
  int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int result;
  
  arg1 = (MgEllipse *)jarg1; 
  result = (int)((MgEllipse const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgEllipse const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgEllipse_getExtent(void * jarg1) {
  void * jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  Box2d result;
  
  arg1 = (MgEllipse *)jarg1; 
  result = ((MgEllipse const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_update(void * jarg1) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_transform(void * jarg1, void * jarg2) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_clear(void * jarg1) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_clearCachedData(void * jarg1) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgEllipse_getPointCount(void * jarg1) {
  int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int result;
  
  arg1 = (MgEllipse *)jarg1; 
  result = (int)((MgEllipse const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgEllipse_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgEllipse const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  result = (bool)((MgEllipse const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgEllipse const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgEllipse const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_output(void * jarg1, void * jarg2) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgEllipse const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgEllipse const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgEllipse_getHandleCount(void * jarg1) {
  int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int result;
  
  arg1 = (MgEllipse *)jarg1; 
  result = (int)((MgEllipse const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgEllipse_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgEllipse const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgEllipse const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgEllipse_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgEllipse const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgEllipse_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgEllipse const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgEllipse_getRadiusX(void * jarg1) {
  float jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  float result;
  
  arg1 = (MgEllipse *)jarg1; 
  result = (float)((MgEllipse const *)arg1)->getRadiusX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgEllipse_getRadiusY(void * jarg1) {
  float jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  float result;
  
  arg1 = (MgEllipse *)jarg1; 
  result = (float)((MgEllipse const *)arg1)->getRadiusY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_setRadius__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setRadius(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgEllipse_setRadius__SWIG_1(void * jarg1, float jarg2) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  float arg2 ;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_setCircle(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->setCircle((Point2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_setCircle2P(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setCircle2P((Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_setCircle3P(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setCircle3P((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_isCircle__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  bool result;
  
  arg1 = (MgEllipse *)jarg1; 
  result = (bool)((MgEllipse const *)arg1)->isCircle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgEllipse_isCircle__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (bool)MgEllipse::isCircle((MgBaseShape const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgEllipse_crossCircle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  MgBaseShape *arg3 = (MgBaseShape *) 0 ;
  MgBaseShape *arg4 = (MgBaseShape *) 0 ;
  Point2d *arg5 = 0 ;
  int result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (MgBaseShape *)jarg3; 
  arg4 = (MgBaseShape *)jarg4; 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (int)MgEllipse::crossCircle(*arg1,*arg2,(MgBaseShape const *)arg3,(MgBaseShape const *)arg4,(Point2d const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgEllipse_crossCircle__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  MgBaseShape *arg3 = (MgBaseShape *) 0 ;
  int result;
  
  arg1 = (Point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (MgBaseShape *)jarg3; 
  result = (int)MgEllipse::crossCircle(*arg1,*arg2,(MgBaseShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgGrid() {
  void * jresult ;
  MgGrid *result = 0 ;
  
  result = (MgGrid *)new MgGrid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgGrid(void * jarg1) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGrid_create() {
  void * jresult ;
  MgGrid *result = 0 ;
  
  result = (MgGrid *)MgGrid::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGrid_Type() {
  int jresult ;
  int result;
  
  result = (int)MgGrid::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGrid_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgGrid *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgGrid *)MgGrid::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGrid_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgGrid *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgGrid *)MgGrid::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGrid_clone(void * jarg1) {
  void * jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  result = (MgObject *)((MgGrid const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGrid_copy(void * jarg1, void * jarg2) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGrid_release(void * jarg1) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgGrid const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGrid_getType(void * jarg1) {
  int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int result;
  
  arg1 = (MgGrid *)jarg1; 
  result = (int)((MgGrid const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgGrid const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGrid_getExtent(void * jarg1) {
  void * jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  Box2d result;
  
  arg1 = (MgGrid *)jarg1; 
  result = ((MgGrid const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGrid_update(void * jarg1) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGrid_transform(void * jarg1, void * jarg2) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGrid_clear(void * jarg1) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGrid_clearCachedData(void * jarg1) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGrid_getPointCount(void * jarg1) {
  int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int result;
  
  arg1 = (MgGrid *)jarg1; 
  result = (int)((MgGrid const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGrid_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgGrid const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGrid_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  result = (bool)((MgGrid const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgGrid const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgGrid const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGrid_output(void * jarg1, void * jarg2) {
  MgGrid *arg1 = (MgGrid *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgGrid const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgGrid const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGrid_getHandleCount(void * jarg1) {
  int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int result;
  
  arg1 = (MgGrid *)jarg1; 
  result = (int)((MgGrid const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGrid_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgGrid const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgGrid const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGrid_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgGrid const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgGrid_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgGrid const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGrid_snap(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  int result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (int)((MgGrid const *)arg1)->snap(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGrid_getCellSize(void * jarg1) {
  void * jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  Vector2d *result = 0 ;
  
  arg1 = (MgGrid *)jarg1; 
  result = (Vector2d *) &((MgGrid const *)arg1)->getCellSize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGrid_isValid(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MgGrid *arg1 = (MgGrid *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MgGrid *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)((MgGrid const *)arg1)->isValid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgLine() {
  void * jresult ;
  MgLine *result = 0 ;
  
  result = (MgLine *)new MgLine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgLine(void * jarg1) {
  MgLine *arg1 = (MgLine *) 0 ;
  
  arg1 = (MgLine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_create() {
  void * jresult ;
  MgLine *result = 0 ;
  
  result = (MgLine *)MgLine::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLine_Type() {
  int jresult ;
  int result;
  
  result = (int)MgLine::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgLine *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgLine *)MgLine::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgLine *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgLine *)MgLine::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_clone(void * jarg1) {
  void * jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  result = (MgObject *)((MgLine const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_copy(void * jarg1, void * jarg2) {
  MgLine *arg1 = (MgLine *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_release(void * jarg1) {
  MgLine *arg1 = (MgLine *) 0 ;
  
  arg1 = (MgLine *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgLine const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLine_getType(void * jarg1) {
  int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int result;
  
  arg1 = (MgLine *)jarg1; 
  result = (int)((MgLine const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgLine const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_getExtent(void * jarg1) {
  void * jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  Box2d result;
  
  arg1 = (MgLine *)jarg1; 
  result = ((MgLine const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_update(void * jarg1) {
  MgLine *arg1 = (MgLine *) 0 ;
  
  arg1 = (MgLine *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_transform(void * jarg1, void * jarg2) {
  MgLine *arg1 = (MgLine *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_clear(void * jarg1) {
  MgLine *arg1 = (MgLine *) 0 ;
  
  arg1 = (MgLine *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_clearCachedData(void * jarg1) {
  MgLine *arg1 = (MgLine *) 0 ;
  
  arg1 = (MgLine *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLine_getPointCount(void * jarg1) {
  int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int result;
  
  arg1 = (MgLine *)jarg1; 
  result = (int)((MgLine const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgLine const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgLine *arg1 = (MgLine *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  result = (bool)((MgLine const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgLine const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgLine const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_output(void * jarg1, void * jarg2) {
  MgLine *arg1 = (MgLine *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgLine const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgLine const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLine_getHandleCount(void * jarg1) {
  int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int result;
  
  arg1 = (MgLine *)jarg1; 
  result = (int)((MgLine const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgLine const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgLine const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLine_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgLine const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgLine_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgLine const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_startPoint(void * jarg1) {
  void * jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  result = (Point2d *) &((MgLine const *)arg1)->startPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_endPoint(void * jarg1) {
  void * jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  result = (Point2d *) &((MgLine const *)arg1)->endPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLine_center(void * jarg1) {
  void * jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d result;
  
  arg1 = (MgLine *)jarg1; 
  result = ((MgLine const *)arg1)->center();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgLine_length(void * jarg1) {
  float jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  float result;
  
  arg1 = (MgLine *)jarg1; 
  result = (float)((MgLine const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgLine_angle(void * jarg1) {
  float jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  float result;
  
  arg1 = (MgLine *)jarg1; 
  result = (float)((MgLine const *)arg1)->angle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_setStartPoint(void * jarg1, void * jarg2) {
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *arg2 = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setStartPoint((Point2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_setEndPoint(void * jarg1, void * jarg2) {
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *arg2 = 0 ;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setEndPoint((Point2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_setRayline(void * jarg1, unsigned int jarg2) {
  MgLine *arg1 = (MgLine *) 0 ;
  bool arg2 ;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRayline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLine_setBeeline(void * jarg1, unsigned int jarg2) {
  MgLine *arg1 = (MgLine *) 0 ;
  bool arg2 ;
  
  arg1 = (MgLine *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBeeline(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_isRayline(void * jarg1) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  result = (bool)((MgLine const *)arg1)->isRayline();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLine_isBeeline(void * jarg1) {
  unsigned int jresult ;
  MgLine *arg1 = (MgLine *) 0 ;
  bool result;
  
  arg1 = (MgLine *)jarg1; 
  result = (bool)((MgLine const *)arg1)->isBeeline();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgParallel() {
  void * jresult ;
  MgParallel *result = 0 ;
  
  result = (MgParallel *)new MgParallel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgParallel(void * jarg1) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_create() {
  void * jresult ;
  MgParallel *result = 0 ;
  
  result = (MgParallel *)MgParallel::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgParallel_Type() {
  int jresult ;
  int result;
  
  result = (int)MgParallel::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgParallel *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgParallel *)MgParallel::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgParallel *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgParallel *)MgParallel::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_clone(void * jarg1) {
  void * jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  result = (MgObject *)((MgParallel const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgParallel_copy(void * jarg1, void * jarg2) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgParallel_release(void * jarg1) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgParallel const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgParallel_getType(void * jarg1) {
  int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int result;
  
  arg1 = (MgParallel *)jarg1; 
  result = (int)((MgParallel const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgParallel const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_getExtent(void * jarg1) {
  void * jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  Box2d result;
  
  arg1 = (MgParallel *)jarg1; 
  result = ((MgParallel const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgParallel_update(void * jarg1) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgParallel_transform(void * jarg1, void * jarg2) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgParallel_clear(void * jarg1) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgParallel_clearCachedData(void * jarg1) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgParallel_getPointCount(void * jarg1) {
  int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int result;
  
  arg1 = (MgParallel *)jarg1; 
  result = (int)((MgParallel const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgParallel const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgParallel_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  result = (bool)((MgParallel const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgParallel const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgParallel const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgParallel_output(void * jarg1, void * jarg2) {
  MgParallel *arg1 = (MgParallel *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgParallel const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgParallel const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgParallel_getHandleCount(void * jarg1) {
  int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int result;
  
  arg1 = (MgParallel *)jarg1; 
  result = (int)((MgParallel const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgParallel const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgParallel const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgParallel_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgParallel const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgParallel_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgParallel const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_getCenter(void * jarg1) {
  void * jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  Point2d result;
  
  arg1 = (MgParallel *)jarg1; 
  result = ((MgParallel const *)arg1)->getCenter();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgParallel_getRect(void * jarg1) {
  void * jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  Box2d result;
  
  arg1 = (MgParallel *)jarg1; 
  result = ((MgParallel const *)arg1)->getRect();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgParallel_getWidth(void * jarg1) {
  float jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  float result;
  
  arg1 = (MgParallel *)jarg1; 
  result = (float)((MgParallel const *)arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgParallel_getHeight(void * jarg1) {
  float jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  float result;
  
  arg1 = (MgParallel *)jarg1; 
  result = (float)((MgParallel const *)arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgParallel_angle(void * jarg1) {
  float jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  float result;
  
  arg1 = (MgParallel *)jarg1; 
  result = (float)((MgParallel const *)arg1)->angle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgParallel_isEmpty(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MgParallel *arg1 = (MgParallel *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MgParallel *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)((MgParallel const *)arg1)->isEmpty(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgPathShape() {
  void * jresult ;
  MgPathShape *result = 0 ;
  
  result = (MgPathShape *)new MgPathShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgPathShape(void * jarg1) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_create() {
  void * jresult ;
  MgPathShape *result = 0 ;
  
  result = (MgPathShape *)MgPathShape::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPathShape_Type() {
  int jresult ;
  int result;
  
  result = (int)MgPathShape::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgPathShape *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgPathShape *)MgPathShape::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgPathShape *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgPathShape *)MgPathShape::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_clone(void * jarg1) {
  void * jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  result = (MgObject *)((MgPathShape const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPathShape_copy(void * jarg1, void * jarg2) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPathShape_release(void * jarg1) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgPathShape const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPathShape_getType(void * jarg1) {
  int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int result;
  
  arg1 = (MgPathShape *)jarg1; 
  result = (int)((MgPathShape const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgPathShape const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_getExtent(void * jarg1) {
  void * jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  Box2d result;
  
  arg1 = (MgPathShape *)jarg1; 
  result = ((MgPathShape const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPathShape_update(void * jarg1) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPathShape_transform(void * jarg1, void * jarg2) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPathShape_clear(void * jarg1) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPathShape_clearCachedData(void * jarg1) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPathShape_getPointCount(void * jarg1) {
  int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int result;
  
  arg1 = (MgPathShape *)jarg1; 
  result = (int)((MgPathShape const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgPathShape const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPathShape_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  result = (bool)((MgPathShape const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgPathShape const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgPathShape const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgPathShape_output(void * jarg1, void * jarg2) {
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgPathShape const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgPathShape const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPathShape_getHandleCount(void * jarg1) {
  int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int result;
  
  arg1 = (MgPathShape *)jarg1; 
  result = (int)((MgPathShape const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgPathShape const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgPathShape const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPathShape_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgPathShape const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgPathShape_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgPathShape const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_pathc(void * jarg1) {
  void * jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  MgPath *result = 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  result = (MgPath *) &((MgPathShape const *)arg1)->pathc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgPathShape_path(void * jarg1) {
  void * jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  MgPath *result = 0 ;
  
  arg1 = (MgPathShape *)jarg1; 
  result = (MgPath *) &(arg1)->path();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgPathShape_importSVGPath(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->importSVGPath((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPathShape_exportSVGPath__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  MgPathShape *arg1 = (MgPathShape *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (MgPathShape *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((MgPathShape const *)arg1)->exportSVGPath(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgPathShape_exportSVGPath__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  MgPath *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (MgPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath const & type is null", 0);
    return 0;
  } 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MgPathShape::exportSVGPath((MgPath const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgRoundRect() {
  void * jresult ;
  MgRoundRect *result = 0 ;
  
  result = (MgRoundRect *)new MgRoundRect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgRoundRect(void * jarg1) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRoundRect_create() {
  void * jresult ;
  MgRoundRect *result = 0 ;
  
  result = (MgRoundRect *)MgRoundRect::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRoundRect_Type() {
  int jresult ;
  int result;
  
  result = (int)MgRoundRect::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRoundRect_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgRoundRect *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgRoundRect *)MgRoundRect::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRoundRect_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgRoundRect *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgRoundRect *)MgRoundRect::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRoundRect_clone(void * jarg1) {
  void * jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  result = (MgObject *)((MgRoundRect const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_copy(void * jarg1, void * jarg2) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_release(void * jarg1) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgRoundRect const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRoundRect_getType(void * jarg1) {
  int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int result;
  
  arg1 = (MgRoundRect *)jarg1; 
  result = (int)((MgRoundRect const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgRoundRect const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRoundRect_getExtent(void * jarg1) {
  void * jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  Box2d result;
  
  arg1 = (MgRoundRect *)jarg1; 
  result = ((MgRoundRect const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_update(void * jarg1) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_transform(void * jarg1, void * jarg2) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_clear(void * jarg1) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_clearCachedData(void * jarg1) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRoundRect_getPointCount(void * jarg1) {
  int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int result;
  
  arg1 = (MgRoundRect *)jarg1; 
  result = (int)((MgRoundRect const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRoundRect_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgRoundRect const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  result = (bool)((MgRoundRect const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgRoundRect const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgRoundRect const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_output(void * jarg1, void * jarg2) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgRoundRect const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgRoundRect const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRoundRect_getHandleCount(void * jarg1) {
  int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int result;
  
  arg1 = (MgRoundRect *)jarg1; 
  result = (int)((MgRoundRect const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgRoundRect_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgRoundRect const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgRoundRect const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRoundRect_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgRoundRect const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRoundRect_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgRoundRect_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgRoundRect const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgRoundRect_getRadiusX(void * jarg1) {
  float jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  float result;
  
  arg1 = (MgRoundRect *)jarg1; 
  result = (float)((MgRoundRect const *)arg1)->getRadiusX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgRoundRect_getRadiusY(void * jarg1) {
  float jresult ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  float result;
  
  arg1 = (MgRoundRect *)jarg1; 
  result = (float)((MgRoundRect const *)arg1)->getRadiusY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_setRadius__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setRadius(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRoundRect_setRadius__SWIG_1(void * jarg1, float jarg2) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  float arg2 ;
  
  arg1 = (MgRoundRect *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgSplines() {
  void * jresult ;
  MgSplines *result = 0 ;
  
  result = (MgSplines *)new MgSplines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgSplines(void * jarg1) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSplines_create() {
  void * jresult ;
  MgSplines *result = 0 ;
  
  result = (MgSplines *)MgSplines::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSplines_Type() {
  int jresult ;
  int result;
  
  result = (int)MgSplines::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSplines_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgSplines *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgSplines *)MgSplines::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSplines_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgSplines *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgSplines *)MgSplines::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSplines_clone(void * jarg1) {
  void * jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  result = (MgObject *)((MgSplines const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_copy(void * jarg1, void * jarg2) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_release(void * jarg1) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgSplines const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSplines_getType(void * jarg1) {
  int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int result;
  
  arg1 = (MgSplines *)jarg1; 
  result = (int)((MgSplines const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgSplines const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSplines_getExtent(void * jarg1) {
  void * jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  Box2d result;
  
  arg1 = (MgSplines *)jarg1; 
  result = ((MgSplines const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_update(void * jarg1) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_transform(void * jarg1, void * jarg2) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_clear(void * jarg1) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_clearCachedData(void * jarg1) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSplines_getPointCount(void * jarg1) {
  int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int result;
  
  arg1 = (MgSplines *)jarg1; 
  result = (int)((MgSplines const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSplines_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgSplines const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  result = (bool)((MgSplines const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgSplines const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgSplines const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_output(void * jarg1, void * jarg2) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgSplines const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgSplines const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSplines_getHandleCount(void * jarg1) {
  int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int result;
  
  arg1 = (MgSplines *)jarg1; 
  result = (int)((MgSplines const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSplines_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgSplines const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgSplines const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSplines_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgSplines const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgSplines_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgSplines const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSplines_smooth(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  Matrix2d *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->smooth((Matrix2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSplines_smoothForPoints(void * jarg1, int jarg2, void * jarg3, void * jarg4, float jarg5) {
  int jresult ;
  MgSplines *arg1 = (MgSplines *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Matrix2d *arg4 = 0 ;
  float arg5 ;
  int result;
  
  arg1 = (MgSplines *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3; 
  arg4 = (Matrix2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = (int)(arg1)->smoothForPoints(arg2,(Point2d const *)arg3,(Matrix2d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSplines_clearVectors(void * jarg1) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  
  arg1 = (MgSplines *)jarg1; 
  (arg1)->clearVectors();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShape_Type() {
  int jresult ;
  int result;
  
  result = (int)MgShape::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShape_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgShape *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgShape *)MgShape::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgShape_toHandle(void * jarg1) {
  long jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  long result;
  
  arg1 = (MgShape *)jarg1; 
  result = (long)((MgShape const *)arg1)->toHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShape_cloneShape(void * jarg1) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  result = (MgShape *)((MgShape const *)arg1)->cloneShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShape_context(void * jarg1) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  GiContext *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  result = (GiContext *) &((MgShape const *)arg1)->context();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShape_setContext__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  MgShape *arg1 = (MgShape *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->setContext((GiContext const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShape_setContext__SWIG_1(void * jarg1, void * jarg2) {
  MgShape *arg1 = (MgShape *) 0 ;
  GiContext *arg2 = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return ;
  } 
  (arg1)->setContext((GiContext const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShape_shape(void * jarg1) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgBaseShape *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  result = (MgBaseShape *)(arg1)->shape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShape_shapec(void * jarg1) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgBaseShape *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  result = (MgBaseShape *)((MgShape const *)arg1)->shapec();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShape_hasFillColor(void * jarg1) {
  unsigned int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgShape *)jarg1; 
  result = (bool)((MgShape const *)arg1)->hasFillColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShape_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = (GiContext *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)((MgShape const *)arg1)->draw(arg2,*arg3,(GiContext const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShape_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgShape const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShape_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShape_getID(void * jarg1) {
  int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int result;
  
  arg1 = (MgShape *)jarg1; 
  result = (int)((MgShape const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShape_getParent(void * jarg1) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  result = (MgShapes *)((MgShape const *)arg1)->getParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShape_setParent(void * jarg1, void * jarg2, int jarg3) {
  MgShape *arg1 = (MgShape *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  int arg3 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgShapes *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setParent(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShape_getTag(void * jarg1) {
  int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int result;
  
  arg1 = (MgShape *)jarg1; 
  result = (int)((MgShape const *)arg1)->getTag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShape_setTag(void * jarg1, int jarg2) {
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShape_copy(void * jarg1, void * jarg2) {
  MgShape *arg1 = (MgShape *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShape_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgShape const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShape_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgShape const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShape_drawShape(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgBaseShape *arg2 = 0 ;
  int arg3 ;
  GiGraphics *arg4 = 0 ;
  GiContext *arg5 = 0 ;
  int arg6 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgBaseShape *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgBaseShape const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (GiGraphics *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg5 = (GiContext *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = (bool)MgShape::drawShape((MgShapes const *)arg1,(MgBaseShape const &)*arg2,arg3,*arg4,(GiContext const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShape_getPointCount(void * jarg1) {
  int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int result;
  
  arg1 = (MgShape *)jarg1; 
  result = (int)((MgShape const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShape_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgShape const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShape_getHandleCount(void * jarg1) {
  int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int result;
  
  arg1 = (MgShape *)jarg1; 
  result = (int)((MgShape const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShape_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgShape const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShape_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgShape const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgShapeFactory(void * jarg1) {
  MgShapeFactory *arg1 = (MgShapeFactory *) 0 ;
  
  arg1 = (MgShapeFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeFactory_createShape(void * jarg1, int jarg2) {
  void * jresult ;
  MgShapeFactory *arg1 = (MgShapeFactory *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapeFactory *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)(arg1)->createShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_Type() {
  int jresult ;
  int result;
  
  result = (int)MgShapes::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_cloneShapes(void * jarg1) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  result = (MgShapes *)((MgShapes const *)arg1)->cloneShapes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_shallowCopy(void * jarg1) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  result = (MgShapes *)((MgShapes const *)arg1)->shallowCopy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_create__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  MgObject *arg1 = (MgObject *) 0 ;
  int arg2 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShapes *)MgShapes::create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_create__SWIG_1(void * jarg1) {
  void * jresult ;
  MgObject *arg1 = (MgObject *) 0 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgObject *)jarg1; 
  result = (MgShapes *)MgShapes::create(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_create__SWIG_2() {
  void * jresult ;
  MgShapes *result = 0 ;
  
  result = (MgShapes *)MgShapes::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_getShapeCount(void * jarg1) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  result = (int)((MgShapes const *)arg1)->getShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_getShapeCountByTypeOrTag(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((MgShapes const *)arg1)->getShapeCountByTypeOrTag(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_getShapeIndex(void * jarg1, int jarg2) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgShapes const *)arg1)->getShapeIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_getShapeAtIndex(void * jarg1, int jarg2) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapes const *)arg1)->getShapeAtIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_getHeadShape(void * jarg1) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  result = (MgShape *)((MgShapes const *)arg1)->getHeadShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_getLastShape(void * jarg1) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  result = (MgShape *)((MgShapes const *)arg1)->getLastShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_findShape(void * jarg1, int jarg2) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapes const *)arg1)->findShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_findShapeByTag(void * jarg1, int jarg2) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapes const *)arg1)->findShapeByTag(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_findShapeByType(void * jarg1, int jarg2) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapes const *)arg1)->findShapeByType(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_findShapeByTypeAndTag(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  int arg3 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (MgShape *)((MgShapes const *)arg1)->findShapeByTypeAndTag(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_getExtent(void * jarg1) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  Box2d result;
  
  arg1 = (MgShapes *)jarg1; 
  result = ((MgShapes const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_hitTest(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  Box2d *arg2 = 0 ;
  MgHitResult *arg3 = 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  arg3 = (MgHitResult *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (MgShape *)((MgShapes const *)arg1)->hitTest((Box2d const &)*arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_draw__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  GiGraphics *arg2 = 0 ;
  GiContext *arg3 = (GiContext *) 0 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (GiGraphics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg3 = (GiContext *)jarg3; 
  result = (int)((MgShapes const *)arg1)->draw(*arg2,(GiContext const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_draw__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  GiGraphics *arg2 = 0 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (GiGraphics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  result = (int)((MgShapes const *)arg1)->draw(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_save__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((MgShapes const *)arg1)->save(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_save__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgShapes const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_saveShape(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((MgShapes const *)arg1)->saveShape(arg2,(MgShape const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_load__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->load(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_load__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (int)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapes_setNewShapeID(void * jarg1, int jarg2) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNewShapeID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapes_clear(void * jarg1) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapes_clearCachedData(void * jarg1) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_copyShapes__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShapes *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->copyShapes((MgShapes const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_copyShapes__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShapes *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->copyShapes((MgShapes const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_copyShapes__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShapes *)jarg2; 
  result = (int)(arg1)->copyShapes((MgShapes const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_addShape(void * jarg1, void * jarg2) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *arg2 = 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShape *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgShape const & type is null", 0);
    return 0;
  } 
  result = (MgShape *)(arg1)->addShape((MgShape const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_addShapeDirect__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addShapeDirect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_addShapeDirect__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->addShapeDirect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_updateShape__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->updateShape(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_updateShape__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->updateShape(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_cloneShape(void * jarg1, int jarg2) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapes const *)arg1)->cloneShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapes_transform(void * jarg1, void * jarg2) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_removeShape(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->removeShape(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_moveShapeTo(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShapes *arg3 = (MgShapes *) 0 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MgShapes *)jarg3; 
  result = (bool)(arg1)->moveShapeTo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapes_copyShapesTo(void * jarg1, void * jarg2) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgShapes *)jarg2; 
  ((MgShapes const *)arg1)->copyShapesTo(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_bringToFront(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->bringToFront(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_bringToBack(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->bringToBack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_bringToIndex(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->bringToIndex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_getParentShape(void * jarg1) {
  void * jresult ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShape *)jarg1; 
  result = (MgShape *)MgShapes::getParentShape((MgShape const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_getOwner(void * jarg1) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  result = (MgObject *)((MgShapes const *)arg1)->getOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_getIndex(void * jarg1) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  result = (int)((MgShapes const *)arg1)->getIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgShapes *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgShapes *)MgShapes::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgShapes_toHandle(void * jarg1) {
  long jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  long result;
  
  arg1 = (MgShapes *)jarg1; 
  result = (long)((MgShapes const *)arg1)->toHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapes_clone(void * jarg1) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  result = (MgObject *)((MgShapes const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapes_copy(void * jarg1, void * jarg2) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapes_release(void * jarg1) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapes_addRef(void * jarg1) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  (arg1)->addRef();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgShapes const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapes_getType(void * jarg1) {
  int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int result;
  
  arg1 = (MgShapes *)jarg1; 
  result = (int)((MgShapes const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapes_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgShapes const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgShapeIterator(void * jarg1) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapeIterator *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  result = (MgShapeIterator *)new MgShapeIterator((MgShapes const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgShapeIterator(void * jarg1) {
  MgShapeIterator *arg1 = (MgShapeIterator *) 0 ;
  
  arg1 = (MgShapeIterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeIterator_hasNext(void * jarg1) {
  unsigned int jresult ;
  MgShapeIterator *arg1 = (MgShapeIterator *) 0 ;
  bool result;
  
  arg1 = (MgShapeIterator *)jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeIterator_getNext(void * jarg1) {
  void * jresult ;
  MgShapeIterator *arg1 = (MgShapeIterator *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapeIterator *)jarg1; 
  result = (MgShape *)(arg1)->getNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeIterator_shapes(void * jarg1) {
  void * jresult ;
  MgShapeIterator *arg1 = (MgShapeIterator *) 0 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgShapeIterator *)jarg1; 
  result = (MgShapes *)((MgShapeIterator const *)arg1)->shapes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgComposite_Type() {
  int jresult ;
  int result;
  
  result = (int)MgComposite::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgComposite_getShapeCount(void * jarg1) {
  int jresult ;
  MgComposite *arg1 = (MgComposite *) 0 ;
  int result;
  
  arg1 = (MgComposite *)jarg1; 
  result = (int)((MgComposite const *)arg1)->getShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgComposite_shapes(void * jarg1) {
  void * jresult ;
  MgComposite *arg1 = (MgComposite *) 0 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgComposite *)jarg1; 
  result = (MgShapes *)((MgComposite const *)arg1)->shapes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgComposite_getOwnerShape(void * jarg1) {
  void * jresult ;
  MgComposite *arg1 = (MgComposite *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgComposite *)jarg1; 
  result = (MgShape *)((MgComposite const *)arg1)->getOwnerShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgComposite_canOffsetShapeAlone(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgComposite *arg1 = (MgComposite *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgComposite *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->canOffsetShapeAlone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgComposite_canOffsetShapeAloneSwigExplicitMgComposite(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgComposite *arg1 = (MgComposite *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgComposite *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->MgComposite::canOffsetShapeAlone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgComposite() {
  void * jresult ;
  MgComposite *result = 0 ;
  
  result = (MgComposite *)new SwigDirector_MgComposite();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgComposite_director_connect(void *objarg, SwigDirector_MgComposite::SWIG_Callback0_t callback0, SwigDirector_MgComposite::SWIG_Callback1_t callback1, SwigDirector_MgComposite::SWIG_Callback2_t callback2, SwigDirector_MgComposite::SWIG_Callback3_t callback3, SwigDirector_MgComposite::SWIG_Callback4_t callback4, SwigDirector_MgComposite::SWIG_Callback5_t callback5, SwigDirector_MgComposite::SWIG_Callback6_t callback6, SwigDirector_MgComposite::SWIG_Callback7_t callback7, SwigDirector_MgComposite::SWIG_Callback8_t callback8, SwigDirector_MgComposite::SWIG_Callback9_t callback9, SwigDirector_MgComposite::SWIG_Callback10_t callback10, SwigDirector_MgComposite::SWIG_Callback11_t callback11, SwigDirector_MgComposite::SWIG_Callback12_t callback12, SwigDirector_MgComposite::SWIG_Callback13_t callback13, SwigDirector_MgComposite::SWIG_Callback14_t callback14, SwigDirector_MgComposite::SWIG_Callback15_t callback15, SwigDirector_MgComposite::SWIG_Callback16_t callback16, SwigDirector_MgComposite::SWIG_Callback17_t callback17, SwigDirector_MgComposite::SWIG_Callback18_t callback18, SwigDirector_MgComposite::SWIG_Callback19_t callback19, SwigDirector_MgComposite::SWIG_Callback20_t callback20, SwigDirector_MgComposite::SWIG_Callback21_t callback21, SwigDirector_MgComposite::SWIG_Callback22_t callback22, SwigDirector_MgComposite::SWIG_Callback23_t callback23, SwigDirector_MgComposite::SWIG_Callback24_t callback24, SwigDirector_MgComposite::SWIG_Callback25_t callback25, SwigDirector_MgComposite::SWIG_Callback26_t callback26, SwigDirector_MgComposite::SWIG_Callback27_t callback27, SwigDirector_MgComposite::SWIG_Callback28_t callback28, SwigDirector_MgComposite::SWIG_Callback29_t callback29, SwigDirector_MgComposite::SWIG_Callback30_t callback30, SwigDirector_MgComposite::SWIG_Callback31_t callback31, SwigDirector_MgComposite::SWIG_Callback32_t callback32, SwigDirector_MgComposite::SWIG_Callback33_t callback33, SwigDirector_MgComposite::SWIG_Callback34_t callback34, SwigDirector_MgComposite::SWIG_Callback35_t callback35, SwigDirector_MgComposite::SWIG_Callback36_t callback36) {
  MgComposite *obj = (MgComposite *)objarg;
  SwigDirector_MgComposite *director = dynamic_cast<SwigDirector_MgComposite *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgGroup() {
  void * jresult ;
  MgGroup *result = 0 ;
  
  result = (MgGroup *)new MgGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgGroup(void * jarg1) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_create() {
  void * jresult ;
  MgGroup *result = 0 ;
  
  result = (MgGroup *)MgGroup::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGroup_Type() {
  int jresult ;
  int result;
  
  result = (int)MgGroup::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgGroup *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgGroup *)MgGroup::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgGroup *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgGroup *)MgGroup::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_clone(void * jarg1) {
  void * jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  result = (MgObject *)((MgGroup const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_copy(void * jarg1, void * jarg2) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_release(void * jarg1) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgGroup const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGroup_getType(void * jarg1) {
  int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int result;
  
  arg1 = (MgGroup *)jarg1; 
  result = (int)((MgGroup const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgGroup const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_getExtent(void * jarg1) {
  void * jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  Box2d result;
  
  arg1 = (MgGroup *)jarg1; 
  result = ((MgGroup const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_update(void * jarg1) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_transform(void * jarg1, void * jarg2) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_clear(void * jarg1) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_clearCachedData(void * jarg1) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGroup_getPointCount(void * jarg1) {
  int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int result;
  
  arg1 = (MgGroup *)jarg1; 
  result = (int)((MgGroup const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgGroup const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  result = (bool)((MgGroup const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgGroup const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgGroup const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_output(void * jarg1, void * jarg2) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgGroup const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgGroup const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGroup_getHandleCount(void * jarg1) {
  int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int result;
  
  arg1 = (MgGroup *)jarg1; 
  result = (int)((MgGroup const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgGroup const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgGroup const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgGroup_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgGroup const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgGroup_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgGroup const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_addShapeToGroup(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->addShapeToGroup((MgShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_getInsertionPoint(void * jarg1) {
  void * jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  Point2d result;
  
  arg1 = (MgGroup *)jarg1; 
  result = ((MgGroup const *)arg1)->getInsertionPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_setInsertionPoint(void * jarg1, void * jarg2) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  Point2d *arg2 = 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setInsertionPoint((Point2d const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgGroup_hasInsertionPoint(void * jarg1) {
  unsigned int jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  bool result;
  
  arg1 = (MgGroup *)jarg1; 
  result = (bool)((MgGroup const *)arg1)->hasInsertionPoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_getCenterPoint(void * jarg1) {
  void * jresult ;
  MgGroup *arg1 = (MgGroup *) 0 ;
  Point2d result;
  
  arg1 = (MgGroup *)jarg1; 
  result = ((MgGroup const *)arg1)->getCenterPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgGroup_setName(void * jarg1, char * jarg2) {
  MgGroup *arg1 = (MgGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MgGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgGroup_findGroup(void * jarg1, char * jarg2) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  char *arg2 = (char *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (MgShape *)MgGroup::findGroup((MgShapes const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgImageShape() {
  void * jresult ;
  MgImageShape *result = 0 ;
  
  result = (MgImageShape *)new MgImageShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgImageShape(void * jarg1) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_create() {
  void * jresult ;
  MgImageShape *result = 0 ;
  
  result = (MgImageShape *)MgImageShape::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgImageShape_Type() {
  int jresult ;
  int result;
  
  result = (int)MgImageShape::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_cast(void * jarg1) {
  void * jresult ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgImageShape *result = 0 ;
  
  arg1 = (MgBaseShape *)jarg1; 
  result = (MgImageShape *)MgImageShape::cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgImageShape *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgImageShape *)MgImageShape::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_clone(void * jarg1) {
  void * jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  result = (MgObject *)((MgImageShape const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_copy(void * jarg1, void * jarg2) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_release(void * jarg1) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgImageShape const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgImageShape_getType(void * jarg1) {
  int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int result;
  
  arg1 = (MgImageShape *)jarg1; 
  result = (int)((MgImageShape const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgImageShape const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_getExtent(void * jarg1) {
  void * jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  Box2d result;
  
  arg1 = (MgImageShape *)jarg1; 
  result = ((MgImageShape const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_update(void * jarg1) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_transform(void * jarg1, void * jarg2) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (Matrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_clear(void * jarg1) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_clearCachedData(void * jarg1) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgImageShape_getPointCount(void * jarg1) {
  int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int result;
  
  arg1 = (MgImageShape *)jarg1; 
  result = (int)((MgImageShape const *)arg1)->getPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_getPoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgImageShape const *)arg1)->getPoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_setPoint(void * jarg1, int jarg2, void * jarg3) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_isClosed(void * jarg1) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  result = (bool)((MgImageShape const *)arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_hitTestBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgImageShape const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_draw(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  arg4 = (GiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)((MgImageShape const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_output(void * jarg1, void * jarg2) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  MgPath *arg2 = 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (MgPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgPath & type is null", 0);
    return ;
  } 
  ((MgImageShape const *)arg1)->output(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)((MgImageShape const *)arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_load(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgImageShape_getHandleCount(void * jarg1) {
  int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int result;
  
  arg1 = (MgImageShape *)jarg1; 
  result = (int)((MgImageShape const *)arg1)->getHandleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_getHandlePoint(void * jarg1, int jarg2) {
  void * jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgImageShape const *)arg1)->getHandlePoint(arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_setHandlePoint(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_isHandleFixed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgImageShape const *)arg1)->isHandleFixed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgImageShape_getHandleType(void * jarg1, int jarg2) {
  int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((MgImageShape const *)arg1)->getHandleType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgImageShape_offset(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (Vector2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2d const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgImageShape_hitTest(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  MgHitResult *arg4 = 0 ;
  float result;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (MgHitResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgHitResult & type is null", 0);
    return 0;
  } 
  result = (float)((MgImageShape const *)arg1)->hitTest((Point2d const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_setName(void * jarg1, char * jarg2) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MgImageShape *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_getImageSize(void * jarg1) {
  void * jresult ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  Vector2d result;
  
  arg1 = (MgImageShape *)jarg1; 
  result = ((MgImageShape const *)arg1)->getImageSize();
  jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgImageShape_setImageSize(void * jarg1, void * jarg2) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  Vector2d arg2 ;
  Vector2d *argp2 ;
  
  arg1 = (MgImageShape *)jarg1; 
  argp2 = (Vector2d *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2d", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setImageSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgImageShape_findShapeByImageID(void * jarg1, char * jarg2) {
  void * jresult ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  char *arg2 = (char *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapes *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (MgShape *)MgImageShape::findShapeByImageID((MgShapes const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgActionDispatcher(void * jarg1) {
  MgActionDispatcher *arg1 = (MgActionDispatcher *) 0 ;
  
  arg1 = (MgActionDispatcher *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgActionDispatcher_showInSelect(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  MgActionDispatcher *arg1 = (MgActionDispatcher *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  MgShape *arg4 = (MgShape *) 0 ;
  Box2d *arg5 = 0 ;
  bool result;
  
  arg1 = (MgActionDispatcher *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (MgShape *)jarg4; 
  arg5 = (Box2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->showInSelect((MgMotion const *)arg2,arg3,(MgShape const *)arg4,(Box2d const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgActionDispatcher_showInDrawing(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgActionDispatcher *arg1 = (MgActionDispatcher *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgActionDispatcher *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->showInDrawing((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgActionDispatcher_doAction(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgActionDispatcher *arg1 = (MgActionDispatcher *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgActionDispatcher *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->doAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgSnap(void * jarg1) {
  MgSnap *arg1 = (MgSnap *) 0 ;
  
  arg1 = (MgSnap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSnap_clearSnap(void * jarg1, void * jarg2) {
  MgSnap *arg1 = (MgSnap *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->clearSnap((MgMotion const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSnap_drawSnap(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgSnap *arg1 = (MgSnap *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  GiGraphics *arg3 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (GiGraphics *)jarg3; 
  result = (bool)((MgSnap const *)arg1)->drawSnap((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSnap_drawPerpMark(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, float jarg8) {
  unsigned int jresult ;
  MgSnap *arg1 = (MgSnap *) 0 ;
  GiGraphics *arg2 = (GiGraphics *) 0 ;
  GiContext *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  Point2d *arg6 = 0 ;
  Point2d *arg7 = 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (GiGraphics *)jarg2; 
  arg3 = (GiContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg6 = (Point2d *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg7 = (Point2d *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg8 = (float)jarg8; 
  result = (bool)((MgSnap const *)arg1)->drawPerpMark(arg2,(GiContext const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5,(Point2d const &)*arg6,(Point2d const &)*arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSnap_getSnapOptions(void * jarg1, void * jarg2) {
  int jresult ;
  MgSnap *arg1 = (MgSnap *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  int result;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (MgView *)jarg2; 
  result = (int)((MgSnap const *)arg1)->getSnapOptions(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSnap_setSnapOptions(void * jarg1, void * jarg2, int jarg3) {
  MgSnap *arg1 = (MgSnap *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  int arg3 ;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (MgView *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSnapOptions(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSnap_getSnappedType(void * jarg1) {
  int jresult ;
  MgSnap *arg1 = (MgSnap *) 0 ;
  int result;
  
  arg1 = (MgSnap *)jarg1; 
  result = (int)((MgSnap const *)arg1)->getSnappedType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSnap_getSnappedPoint__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  MgSnap *arg1 = (MgSnap *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  int result;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (int)((MgSnap const *)arg1)->getSnappedPoint(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSnap_getSnappedPoint__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  MgSnap *arg1 = (MgSnap *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  int result;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  arg5 = (Point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d & type is null", 0);
    return 0;
  } 
  result = (int)((MgSnap const *)arg1)->getSnappedPoint(*arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSnap_setIgnoreStartPoint(void * jarg1, void * jarg2) {
  MgSnap *arg1 = (MgSnap *) 0 ;
  Point2d *arg2 = 0 ;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (Point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  (arg1)->setIgnoreStartPoint((Point2d const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSnap_snapPoint(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  MgSnap *arg1 = (MgSnap *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d result;
  
  arg1 = (MgSnap *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (arg1)->snapPoint((MgMotion const *)arg2,(Point2d const &)*arg3);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgSelection(void * jarg1) {
  MgSelection *arg1 = (MgSelection *) 0 ;
  
  arg1 = (MgSelection *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSelection_getSelection(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  mgvector< MgShape const * > *arg3 = 0 ;
  int result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  arg3 = (mgvector< MgShape const * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< MgShape const * > & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->getSelection(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSelection_getSelectionForChange(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  mgvector< MgShape * > *arg3 = 0 ;
  int result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  arg3 = (mgvector< MgShape * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< MgShape * > & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->getSelectionForChange(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSelection_getSelectionCount(void * jarg1, void * jarg2) {
  int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  int result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  result = (int)(arg1)->getSelectionCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSelection_getSelectState(void * jarg1, void * jarg2) {
  int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  MgSelState result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  result = (MgSelState)(arg1)->getSelectState(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSelection_getSelectType(void * jarg1, void * jarg2) {
  int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  int result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  result = (int)(arg1)->getSelectType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgSelection_getSelectedHandle(void * jarg1, void * jarg2) {
  int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (int)(arg1)->getSelectedHandle((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgSelection_getSelectedShapeHandle(void * jarg1, void * jarg2) {
  long jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  long result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (long)(arg1)->getSelectedShapeHandle((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_selectAll(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->selectAll((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_deleteSelection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->deleteSelection((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_cloneSelection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->cloneSelection((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_groupSelection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->groupSelection((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_ungroupSelection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->ungroupSelection((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgSelection_resetSelection(void * jarg1, void * jarg2) {
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->resetSelection((MgMotion const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_addSelection(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addSelection((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_deleteVertex(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->deleteVertex((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_insertVertex(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->insertVertex((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_switchClosed(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->switchClosed((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_isFixedLength(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  result = (bool)(arg1)->isFixedLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_setFixedLength(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setFixedLength((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_isLocked(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  result = (bool)(arg1)->isLocked(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_setLocked(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setLocked((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_isEditMode(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  result = (bool)(arg1)->isEditMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_setEditMode(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setEditMode((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_overturnPolygon(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->overturnPolygon((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgSelection_getBoundingBox(void * jarg1, void * jarg2) {
  void * jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Box2d result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (arg1)->getBoundingBox((MgMotion const *)arg2);
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_isSelectedByType(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgView *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isSelectedByType(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgSelection_applyTransform(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgSelection *arg1 = (MgSelection *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Matrix2d *arg3 = 0 ;
  bool result;
  
  arg1 = (MgSelection *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (Matrix2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix2d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->applyTransform((MgMotion const *)arg2,(Matrix2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgView(void * jarg1) {
  MgView *arg1 = (MgView *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgView *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgView *)MgView::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgView_toHandle(void * jarg1) {
  long jresult ;
  MgView *arg1 = (MgView *) 0 ;
  long result;
  
  arg1 = (MgView *)jarg1; 
  result = (long)((MgView const *)arg1)->toHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_motion(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgMotion *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgMotion *)(arg1)->motion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_cmds(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgCmdManager *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgCmdManager *)((MgView const *)arg1)->cmds();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_xform(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  GiTransform *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (GiTransform *)((MgView const *)arg1)->xform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_doc(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShapeDoc *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgShapeDoc *)((MgView const *)arg1)->doc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_shapes(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgShapes *)((MgView const *)arg1)->shapes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_context(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  GiContext *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (GiContext *)((MgView const *)arg1)->context();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_modelTransform(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (Matrix2d *) &((MgView const *)arg1)->modelTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_getShapeFactory(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShapeFactory *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgShapeFactory *)(arg1)->getShapeFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_createShapeCtx__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  int arg2 ;
  GiContext *arg3 = (GiContext *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiContext *)jarg3; 
  result = (MgShape *)(arg1)->createShapeCtx(arg2,(GiContext const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_createShapeCtx__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)(arg1)->createShapeCtx(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_getSnap(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgSnap *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgSnap *)(arg1)->getSnap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_getAction(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgActionDispatcher *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgActionDispatcher *)(arg1)->getAction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_getCmdSubject(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  CmdSubject *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (CmdSubject *)(arg1)->getCmdSubject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_getSelection(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgSelection *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgSelection *)(arg1)->getSelection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_setCurrentShapes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShapes *)jarg2; 
  result = (bool)(arg1)->setCurrentShapes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_toSelectCommand(void * jarg1) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  result = (bool)(arg1)->toSelectCommand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgView_getNewShapeID(void * jarg1) {
  int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  int result;
  
  arg1 = (MgView *)jarg1; 
  result = (int)(arg1)->getNewShapeID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_setNewShapeID(void * jarg1, int jarg2) {
  MgView *arg1 = (MgView *) 0 ;
  int arg2 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNewShapeID(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_getCommand(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgCommand *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgCommand *)(arg1)->getCommand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgView_findCommand(void * jarg1, char * jarg2) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  MgCommand *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (MgCommand *)(arg1)->findCommand((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_setCommand__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setCommand((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_setCommand__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setCommand((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_isReadOnly(void * jarg1) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  result = (bool)((MgView const *)arg1)->isReadOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_isCommand(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->isCommand((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_regenAll(void * jarg1, unsigned int jarg2) {
  MgView *arg1 = (MgView *) 0 ;
  bool arg2 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->regenAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_regenAppend__SWIG_0(void * jarg1, int jarg2, long jarg3) {
  MgView *arg1 = (MgView *) 0 ;
  int arg2 ;
  long arg3 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  (arg1)->regenAppend(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_regenAppend__SWIG_1(void * jarg1, int jarg2) {
  MgView *arg1 = (MgView *) 0 ;
  int arg2 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->regenAppend(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_redraw__SWIG_0(void * jarg1, unsigned int jarg2) {
  MgView *arg1 = (MgView *) 0 ;
  bool arg2 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->redraw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_redraw__SWIG_1(void * jarg1) {
  MgView *arg1 = (MgView *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  (arg1)->redraw();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_useFinger(void * jarg1) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  result = (bool)(arg1)->useFinger();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_commandChanged(void * jarg1) {
  MgView *arg1 = (MgView *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  (arg1)->commandChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_selectionChanged(void * jarg1) {
  MgView *arg1 = (MgView *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  (arg1)->selectionChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_dynamicChanged(void * jarg1) {
  MgView *arg1 = (MgView *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  (arg1)->dynamicChanged();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeWillAdded(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->shapeWillAdded(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_shapeAdded(void * jarg1, void * jarg2) {
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  (arg1)->shapeAdded(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeWillDeleted(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->shapeWillDeleted((MgShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgView_removeShape(void * jarg1, void * jarg2) {
  int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  int result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (int)(arg1)->removeShape((MgShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeCanRotated(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->shapeCanRotated((MgShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeCanTransform(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->shapeCanTransform((MgShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeCanUnlock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->shapeCanUnlock((MgShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeCanUngroup(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->shapeCanUngroup((MgShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeCanMovedHandle(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->shapeCanMovedHandle((MgShape const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_shapeMoved(void * jarg1, void * jarg2, int jarg3) {
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  int arg3 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->shapeMoved(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeWillChanged(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->shapeWillChanged(arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_shapeChanged(void * jarg1, void * jarg2) {
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  (arg1)->shapeChanged(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeDblClick(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  result = (bool)(arg1)->shapeDblClick((MgShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_shapeClicked(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (MgShape *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->shapeClicked((MgShape const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_showMessage(void * jarg1, char * jarg2) {
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->showMessage((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_getLocalizedString(void * jarg1, char * jarg2, void * jarg3) {
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  MgStringCallback *arg3 = (MgStringCallback *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (MgStringCallback *)jarg3; 
  (arg1)->getLocalizedString((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_isContextActionsVisible(void * jarg1) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  result = (bool)(arg1)->isContextActionsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_hideContextActions(void * jarg1) {
  MgView *arg1 = (MgView *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  (arg1)->hideContextActions();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgView_getOptionBool(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->getOptionBool((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgView_getOptionInt(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getOptionInt((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgView_getOptionFloat(void * jarg1, char * jarg2, float jarg3) {
  float jresult ;
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float result;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->getOptionFloat((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_setOptionBool(void * jarg1, char * jarg2, unsigned int jarg3) {
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setOptionBool((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_setOptionInt(void * jarg1, char * jarg2, int jarg3) {
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setOptionInt((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_setOptionFloat(void * jarg1, char * jarg2, float jarg3) {
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setOptionFloat((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgView_setOptionString(void * jarg1, char * jarg2, char * jarg3) {
  MgView *arg1 = (MgView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (MgView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setOptionString((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_view_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (MgView *)jarg2; 
  if (arg1) (arg1)->view = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_view_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  MgView *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (MgView *) ((arg1)->view);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_gestureType_set(void * jarg1, int jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  int arg2 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gestureType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgMotion_gestureType_get(void * jarg1) {
  int jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  int result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (int) ((arg1)->gestureType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_gestureState_set(void * jarg1, int jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  MgGestureState arg2 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (MgGestureState)jarg2; 
  if (arg1) (arg1)->gestureState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgMotion_gestureState_get(void * jarg1) {
  int jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  MgGestureState result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (MgGestureState) ((arg1)->gestureState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_pressDrag_set(void * jarg1, unsigned int jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  bool arg2 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->pressDrag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgMotion_pressDrag_get(void * jarg1) {
  unsigned int jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (bool) ((arg1)->pressDrag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_switchGesture_set(void * jarg1, unsigned int jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  bool arg2 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->switchGesture = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgMotion_switchGesture_get(void * jarg1) {
  unsigned int jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (bool) ((arg1)->switchGesture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_velocity_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Vector2d *arg2 = (Vector2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Vector2d *)jarg2; 
  if (arg1) (arg1)->velocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_velocity_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Vector2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Vector2d *)& ((arg1)->velocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_startPt_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->startPt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_startPt_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->startPt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_startPtM_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->startPtM = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_startPtM_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->startPtM);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_lastPt_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->lastPt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_lastPt_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->lastPt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_lastPtM_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->lastPtM = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_lastPtM_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->lastPtM);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_point_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->point = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_point_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->point);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_pointM_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->pointM = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_pointM_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->pointM);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_startPt2_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->startPt2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_startPt2_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->startPt2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_startPt2M_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->startPt2M = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_startPt2M_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->startPt2M);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_point2_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->point2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_point2_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->point2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_point2M_set(void * jarg1, void * jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *arg2 = (Point2d *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (Point2d *)jarg2; 
  if (arg1) (arg1)->point2M = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_point2M_get(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (Point2d *)& ((arg1)->point2M);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_d2mgs_set(void * jarg1, float jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  float arg2 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->d2mgs = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgMotion_d2mgs_get(void * jarg1) {
  float jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  float result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (float) ((arg1)->d2mgs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgMotion_d2m_set(void * jarg1, float jarg2) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  float arg2 ;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->d2m = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgMotion_d2m_get(void * jarg1) {
  float jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  float result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (float) ((arg1)->d2m);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgMotion() {
  void * jresult ;
  MgMotion *result = 0 ;
  
  result = (MgMotion *)new MgMotion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgMotion_dragging(void * jarg1) {
  unsigned int jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (bool)((MgMotion const *)arg1)->dragging();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_cmds(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  MgCmdManager *result = 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  result = (MgCmdManager *)((MgMotion const *)arg1)->cmds();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_startCenterM(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d result;
  
  arg1 = (MgMotion *)jarg1; 
  result = ((MgMotion const *)arg1)->startCenterM();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_centerM(void * jarg1) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  Point2d result;
  
  arg1 = (MgMotion *)jarg1; 
  result = ((MgMotion const *)arg1)->centerM();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgMotion_startDistanceM(void * jarg1) {
  float jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  float result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (float)((MgMotion const *)arg1)->startDistanceM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgMotion_distanceM(void * jarg1) {
  float jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  float result;
  
  arg1 = (MgMotion *)jarg1; 
  result = (float)((MgMotion const *)arg1)->distanceM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgMotion_displayMmToModel__SWIG_0(void * jarg1, float jarg2, void * jarg3) {
  float jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  float arg2 ;
  GiGraphics *arg3 = (GiGraphics *) 0 ;
  float result;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (GiGraphics *)jarg3; 
  result = (float)((MgMotion const *)arg1)->displayMmToModel(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgMotion_displayMmToModel__SWIG_1(void * jarg1, float jarg2) {
  float jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)((MgMotion const *)arg1)->displayMmToModel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgMotion_displayMmToModel__SWIG_2(void * jarg1, char * jarg2, float jarg3) {
  float jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float result;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)((MgMotion const *)arg1)->displayMmToModel((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_displayMmToModelBox__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  float arg2 ;
  Box2d result;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((MgMotion const *)arg1)->displayMmToModelBox(arg2);
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgMotion_displayMmToModelBox__SWIG_1(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  MgMotion *arg1 = (MgMotion *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  Box2d result;
  
  arg1 = (MgMotion *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = ((MgMotion const *)arg1)->displayMmToModelBox((char const *)arg2,arg3);
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgMotion(void * jarg1) {
  MgMotion *arg1 = (MgMotion *) 0 ;
  
  arg1 = (MgMotion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCommand(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MgCommand *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (MgCommand *)new SwigDirector_MgCommand((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCommand(void * jarg1) {
  MgCommand *arg1 = (MgCommand *) 0 ;
  
  arg1 = (MgCommand *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCommand_release(void * jarg1) {
  MgCommand *arg1 = (MgCommand *) 0 ;
  
  arg1 = (MgCommand *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_cancel(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->cancel((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_cancelSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::cancel((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_initialize(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->initialize((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_initializeSwigExplicitMgCommand(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->MgCommand::initialize((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_backStep(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->backStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_backStepSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::backStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_draw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  GiGraphics *arg3 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (GiGraphics *)jarg3; 
  result = (bool)(arg1)->draw((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_gatherShapes(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShapes *arg3 = (MgShapes *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShapes *)jarg3; 
  result = (bool)(arg1)->gatherShapes((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_gatherShapesSwigExplicitMgCommand(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShapes *arg3 = (MgShapes *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShapes *)jarg3; 
  result = (bool)(arg1)->MgCommand::gatherShapes((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_click(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->click((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_clickSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::click((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_doubleClick(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->doubleClick((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_doubleClickSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::doubleClick((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_longPress(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->longPress((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_longPressSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::longPress((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_touchBegan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchBegan((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_touchBeganSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::touchBegan((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_touchMoved(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchMoved((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_touchMovedSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::touchMoved((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_touchEnded(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchEnded((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_touchEndedSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::touchEnded((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_mouseHover(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->mouseHover((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_mouseHoverSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::mouseHover((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_twoFingersMove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->twoFingersMove((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_twoFingersMoveSwigExplicitMgCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommand::twoFingersMove((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_isDrawingCommand(void * jarg1) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  result = (bool)(arg1)->isDrawingCommand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_isDrawingCommandSwigExplicitMgCommand(void * jarg1) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  result = (bool)(arg1)->MgCommand::isDrawingCommand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_isFloatingCommand(void * jarg1) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  result = (bool)(arg1)->isFloatingCommand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_isFloatingCommandSwigExplicitMgCommand(void * jarg1) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  result = (bool)(arg1)->MgCommand::isFloatingCommand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_doContextAction(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->doContextAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommand_doContextActionSwigExplicitMgCommand(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgCommand *arg1 = (MgCommand *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgCommand *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->MgCommand::doContextAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCommand_director_connect(void *objarg, SwigDirector_MgCommand::SWIG_Callback0_t callback0, SwigDirector_MgCommand::SWIG_Callback1_t callback1, SwigDirector_MgCommand::SWIG_Callback2_t callback2, SwigDirector_MgCommand::SWIG_Callback3_t callback3, SwigDirector_MgCommand::SWIG_Callback4_t callback4, SwigDirector_MgCommand::SWIG_Callback5_t callback5, SwigDirector_MgCommand::SWIG_Callback6_t callback6, SwigDirector_MgCommand::SWIG_Callback7_t callback7, SwigDirector_MgCommand::SWIG_Callback8_t callback8, SwigDirector_MgCommand::SWIG_Callback9_t callback9, SwigDirector_MgCommand::SWIG_Callback10_t callback10, SwigDirector_MgCommand::SWIG_Callback11_t callback11, SwigDirector_MgCommand::SWIG_Callback12_t callback12, SwigDirector_MgCommand::SWIG_Callback13_t callback13, SwigDirector_MgCommand::SWIG_Callback14_t callback14, SwigDirector_MgCommand::SWIG_Callback15_t callback15, SwigDirector_MgCommand::SWIG_Callback16_t callback16) {
  MgCommand *obj = (MgCommand *)objarg;
  SwigDirector_MgCommand *director = dynamic_cast<SwigDirector_MgCommand *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CmdObserver(void * jarg1) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onDocLoaded(void * jarg1, void * jarg2, unsigned int jarg3) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool arg3 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->onDocLoaded((MgMotion const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onEnterSelectCommand(void * jarg1, void * jarg2) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->onEnterSelectCommand((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onUnloadCommands(void * jarg1, void * jarg2) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgCmdManager *arg2 = (MgCmdManager *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgCmdManager *)jarg2; 
  (arg1)->onUnloadCommands(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_selectActionsNeedHided(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->selectActionsNeedHided((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CmdObserver_addShapeActions(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  mgvector< int > *arg3 = 0 ;
  int arg4 ;
  MgShape *arg5 = (MgShape *) 0 ;
  int result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (mgvector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (MgShape *)jarg5; 
  result = (int)(arg1)->addShapeActions((MgMotion const *)arg2,*arg3,arg4,(MgShape const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_doAction(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->doAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_doEndAction(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->doEndAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_drawInShapeCommand(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgCommand *arg3 = (MgCommand *) 0 ;
  GiGraphics *arg4 = (GiGraphics *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgCommand *)jarg3; 
  arg4 = (GiGraphics *)jarg4; 
  (arg1)->drawInShapeCommand((MgMotion const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_drawInSelectCommand(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  GiGraphics *arg5 = (GiGraphics *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (GiGraphics *)jarg5; 
  (arg1)->drawInSelectCommand((MgMotion const *)arg2,(MgShape const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onSelectionChanged(void * jarg1, void * jarg2) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->onSelectionChanged((MgMotion const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onShapeWillAdded(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeWillAdded((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onShapeAdded(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->onShapeAdded((MgMotion const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onShapeWillDeleted(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeWillDeleted((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CmdObserver_onShapeDeleted(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (int)(arg1)->onShapeDeleted((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onShapeCanRotated(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeCanRotated((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onShapeCanTransform(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeCanTransform((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onShapeCanUnlock(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeCanUnlock((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onShapeCanUngroup(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeCanUngroup((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onShapeCanMovedHandle(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->onShapeCanMovedHandle((MgMotion const *)arg2,(MgShape const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onShapeMoved(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->onShapeMoved((MgMotion const *)arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onShapeWillChanged(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  MgShape *arg4 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (MgShape *)jarg4; 
  result = (bool)(arg1)->onShapeWillChanged((MgMotion const *)arg2,arg3,(MgShape const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onShapeChanged(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->onShapeChanged((MgMotion const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CmdObserver_createShape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  MgBaseShape *result = 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (MgBaseShape *)(arg1)->createShape((MgMotion const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CmdObserver_createCommand(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  char *arg3 = (char *) 0 ;
  MgCommand *result = 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (MgCommand *)(arg1)->createCommand((MgMotion const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserver_onPreGesture(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->onPreGesture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onPostGesture(void * jarg1, void * jarg2) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->onPostGesture((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserver_onPointSnapped(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserver *arg1 = (CmdObserver *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserver *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->onPointSnapped((MgMotion const *)arg2,(MgShape const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CmdObserverDefault() {
  void * jresult ;
  CmdObserverDefault *result = 0 ;
  
  result = (CmdObserverDefault *)new SwigDirector_CmdObserverDefault();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CmdObserverDefault(void * jarg1) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onDocLoaded(void * jarg1, void * jarg2, unsigned int jarg3) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool arg3 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->onDocLoaded((MgMotion const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onDocLoadedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, unsigned int jarg3) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool arg3 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->CmdObserverDefault::onDocLoaded((MgMotion const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onEnterSelectCommand(void * jarg1, void * jarg2) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->onEnterSelectCommand((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onEnterSelectCommandSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->CmdObserverDefault::onEnterSelectCommand((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onUnloadCommands(void * jarg1, void * jarg2) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgCmdManager *arg2 = (MgCmdManager *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgCmdManager *)jarg2; 
  (arg1)->onUnloadCommands(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onUnloadCommandsSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgCmdManager *arg2 = (MgCmdManager *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgCmdManager *)jarg2; 
  (arg1)->CmdObserverDefault::onUnloadCommands(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_selectActionsNeedHided(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->selectActionsNeedHided((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_selectActionsNeedHidedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->CmdObserverDefault::selectActionsNeedHided((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_doAction(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->doAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_doActionSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->CmdObserverDefault::doAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_doEndAction(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->doEndAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_doEndActionSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->CmdObserverDefault::doEndAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_drawInShapeCommand(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgCommand *arg3 = (MgCommand *) 0 ;
  GiGraphics *arg4 = (GiGraphics *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgCommand *)jarg3; 
  arg4 = (GiGraphics *)jarg4; 
  (arg1)->drawInShapeCommand((MgMotion const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_drawInShapeCommandSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgCommand *arg3 = (MgCommand *) 0 ;
  GiGraphics *arg4 = (GiGraphics *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgCommand *)jarg3; 
  arg4 = (GiGraphics *)jarg4; 
  (arg1)->CmdObserverDefault::drawInShapeCommand((MgMotion const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_drawInSelectCommand(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  GiGraphics *arg5 = (GiGraphics *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (GiGraphics *)jarg5; 
  (arg1)->drawInSelectCommand((MgMotion const *)arg2,(MgShape const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_drawInSelectCommandSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  GiGraphics *arg5 = (GiGraphics *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (GiGraphics *)jarg5; 
  (arg1)->CmdObserverDefault::drawInSelectCommand((MgMotion const *)arg2,(MgShape const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onSelectionChanged(void * jarg1, void * jarg2) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->onSelectionChanged((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onSelectionChangedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->CmdObserverDefault::onSelectionChanged((MgMotion const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeWillAdded(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeWillAdded((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeWillAddedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->CmdObserverDefault::onShapeWillAdded((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onShapeAdded(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->onShapeAdded((MgMotion const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onShapeAddedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->CmdObserverDefault::onShapeAdded((MgMotion const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeWillDeleted(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeWillDeleted((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeWillDeletedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->CmdObserverDefault::onShapeWillDeleted((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeDeleted(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (int)(arg1)->onShapeDeleted((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeDeletedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (int)(arg1)->CmdObserverDefault::onShapeDeleted((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanRotated(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeCanRotated((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanRotatedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->CmdObserverDefault::onShapeCanRotated((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanTransform(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeCanTransform((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanTransformSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->CmdObserverDefault::onShapeCanTransform((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanUnlock(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeCanUnlock((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanUnlockSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->CmdObserverDefault::onShapeCanUnlock((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanUngroup(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->onShapeCanUngroup((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanUngroupSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (bool)(arg1)->CmdObserverDefault::onShapeCanUngroup((MgMotion const *)arg2,(MgShape const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanMovedHandle(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->onShapeCanMovedHandle((MgMotion const *)arg2,(MgShape const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeCanMovedHandleSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->CmdObserverDefault::onShapeCanMovedHandle((MgMotion const *)arg2,(MgShape const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onShapeMoved(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->onShapeMoved((MgMotion const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onShapeMovedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  int arg4 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->CmdObserverDefault::onShapeMoved((MgMotion const *)arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeWillChanged(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  MgShape *arg4 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (MgShape *)jarg4; 
  result = (bool)(arg1)->onShapeWillChanged((MgMotion const *)arg2,arg3,(MgShape const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onShapeWillChangedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  MgShape *arg4 = (MgShape *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  arg4 = (MgShape *)jarg4; 
  result = (bool)(arg1)->CmdObserverDefault::onShapeWillChanged((MgMotion const *)arg2,arg3,(MgShape const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onShapeChanged(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->onShapeChanged((MgMotion const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onShapeChangedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->CmdObserverDefault::onShapeChanged((MgMotion const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CmdObserverDefault_createShape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  MgBaseShape *result = 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (MgBaseShape *)(arg1)->createShape((MgMotion const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CmdObserverDefault_createShapeSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  MgBaseShape *result = 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (MgBaseShape *)(arg1)->CmdObserverDefault::createShape((MgMotion const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CmdObserverDefault_createCommand(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  char *arg3 = (char *) 0 ;
  MgCommand *result = 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (MgCommand *)(arg1)->createCommand((MgMotion const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CmdObserverDefault_createCommandSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  char *arg3 = (char *) 0 ;
  MgCommand *result = 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (MgCommand *)(arg1)->CmdObserverDefault::createCommand((MgMotion const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CmdObserverDefault_addShapeActions(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  mgvector< int > *arg3 = 0 ;
  int arg4 ;
  MgShape *arg5 = (MgShape *) 0 ;
  int result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (mgvector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (MgShape *)jarg5; 
  result = (int)(arg1)->addShapeActions((MgMotion const *)arg2,*arg3,arg4,(MgShape const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CmdObserverDefault_addShapeActionsSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  mgvector< int > *arg3 = 0 ;
  int arg4 ;
  MgShape *arg5 = (MgShape *) 0 ;
  int result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (mgvector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (MgShape *)jarg5; 
  result = (int)(arg1)->CmdObserverDefault::addShapeActions((MgMotion const *)arg2,*arg3,arg4,(MgShape const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onPreGesture(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->onPreGesture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdObserverDefault_onPreGestureSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->CmdObserverDefault::onPreGesture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onPostGesture(void * jarg1, void * jarg2) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->onPostGesture((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onPostGestureSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  (arg1)->CmdObserverDefault::onPostGesture((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onPointSnapped(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->onPointSnapped((MgMotion const *)arg2,(MgShape const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_onPointSnappedSwigExplicitCmdObserverDefault(void * jarg1, void * jarg2, void * jarg3) {
  CmdObserverDefault *arg1 = (CmdObserverDefault *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  
  arg1 = (CmdObserverDefault *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  (arg1)->CmdObserverDefault::onPointSnapped((MgMotion const *)arg2,(MgShape const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdObserverDefault_director_connect(void *objarg, SwigDirector_CmdObserverDefault::SWIG_Callback0_t callback0, SwigDirector_CmdObserverDefault::SWIG_Callback1_t callback1, SwigDirector_CmdObserverDefault::SWIG_Callback2_t callback2, SwigDirector_CmdObserverDefault::SWIG_Callback3_t callback3, SwigDirector_CmdObserverDefault::SWIG_Callback4_t callback4, SwigDirector_CmdObserverDefault::SWIG_Callback5_t callback5, SwigDirector_CmdObserverDefault::SWIG_Callback6_t callback6, SwigDirector_CmdObserverDefault::SWIG_Callback7_t callback7, SwigDirector_CmdObserverDefault::SWIG_Callback8_t callback8, SwigDirector_CmdObserverDefault::SWIG_Callback9_t callback9, SwigDirector_CmdObserverDefault::SWIG_Callback10_t callback10, SwigDirector_CmdObserverDefault::SWIG_Callback11_t callback11, SwigDirector_CmdObserverDefault::SWIG_Callback12_t callback12, SwigDirector_CmdObserverDefault::SWIG_Callback13_t callback13, SwigDirector_CmdObserverDefault::SWIG_Callback14_t callback14, SwigDirector_CmdObserverDefault::SWIG_Callback15_t callback15, SwigDirector_CmdObserverDefault::SWIG_Callback16_t callback16, SwigDirector_CmdObserverDefault::SWIG_Callback17_t callback17, SwigDirector_CmdObserverDefault::SWIG_Callback18_t callback18, SwigDirector_CmdObserverDefault::SWIG_Callback19_t callback19, SwigDirector_CmdObserverDefault::SWIG_Callback20_t callback20, SwigDirector_CmdObserverDefault::SWIG_Callback21_t callback21, SwigDirector_CmdObserverDefault::SWIG_Callback22_t callback22, SwigDirector_CmdObserverDefault::SWIG_Callback23_t callback23, SwigDirector_CmdObserverDefault::SWIG_Callback24_t callback24, SwigDirector_CmdObserverDefault::SWIG_Callback25_t callback25, SwigDirector_CmdObserverDefault::SWIG_Callback26_t callback26) {
  CmdObserverDefault *obj = (CmdObserverDefault *)objarg;
  SwigDirector_CmdObserverDefault *director = dynamic_cast<SwigDirector_CmdObserverDefault *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdSubject_registerObserver(void * jarg1, void * jarg2) {
  CmdSubject *arg1 = (CmdSubject *) 0 ;
  CmdObserver *arg2 = (CmdObserver *) 0 ;
  
  arg1 = (CmdSubject *)jarg1; 
  arg2 = (CmdObserver *)jarg2; 
  (arg1)->registerObserver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CmdSubject_unregisterObserver(void * jarg1, void * jarg2) {
  CmdSubject *arg1 = (CmdSubject *) 0 ;
  CmdObserver *arg2 = (CmdObserver *) 0 ;
  
  arg1 = (CmdSubject *)jarg1; 
  arg2 = (CmdObserver *)jarg2; 
  (arg1)->unregisterObserver(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CmdSubject_registerNamedObserver(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  CmdSubject *arg1 = (CmdSubject *) 0 ;
  char *arg2 = (char *) 0 ;
  CmdObserver *arg3 = (CmdObserver *) 0 ;
  bool result;
  
  arg1 = (CmdSubject *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (CmdObserver *)jarg3; 
  result = (bool)(arg1)->registerNamedObserver((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CmdSubject_findNamedObserver(void * jarg1, char * jarg2) {
  void * jresult ;
  CmdSubject *arg1 = (CmdSubject *) 0 ;
  char *arg2 = (char *) 0 ;
  CmdObserver *result = 0 ;
  
  arg1 = (CmdSubject *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (CmdObserver *)(arg1)->findNamedObserver((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CmdSubject(void * jarg1) {
  CmdSubject *arg1 = (CmdSubject *) 0 ;
  
  arg1 = (CmdSubject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCommandDraw(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MgCommandDraw *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (MgCommandDraw *)new SwigDirector_MgCommandDraw((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCommandDraw(void * jarg1) {
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  
  arg1 = (MgCommandDraw *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_addShape__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *arg3 = (MgShape *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShape *)jarg3; 
  result = (MgShape *)(arg1)->addShape((MgMotion const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_addShape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (MgShape *)(arg1)->addShape((MgMotion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchBeganStep(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchBeganStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchMovedStep(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchMovedStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchEndedStep(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchEndedStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCommandDraw_getShapeType(void * jarg1) {
  int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  int result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  result = (int)(arg1)->getShapeType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCommandDraw_getShapeTypeSwigExplicitMgCommandDraw(void * jarg1) {
  int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  int result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  result = (int)(arg1)->MgCommandDraw::getShapeType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCommandDraw_ignoreStartPoint(void * jarg1, void * jarg2, int jarg3) {
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ignoreStartPoint((MgMotion const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCommandDraw_getSnappedType(void * jarg1, void * jarg2) {
  int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (int)((MgCommandDraw const *)arg1)->getSnappedType((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_getLastSnappedPoint() {
  void * jresult ;
  Point2d result;
  
  result = MgCommandDraw::getLastSnappedPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_getLastSnappedOriginPoint() {
  void * jresult ;
  Point2d result;
  
  result = MgCommandDraw::getLastSnappedOriginPoint();
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCommandDraw_getMaxStep(void * jarg1) {
  int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  SwigDirector_MgCommandDraw *darg = 0;
  int result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  darg = dynamic_cast<SwigDirector_MgCommandDraw *>(arg1);
  result = (int)(darg)->getMaxStep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCommandDraw_getMaxStepSwigExplicitMgCommandDraw(void * jarg1) {
  int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  SwigDirector_MgCommandDraw *darg = 0;
  int result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  darg = dynamic_cast<SwigDirector_MgCommandDraw *>(arg1);
  result = (int)(darg)->getMaxStepSwigPublic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCommandDraw_setStepPoint(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  Point2d *arg4 = 0 ;
  SwigDirector_MgCommandDraw *darg = 0;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_MgCommandDraw *>(arg1);
  (darg)->setStepPoint((MgMotion const *)arg2,arg3,(Point2d const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCommandDraw_setStepPointSwigExplicitMgCommandDraw(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  Point2d *arg4 = 0 ;
  SwigDirector_MgCommandDraw *darg = 0;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_MgCommandDraw *>(arg1);
  (darg)->setStepPointSwigPublic((MgMotion const *)arg2,arg3,(Point2d const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_isStepPointAccepted(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Point2d *arg3 = 0 ;
  SwigDirector_MgCommandDraw *darg = 0;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_MgCommandDraw *>(arg1);
  result = (bool)(darg)->isStepPointAccepted((MgMotion const *)arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_isStepPointAcceptedSwigExplicitMgCommandDraw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Point2d *arg3 = 0 ;
  SwigDirector_MgCommandDraw *darg = 0;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_MgCommandDraw *>(arg1);
  result = (bool)(darg)->isStepPointAcceptedSwigPublic((MgMotion const *)arg2,(Point2d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCommandDraw_snapOptionsForStep(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  SwigDirector_MgCommandDraw *darg = 0;
  int result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  darg = dynamic_cast<SwigDirector_MgCommandDraw *>(arg1);
  result = (int)(darg)->snapOptionsForStep((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCommandDraw_snapOptionsForStepSwigExplicitMgCommandDraw(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  SwigDirector_MgCommandDraw *darg = 0;
  int result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  darg = dynamic_cast<SwigDirector_MgCommandDraw *>(arg1);
  result = (int)(darg)->snapOptionsForStepSwigPublic((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_initialize(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->initialize((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_initializeSwigExplicitMgCommandDraw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->MgCommandDraw::initialize((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_backStep(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->backStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_backStepSwigExplicitMgCommandDraw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommandDraw::backStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_cancel(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->cancel((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_cancelSwigExplicitMgCommandDraw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommandDraw::cancel((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_draw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  GiGraphics *arg3 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (GiGraphics *)jarg3; 
  result = (bool)(arg1)->draw((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_drawSwigExplicitMgCommandDraw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  GiGraphics *arg3 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (GiGraphics *)jarg3; 
  result = (bool)(arg1)->MgCommandDraw::draw((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_gatherShapes(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShapes *arg3 = (MgShapes *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShapes *)jarg3; 
  result = (bool)(arg1)->gatherShapes((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_gatherShapesSwigExplicitMgCommandDraw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgShapes *arg3 = (MgShapes *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgShapes *)jarg3; 
  result = (bool)(arg1)->MgCommandDraw::gatherShapes((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchBegan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchBegan((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchBeganSwigExplicitMgCommandDraw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommandDraw::touchBegan((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchMoved(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchMoved((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchMovedSwigExplicitMgCommandDraw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommandDraw::touchMoved((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchEnded(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchEnded((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_touchEndedSwigExplicitMgCommandDraw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommandDraw::touchEnded((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_click(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->click((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_clickSwigExplicitMgCommandDraw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommandDraw::click((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_longPress(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->longPress((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_longPressSwigExplicitMgCommandDraw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommandDraw::longPress((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_mouseHover(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->mouseHover((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCommandDraw_mouseHoverSwigExplicitMgCommandDraw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCommandDraw::mouseHover((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCommandDraw_getStep(void * jarg1) {
  int jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  int result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  result = (int)(arg1)->getStep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_dynshape(void * jarg1) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgCommandDraw *)jarg1; 
  result = (MgShape *)(arg1)->dynshape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCommandDraw_setStep(void * jarg1, int jarg2) {
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  int arg2 ;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStep(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_snapPointWidhOptions__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool arg4 ;
  Point2d result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->snapPointWidhOptions((MgMotion const *)arg2,arg3,arg4);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_snapPointWidhOptions__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  Point2d result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->snapPointWidhOptions((MgMotion const *)arg2,arg3);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_snapPoint__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool arg3 ;
  Point2d result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->snapPoint((MgMotion const *)arg2,arg3);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_snapPoint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Point2d result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (arg1)->snapPoint((MgMotion const *)arg2);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_snapPoint__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Point2d *arg3 = 0 ;
  bool arg4 ;
  Point2d result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->snapPoint((MgMotion const *)arg2,(Point2d const &)*arg3,arg4);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_snapPoint__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  result = (arg1)->snapPoint((MgMotion const *)arg2,(Point2d const &)*arg3);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCommandDraw_snapPoint__SWIG_4(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  MgCommandDraw *arg1 = (MgCommandDraw *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  Point2d *arg3 = 0 ;
  bool arg4 ;
  int arg5 ;
  Point2d result;
  
  arg1 = (MgCommandDraw *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (Point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point2d const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  result = (arg1)->snapPoint((MgMotion const *)arg2,(Point2d const &)*arg3,arg4,arg5);
  jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCommandDraw_director_connect(void *objarg, SwigDirector_MgCommandDraw::SWIG_Callback0_t callback0, SwigDirector_MgCommandDraw::SWIG_Callback1_t callback1, SwigDirector_MgCommandDraw::SWIG_Callback2_t callback2, SwigDirector_MgCommandDraw::SWIG_Callback3_t callback3, SwigDirector_MgCommandDraw::SWIG_Callback4_t callback4, SwigDirector_MgCommandDraw::SWIG_Callback5_t callback5, SwigDirector_MgCommandDraw::SWIG_Callback6_t callback6, SwigDirector_MgCommandDraw::SWIG_Callback7_t callback7, SwigDirector_MgCommandDraw::SWIG_Callback8_t callback8, SwigDirector_MgCommandDraw::SWIG_Callback9_t callback9, SwigDirector_MgCommandDraw::SWIG_Callback10_t callback10, SwigDirector_MgCommandDraw::SWIG_Callback11_t callback11, SwigDirector_MgCommandDraw::SWIG_Callback12_t callback12, SwigDirector_MgCommandDraw::SWIG_Callback13_t callback13, SwigDirector_MgCommandDraw::SWIG_Callback14_t callback14, SwigDirector_MgCommandDraw::SWIG_Callback15_t callback15, SwigDirector_MgCommandDraw::SWIG_Callback16_t callback16, SwigDirector_MgCommandDraw::SWIG_Callback17_t callback17, SwigDirector_MgCommandDraw::SWIG_Callback18_t callback18, SwigDirector_MgCommandDraw::SWIG_Callback19_t callback19, SwigDirector_MgCommandDraw::SWIG_Callback20_t callback20, SwigDirector_MgCommandDraw::SWIG_Callback21_t callback21) {
  MgCommandDraw *obj = (MgCommandDraw *)objarg;
  SwigDirector_MgCommandDraw *director = dynamic_cast<SwigDirector_MgCommandDraw *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdArc3P__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MgCmdArc3P *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (MgCmdArc3P *)new MgCmdArc3P((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdArc3P__SWIG_1() {
  void * jresult ;
  MgCmdArc3P *result = 0 ;
  
  result = (MgCmdArc3P *)new MgCmdArc3P();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdArc3P_release(void * jarg1) {
  MgCmdArc3P *arg1 = (MgCmdArc3P *) 0 ;
  
  arg1 = (MgCmdArc3P *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdArc3P_touchBegan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdArc3P *arg1 = (MgCmdArc3P *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdArc3P *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchBegan((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdArc3P_touchMoved(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdArc3P *arg1 = (MgCmdArc3P *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdArc3P *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchMoved((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdArc3P_touchEnded(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdArc3P *arg1 = (MgCmdArc3P *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdArc3P *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchEnded((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdArc3P_initialize(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCmdArc3P *arg1 = (MgCmdArc3P *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCmdArc3P *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->initialize((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdArc3P_draw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCmdArc3P *arg1 = (MgCmdArc3P *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  GiGraphics *arg3 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (MgCmdArc3P *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (GiGraphics *)jarg3; 
  result = (bool)(arg1)->draw((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCmdArc3P(void * jarg1) {
  MgCmdArc3P *arg1 = (MgCmdArc3P *) 0 ;
  
  arg1 = (MgCmdArc3P *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdArcCSE__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MgCmdArcCSE *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (MgCmdArcCSE *)new MgCmdArcCSE((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdArcCSE__SWIG_1() {
  void * jresult ;
  MgCmdArcCSE *result = 0 ;
  
  result = (MgCmdArcCSE *)new MgCmdArcCSE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdArcCSE_release(void * jarg1) {
  MgCmdArcCSE *arg1 = (MgCmdArcCSE *) 0 ;
  
  arg1 = (MgCmdArcCSE *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdArcCSE_initialize(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCmdArcCSE *arg1 = (MgCmdArcCSE *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCmdArcCSE *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->initialize((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdArcCSE_draw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCmdArcCSE *arg1 = (MgCmdArcCSE *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  GiGraphics *arg3 = (GiGraphics *) 0 ;
  bool result;
  
  arg1 = (MgCmdArcCSE *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (GiGraphics *)jarg3; 
  result = (bool)(arg1)->draw((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdArcCSE_click(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdArcCSE *arg1 = (MgCmdArcCSE *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdArcCSE *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->click((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCmdArcCSE(void * jarg1) {
  MgCmdArcCSE *arg1 = (MgCmdArcCSE *) 0 ;
  
  arg1 = (MgCmdArcCSE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdArcTan__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MgCmdArcTan *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (MgCmdArcTan *)new MgCmdArcTan((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdArcTan__SWIG_1() {
  void * jresult ;
  MgCmdArcTan *result = 0 ;
  
  result = (MgCmdArcTan *)new MgCmdArcTan();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdArcTan_release(void * jarg1) {
  MgCmdArcTan *arg1 = (MgCmdArcTan *) 0 ;
  
  arg1 = (MgCmdArcTan *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCmdArcTan(void * jarg1) {
  MgCmdArcTan *arg1 = (MgCmdArcTan *) 0 ;
  
  arg1 = (MgCmdArcTan *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdDrawRect__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MgCmdDrawRect *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (MgCmdDrawRect *)new SwigDirector_MgCmdDrawRect((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdDrawRect__SWIG_1() {
  void * jresult ;
  MgCmdDrawRect *result = 0 ;
  
  result = (MgCmdDrawRect *)new SwigDirector_MgCmdDrawRect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdDrawRect_release(void * jarg1) {
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdDrawRect_releaseSwigExplicitMgCmdDrawRect(void * jarg1) {
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  (arg1)->MgCmdDrawRect::release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_initialize(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->initialize((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_initializeSwigExplicitMgCmdDrawRect(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->MgCmdDrawRect::initialize((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_backStep(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->backStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_backStepSwigExplicitMgCmdDrawRect(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCmdDrawRect::backStep((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_touchBegan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchBegan((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_touchBeganSwigExplicitMgCmdDrawRect(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCmdDrawRect::touchBegan((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_touchMoved(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchMoved((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_touchMovedSwigExplicitMgCmdDrawRect(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCmdDrawRect::touchMoved((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_touchEnded(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->touchEnded((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdDrawRect_touchEndedSwigExplicitMgCmdDrawRect(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->MgCmdDrawRect::touchEnded((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdDrawRect_addRectShape(void * jarg1, void * jarg2) {
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  SwigDirector_MgCmdDrawRect *darg = 0;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  darg = dynamic_cast<SwigDirector_MgCmdDrawRect *>(arg1);
  (darg)->addRectShape((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdDrawRect_addRectShapeSwigExplicitMgCmdDrawRect(void * jarg1, void * jarg2) {
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  SwigDirector_MgCmdDrawRect *darg = 0;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  darg = dynamic_cast<SwigDirector_MgCmdDrawRect *>(arg1);
  (darg)->addRectShapeSwigPublic((MgMotion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCmdDrawRect(void * jarg1) {
  MgCmdDrawRect *arg1 = (MgCmdDrawRect *) 0 ;
  
  arg1 = (MgCmdDrawRect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdDrawRect_director_connect(void *objarg, SwigDirector_MgCmdDrawRect::SWIG_Callback0_t callback0, SwigDirector_MgCmdDrawRect::SWIG_Callback1_t callback1, SwigDirector_MgCmdDrawRect::SWIG_Callback2_t callback2, SwigDirector_MgCmdDrawRect::SWIG_Callback3_t callback3, SwigDirector_MgCmdDrawRect::SWIG_Callback4_t callback4, SwigDirector_MgCmdDrawRect::SWIG_Callback5_t callback5, SwigDirector_MgCmdDrawRect::SWIG_Callback6_t callback6, SwigDirector_MgCmdDrawRect::SWIG_Callback7_t callback7, SwigDirector_MgCmdDrawRect::SWIG_Callback8_t callback8, SwigDirector_MgCmdDrawRect::SWIG_Callback9_t callback9, SwigDirector_MgCmdDrawRect::SWIG_Callback10_t callback10, SwigDirector_MgCmdDrawRect::SWIG_Callback11_t callback11, SwigDirector_MgCmdDrawRect::SWIG_Callback12_t callback12, SwigDirector_MgCmdDrawRect::SWIG_Callback13_t callback13, SwigDirector_MgCmdDrawRect::SWIG_Callback14_t callback14, SwigDirector_MgCmdDrawRect::SWIG_Callback15_t callback15, SwigDirector_MgCmdDrawRect::SWIG_Callback16_t callback16, SwigDirector_MgCmdDrawRect::SWIG_Callback17_t callback17, SwigDirector_MgCmdDrawRect::SWIG_Callback18_t callback18, SwigDirector_MgCmdDrawRect::SWIG_Callback19_t callback19, SwigDirector_MgCmdDrawRect::SWIG_Callback20_t callback20, SwigDirector_MgCmdDrawRect::SWIG_Callback21_t callback21, SwigDirector_MgCmdDrawRect::SWIG_Callback22_t callback22) {
  MgCmdDrawRect *obj = (MgCmdDrawRect *)objarg;
  SwigDirector_MgCmdDrawRect *director = dynamic_cast<SwigDirector_MgCmdDrawRect *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCmdManager(void * jarg1) {
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdManager_release(void * jarg1) {
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManager_getCommand(void * jarg1) {
  void * jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgCommand *result = 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  result = (MgCommand *)((MgCmdManager const *)arg1)->getCommand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManager_findCommand(void * jarg1, char * jarg2) {
  void * jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  char *arg2 = (char *) 0 ;
  MgCommand *result = 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (MgCommand *)(arg1)->findCommand((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdManager_setCommand(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  char *arg3 = (char *) 0 ;
  MgStorage *arg4 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (MgStorage *)jarg4; 
  result = (bool)(arg1)->setCommand((MgMotion const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdManager_switchCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->switchCommand((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdManager_cancel(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  bool result;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  result = (bool)(arg1)->cancel((MgMotion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdManager_unloadCommands(void * jarg1) {
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  (arg1)->unloadCommands();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCmdManager_getNewShapeID(void * jarg1) {
  int jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  int result;
  
  arg1 = (MgCmdManager *)jarg1; 
  result = (int)((MgCmdManager const *)arg1)->getNewShapeID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdManager_setNewShapeID(void * jarg1, int jarg2) {
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  int arg2 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNewShapeID(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgCmdManager_displayMmToModel__SWIG_0(void * jarg1, float jarg2, void * jarg3) {
  float jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  float arg2 ;
  GiGraphics *arg3 = (GiGraphics *) 0 ;
  float result;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (GiGraphics *)jarg3; 
  result = (float)((MgCmdManager const *)arg1)->displayMmToModel(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgCmdManager_displayMmToModel__SWIG_1(void * jarg1, float jarg2, void * jarg3) {
  float jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  float arg2 ;
  MgMotion *arg3 = (MgMotion *) 0 ;
  float result;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (MgMotion *)jarg3; 
  result = (float)((MgCmdManager const *)arg1)->displayMmToModel(arg2,(MgMotion const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdManager_dynamicChangeEnded(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgView *arg2 = (MgView *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (MgView *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->dynamicChangeEnded(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManager_getSelection(void * jarg1) {
  void * jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgSelection *result = 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  result = (MgSelection *)(arg1)->getSelection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManager_getActionDispatcher(void * jarg1) {
  void * jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgActionDispatcher *result = 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  result = (MgActionDispatcher *)(arg1)->getActionDispatcher();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCmdManager_doContextAction(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->doContextAction((MgMotion const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManager_getSnap(void * jarg1) {
  void * jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgSnap *result = 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  result = (MgSnap *)(arg1)->getSnap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManager_getCmdSubject(void * jarg1) {
  void * jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  CmdSubject *result = 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  result = (CmdSubject *)(arg1)->getCmdSubject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManager_addImageShape__SWIG_0(void * jarg1, void * jarg2, char * jarg3, float jarg4, float jarg5) {
  void * jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  MgShape *result = 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (MgShape *)(arg1)->addImageShape((MgMotion const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManager_addImageShape__SWIG_1(void * jarg1, void * jarg2, char * jarg3, float jarg4, float jarg5, float jarg6, float jarg7, int jarg8) {
  void * jresult ;
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  MgMotion *arg2 = (MgMotion *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  int arg8 ;
  MgShape *result = 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (MgMotion *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  result = (MgShape *)(arg1)->addImageShape((MgMotion const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCmdManager_getBoundingBox(void * jarg1, void * jarg2, void * jarg3) {
  MgCmdManager *arg1 = (MgCmdManager *) 0 ;
  Box2d *arg2 = 0 ;
  MgMotion *arg3 = (MgMotion *) 0 ;
  
  arg1 = (MgCmdManager *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d & type is null", 0);
    return ;
  } 
  arg3 = (MgMotion *)jarg3; 
  (arg1)->getBoundingBox(*arg2,(MgMotion const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCmdManagerFactory_create() {
  void * jresult ;
  MgCmdManager *result = 0 ;
  
  result = (MgCmdManager *)MgCmdManagerFactory::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgCmdManagerFactory() {
  void * jresult ;
  MgCmdManagerFactory *result = 0 ;
  
  result = (MgCmdManagerFactory *)new MgCmdManagerFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCmdManagerFactory(void * jarg1) {
  MgCmdManagerFactory *arg1 = (MgCmdManagerFactory *) 0 ;
  
  arg1 = (MgCmdManagerFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLayer_Type() {
  int jresult ;
  int result;
  
  result = (int)MgLayer::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLayer_cloneLayer(void * jarg1) {
  void * jresult ;
  MgLayer *arg1 = (MgLayer *) 0 ;
  MgLayer *result = 0 ;
  
  arg1 = (MgLayer *)jarg1; 
  result = (MgLayer *)((MgLayer const *)arg1)->cloneLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLayer_create(void * jarg1, int jarg2) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  int arg2 ;
  MgLayer *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgLayer *)MgLayer::create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLayer_doc(void * jarg1) {
  void * jresult ;
  MgLayer *arg1 = (MgLayer *) 0 ;
  MgShapeDoc *result = 0 ;
  
  arg1 = (MgLayer *)jarg1; 
  result = (MgShapeDoc *)((MgLayer const *)arg1)->doc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLayer_isHided(void * jarg1) {
  unsigned int jresult ;
  MgLayer *arg1 = (MgLayer *) 0 ;
  bool result;
  
  arg1 = (MgLayer *)jarg1; 
  result = (bool)((MgLayer const *)arg1)->isHided();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLayer_setHided(void * jarg1, unsigned int jarg2) {
  MgLayer *arg1 = (MgLayer *) 0 ;
  bool arg2 ;
  
  arg1 = (MgLayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHided(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLayer_isLocked(void * jarg1) {
  unsigned int jresult ;
  MgLayer *arg1 = (MgLayer *) 0 ;
  bool result;
  
  arg1 = (MgLayer *)jarg1; 
  result = (bool)((MgLayer const *)arg1)->isLocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLayer_setLocked(void * jarg1, unsigned int jarg2) {
  MgLayer *arg1 = (MgLayer *) 0 ;
  bool arg2 ;
  
  arg1 = (MgLayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLocked(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgLayer_clone(void * jarg1) {
  void * jresult ;
  MgLayer *arg1 = (MgLayer *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgLayer *)jarg1; 
  result = (MgObject *)((MgLayer const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLayer_copy(void * jarg1, void * jarg2) {
  MgLayer *arg1 = (MgLayer *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgLayer *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgLayer_release(void * jarg1) {
  MgLayer *arg1 = (MgLayer *) 0 ;
  
  arg1 = (MgLayer *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLayer_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgLayer *arg1 = (MgLayer *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgLayer *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgLayer const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgLayer_getType(void * jarg1) {
  int jresult ;
  MgLayer *arg1 = (MgLayer *) 0 ;
  int result;
  
  arg1 = (MgLayer *)jarg1; 
  result = (int)((MgLayer const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgLayer_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgLayer *arg1 = (MgLayer *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgLayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgLayer const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapeDoc_Type() {
  int jresult ;
  int result;
  
  result = (int)MgShapeDoc::Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_cloneDoc(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgShapeDoc *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (MgShapeDoc *)((MgShapeDoc const *)arg1)->cloneDoc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_shallowCopy(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgShapeDoc *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (MgShapeDoc *)((MgShapeDoc const *)arg1)->shallowCopy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapeDoc_copyShapes(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgShapeDoc *arg2 = (MgShapeDoc *) 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (MgShapeDoc *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->copyShapes((MgShapeDoc const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_createDoc() {
  void * jresult ;
  MgShapeDoc *result = 0 ;
  
  result = (MgShapeDoc *)MgShapeDoc::createDoc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_save(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((MgShapeDoc const *)arg1)->save(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_saveAll(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  GiTransform *arg3 = (GiTransform *) 0 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  arg3 = (GiTransform *)jarg3; 
  result = (bool)(arg1)->saveAll(arg2,(GiTransform const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_load(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->load(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_loadAll(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  GiTransform *arg4 = (GiTransform *) 0 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  arg4 = (GiTransform *)jarg4; 
  result = (bool)(arg1)->loadAll(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapeDoc_clear(void * jarg1) {
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapeDoc_clearCachedData(void * jarg1) {
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapeDoc_draw(void * jarg1, void * jarg2) {
  int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  GiGraphics *arg2 = 0 ;
  int result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (GiGraphics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  result = (int)((MgShapeDoc const *)arg1)->draw(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapeDoc_dyndraw(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  int result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GiGraphics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiGraphics & type is null", 0);
    return 0;
  } 
  result = (int)((MgShapeDoc const *)arg1)->dyndraw(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_getExtent(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  Box2d result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = ((MgShapeDoc const *)arg1)->getExtent();
  jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapeDoc_getShapeCount(void * jarg1) {
  int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  int result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (int)((MgShapeDoc const *)arg1)->getShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_findShape(void * jarg1, int jarg2) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapeDoc const *)arg1)->findShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_getLastShape(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgShape *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (MgShape *)((MgShapeDoc const *)arg1)->getLastShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_getCurrentShapes(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgShapes *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (MgShapes *)((MgShapeDoc const *)arg1)->getCurrentShapes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_setCurrentShapes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (MgShapes *)jarg2; 
  result = (bool)(arg1)->setCurrentShapes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_getCurrentLayer(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgLayer *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (MgLayer *)((MgShapeDoc const *)arg1)->getCurrentLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_switchLayer(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->switchLayer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapeDoc_getLayerCount(void * jarg1) {
  int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  int result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (int)((MgShapeDoc const *)arg1)->getLayerCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_context(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  GiContext *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (GiContext *)(arg1)->context();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_modelTransform(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  Matrix2d *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (Matrix2d *) &(arg1)->modelTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_getPageRectW(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  Box2d *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (Box2d *) &((MgShapeDoc const *)arg1)->getPageRectW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MgShapeDoc_getViewScale(void * jarg1) {
  float jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  float result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (float)((MgShapeDoc const *)arg1)->getViewScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapeDoc_setPageRectW__SWIG_0(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4) {
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  Box2d *arg2 = 0 ;
  float arg3 ;
  bool arg4 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setPageRectW((Box2d const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapeDoc_setPageRectW__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  Box2d *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (Box2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Box2d const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->setPageRectW((Box2d const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_zoomToInitial(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  GiTransform *arg2 = (GiTransform *) 0 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (GiTransform *)jarg2; 
  result = (bool)(arg1)->zoomToInitial(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_isReadOnly(void * jarg1) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (bool)((MgShapeDoc const *)arg1)->isReadOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapeDoc_setReadOnly(void * jarg1, unsigned int jarg2) {
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  bool arg2 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReadOnly(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgShapeDoc *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgShapeDoc *)MgShapeDoc::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgShapeDoc_toHandle(void * jarg1) {
  long jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  long result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (long)((MgShapeDoc const *)arg1)->toHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgShapeDoc_clone(void * jarg1) {
  void * jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgObject *result = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (MgObject *)((MgShapeDoc const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapeDoc_copy(void * jarg1, void * jarg2) {
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgObject *arg2 = 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapeDoc_release(void * jarg1) {
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgShapeDoc_addRef(void * jarg1) {
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  
  arg1 = (MgShapeDoc *)jarg1; 
  (arg1)->addRef();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (MgObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MgObject const & type is null", 0);
    return 0;
  } 
  result = (bool)((MgShapeDoc const *)arg1)->equals((MgObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgShapeDoc_getType(void * jarg1) {
  int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  int result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  result = (int)((MgShapeDoc const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgShapeDoc_isKindOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgShapeDoc *arg1 = (MgShapeDoc *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgShapeDoc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgShapeDoc const *)arg1)->isKindOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_regenAll(void * jarg1, unsigned int jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  bool arg2 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->regenAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_regenAllSwigExplicitGiView(void * jarg1, unsigned int jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  bool arg2 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->GiView::regenAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_regenAppend(void * jarg1, int jarg2, long jarg3) {
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  long arg3 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  (arg1)->regenAppend(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_regenAppendSwigExplicitGiView(void * jarg1, int jarg2, long jarg3) {
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  long arg3 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  (arg1)->GiView::regenAppend(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_redraw(void * jarg1, unsigned int jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  bool arg2 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->redraw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_redrawSwigExplicitGiView(void * jarg1, unsigned int jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  bool arg2 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->GiView::redraw(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_useFinger(void * jarg1) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  result = (bool)(arg1)->useFinger();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_useFingerSwigExplicitGiView(void * jarg1) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  result = (bool)(arg1)->GiView::useFinger();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_isContextActionsVisible(void * jarg1) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  result = (bool)(arg1)->isContextActionsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_isContextActionsVisibleSwigExplicitGiView(void * jarg1) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  result = (bool)(arg1)->GiView::isContextActionsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_showContextActions(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  mgvector< float > *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (mgvector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > const & type is null", 0);
    return 0;
  } 
  arg3 = (mgvector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->showContextActions((mgvector< int > const &)*arg2,(mgvector< float > const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_showContextActionsSwigExplicitGiView(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  mgvector< float > *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (mgvector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > const & type is null", 0);
    return 0;
  } 
  arg3 = (mgvector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->GiView::showContextActions((mgvector< int > const &)*arg2,(mgvector< float > const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_hideContextActions(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->hideContextActions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_hideContextActionsSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::hideContextActions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_commandChanged(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->commandChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_commandChangedSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::commandChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_selectionChanged(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->selectionChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_selectionChangedSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::selectionChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_contentChanged(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->contentChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_contentChangedSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::contentChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_dynamicChanged(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->dynamicChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_dynamicChangedSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::dynamicChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_zoomChanged(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->zoomChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_zoomChangedSwigExplicitGiView(void * jarg1) {
  GiView *arg1 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  (arg1)->GiView::zoomChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_viewChanged(void * jarg1, void * jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  (arg1)->viewChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_viewChangedSwigExplicitGiView(void * jarg1, void * jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  (arg1)->GiView::viewChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_shapeWillDelete(void * jarg1, int jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->shapeWillDelete(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_shapeWillDeleteSwigExplicitGiView(void * jarg1, int jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GiView::shapeWillDelete(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_shapeDeleted(void * jarg1, int jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->shapeDeleted(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_shapeDeletedSwigExplicitGiView(void * jarg1, int jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GiView::shapeDeleted(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_shapeDblClick(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->shapeDblClick(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_shapeDblClickSwigExplicitGiView(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->GiView::shapeDblClick(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_shapeClicked(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->shapeClicked(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiView_shapeClickedSwigExplicitGiView(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->GiView::shapeClicked(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_showMessage(void * jarg1, char * jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->showMessage((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_showMessageSwigExplicitGiView(void * jarg1, char * jarg2) {
  GiView *arg1 = (GiView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GiView::showMessage((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_getLocalizedString(void * jarg1, char * jarg2, void * jarg3) {
  GiView *arg1 = (GiView *) 0 ;
  char *arg2 = (char *) 0 ;
  MgStringCallback *arg3 = (MgStringCallback *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (MgStringCallback *)jarg3; 
  (arg1)->getLocalizedString((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_getLocalizedStringSwigExplicitGiView(void * jarg1, char * jarg2, void * jarg3) {
  GiView *arg1 = (GiView *) 0 ;
  char *arg2 = (char *) 0 ;
  MgStringCallback *arg3 = (MgStringCallback *) 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (MgStringCallback *)jarg3; 
  (arg1)->GiView::getLocalizedString((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiView() {
  void * jresult ;
  GiView *result = 0 ;
  
  result = (GiView *)new SwigDirector_GiView();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiView_director_connect(void *objarg, SwigDirector_GiView::SWIG_Callback0_t callback0, SwigDirector_GiView::SWIG_Callback1_t callback1, SwigDirector_GiView::SWIG_Callback2_t callback2, SwigDirector_GiView::SWIG_Callback3_t callback3, SwigDirector_GiView::SWIG_Callback4_t callback4, SwigDirector_GiView::SWIG_Callback5_t callback5, SwigDirector_GiView::SWIG_Callback6_t callback6, SwigDirector_GiView::SWIG_Callback7_t callback7, SwigDirector_GiView::SWIG_Callback8_t callback8, SwigDirector_GiView::SWIG_Callback9_t callback9, SwigDirector_GiView::SWIG_Callback10_t callback10, SwigDirector_GiView::SWIG_Callback11_t callback11, SwigDirector_GiView::SWIG_Callback12_t callback12, SwigDirector_GiView::SWIG_Callback13_t callback13, SwigDirector_GiView::SWIG_Callback14_t callback14, SwigDirector_GiView::SWIG_Callback15_t callback15, SwigDirector_GiView::SWIG_Callback16_t callback16, SwigDirector_GiView::SWIG_Callback17_t callback17, SwigDirector_GiView::SWIG_Callback18_t callback18) {
  GiView *obj = (GiView *)objarg;
  SwigDirector_GiView *director = dynamic_cast<SwigDirector_GiView *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgStringCallback(void * jarg1) {
  MgStringCallback *arg1 = (MgStringCallback *) 0 ;
  
  arg1 = (MgStringCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgStringCallback_onGetString(void * jarg1, char * jarg2) {
  MgStringCallback *arg1 = (MgStringCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MgStringCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->onGetString((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgStringCallback() {
  void * jresult ;
  MgStringCallback *result = 0 ;
  
  result = (MgStringCallback *)new SwigDirector_MgStringCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgStringCallback_director_connect(void *objarg, SwigDirector_MgStringCallback::SWIG_Callback0_t callback0) {
  MgStringCallback *obj = (MgStringCallback *)objarg;
  SwigDirector_MgStringCallback *director = dynamic_cast<SwigDirector_MgStringCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgFindImageCallback(void * jarg1) {
  MgFindImageCallback *arg1 = (MgFindImageCallback *) 0 ;
  
  arg1 = (MgFindImageCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgFindImageCallback_onFindImage(void * jarg1, int jarg2, char * jarg3) {
  MgFindImageCallback *arg1 = (MgFindImageCallback *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (MgFindImageCallback *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->onFindImage(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgFindImageCallback() {
  void * jresult ;
  MgFindImageCallback *result = 0 ;
  
  result = (MgFindImageCallback *)new SwigDirector_MgFindImageCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgFindImageCallback_director_connect(void *objarg, SwigDirector_MgFindImageCallback::SWIG_Callback0_t callback0) {
  MgFindImageCallback *obj = (MgFindImageCallback *)objarg;
  SwigDirector_MgFindImageCallback *director = dynamic_cast<SwigDirector_MgFindImageCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgSquare_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgSquare;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgClosed_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgClosed;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgFixedLength_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgFixedLength;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgFixedSize_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgFixedSize;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgRotateDisnable_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgRotateDisnable;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgLocked_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgLocked;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgNoSnap_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgNoSnap;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgNoAction_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgNoAction;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgNoClone_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgNoClone;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgHideContent_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgHideContent;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgNoDel_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgNoDel;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgCanSelLocked_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgCanSelLocked;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgNotAddRel_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgNotAddRel;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgNotShowSnap_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgNotShowSnap;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_kMgCanAddVertex_get() {
  int jresult ;
  int result;
  
  result = (int)MgCoreView::kMgCanAddVertex;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgCoreView(void * jarg1) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCoreView_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  MgCoreView *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (MgCoreView *)MgCoreView::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_toHandle(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)((MgCoreView const *)arg1)->toHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_release(void * jarg1) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_addRef(void * jarg1) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  (arg1)->addRef();
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_viewDataHandle(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)(arg1)->viewDataHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_viewAdapterHandle(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)(arg1)->viewAdapterHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_backDoc(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)(arg1)->backDoc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_backShapes(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)(arg1)->backShapes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_acquireFrontDoc__SWIG_0(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)(arg1)->acquireFrontDoc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_acquireFrontDoc__SWIG_1(void * jarg1, long jarg2) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  result = (long)(arg1)->acquireFrontDoc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_releaseDoc(long jarg1) {
  long arg1 ;
  
  arg1 = (long)jarg1; 
  MgCoreView::releaseDoc(arg1);
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_acquireDynamicShapes(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)(arg1)->acquireDynamicShapes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_releaseShapes(long jarg1) {
  long arg1 ;
  
  arg1 = (long)jarg1; 
  MgCoreView::releaseShapes(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isDrawing(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)(arg1)->isDrawing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isZooming(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)(arg1)->isZooming();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isStopping(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)(arg1)->isStopping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_stopDrawing__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->stopDrawing(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_stopDrawing__SWIG_1(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->stopDrawing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isUndoRecording(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)((MgCoreView const *)arg1)->isUndoRecording();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isRecording(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)((MgCoreView const *)arg1)->isRecording();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isPlaying(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)((MgCoreView const *)arg1)->isPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isPaused(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)((MgCoreView const *)arg1)->isPaused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_getRecordTick(void * jarg1, unsigned int jarg2, long jarg3) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool arg2 ;
  long arg3 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (long)jarg3; 
  result = (long)(arg1)->getRecordTick(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isUndoLoading(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)((MgCoreView const *)arg1)->isUndoLoading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_canUndo(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)((MgCoreView const *)arg1)->canUndo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_canRedo(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)((MgCoreView const *)arg1)->canRedo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getRedoIndex(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)((MgCoreView const *)arg1)->getRedoIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getRedoCount(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)((MgCoreView const *)arg1)->getRedoCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_getPlayingTick(void * jarg1, long jarg2) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  result = (long)(arg1)->getPlayingTick(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_getFrameTick(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)(arg1)->getFrameTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getFrameFlags(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->getFrameFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getFrameIndex(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)((MgCoreView const *)arg1)->getFrameIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isPressDragging(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)(arg1)->isPressDragging();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isDrawingCommand(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)(arg1)->isDrawingCommand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_isCommand(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->isCommand((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_getCommand(void * jarg1, void * jarg2) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  MgStringCallback *arg2 = (MgStringCallback *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (MgStringCallback *)jarg2; 
  (arg1)->getCommand(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_setCommand__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setCommand((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_setCommand__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setCommand((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_switchCommand(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)(arg1)->switchCommand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_doContextAction(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->doContextAction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_clearCachedData(void * jarg1) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  (arg1)->clearCachedData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_addShapesForTest__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->addShapesForTest(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_addShapesForTest__SWIG_1(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->addShapesForTest();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getShapeCount__SWIG_0(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->getShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getShapeCount__SWIG_1(void * jarg1, long jarg2) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  result = (int)(arg1)->getShapeCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getUnlockedShapeCount__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getUnlockedShapeCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getUnlockedShapeCount__SWIG_1(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->getUnlockedShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getVisibleShapeCount__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getVisibleShapeCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getVisibleShapeCount__SWIG_1(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->getVisibleShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_getChangeCount(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)(arg1)->getChangeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgCoreView_getDrawCount(void * jarg1) {
  long jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (long)((MgCoreView const *)arg1)->getDrawCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getSelectedShapeCount(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->getSelectedShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getSelectedShapeType(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->getSelectedShapeType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getSelectedShapeID(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->getSelectedShapeID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_getSelectedHandle(void * jarg1) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (int)(arg1)->getSelectedHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_getSelectedShapeIDs(void * jarg1, void * jarg2) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > & type is null", 0);
    return ;
  } 
  (arg1)->getSelectedShapeIDs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_setSelectedShapeIDs(void * jarg1, void * jarg2) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->setSelectedShapeIDs((mgvector< int > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_clear(void * jarg1) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_loadFromFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->loadFromFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_loadFromFile__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->loadFromFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_saveToFile__SWIG_0(void * jarg1, long jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->saveToFile(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_saveToFile__SWIG_1(void * jarg1, long jarg2, char * jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->saveToFile(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_saveToFile__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->saveToFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_saveToFile__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->saveToFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_loadShapes__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->loadShapes(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_loadShapes__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)(arg1)->loadShapes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_saveShapes__SWIG_0(void * jarg1, long jarg2, void * jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  MgStorage *arg3 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (MgStorage *)jarg3; 
  result = (bool)(arg1)->saveShapes(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_saveShapes__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (MgStorage *)jarg2; 
  result = (bool)(arg1)->saveShapes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_getContent__SWIG_0(void * jarg1, long jarg2, void * jarg3) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  MgStringCallback *arg3 = (MgStringCallback *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (MgStringCallback *)jarg3; 
  (arg1)->getContent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_getContent__SWIG_1(void * jarg1, void * jarg2) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  MgStringCallback *arg2 = (MgStringCallback *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (MgStringCallback *)jarg2; 
  (arg1)->getContent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_freeContent(void * jarg1) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  (arg1)->freeContent();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_setContent__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setContent((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_setContent__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setContent((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_zoomToInitial(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)(arg1)->zoomToInitial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_zoomToExtent__SWIG_0(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->zoomToExtent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_zoomToExtent__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  result = (bool)(arg1)->zoomToExtent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_zoomToModel__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->zoomToModel(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_zoomToModel__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->zoomToModel(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_zoomPan__SWIG_0(void * jarg1, float jarg2, float jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomPan(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_zoomPan__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->zoomPan(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MgCoreView_getContext(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool arg2 ;
  GiContext *result = 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (GiContext *) &(arg1)->getContext(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_setContext__SWIG_0(void * jarg1, int jarg2) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setContext(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getShapeFlag(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->getShapeFlag(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_setShapeFlag(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setShapeFlag(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_setContext__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (GiContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GiContext const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setContext((GiContext const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgCoreView_setContextEditing(void * jarg1, unsigned int jarg2) {
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  bool arg2 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setContextEditing(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_addImageShape__SWIG_0(void * jarg1, char * jarg2, float jarg3, float jarg4) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (int)(arg1)->addImageShape((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_addImageShape__SWIG_1(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  result = (int)(arg1)->addImageShape((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_hasImageShape(void * jarg1, long jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->hasImageShape(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getImageSize(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->getImageSize(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_findShapeByImageID(void * jarg1, long jarg2, char * jarg3) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->findShapeByImageID(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_findShapeByTag(void * jarg1, long jarg2, int jarg3) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->findShapeByTag(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_traverseImageShapes(void * jarg1, long jarg2, void * jarg3) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  MgFindImageCallback *arg3 = (MgFindImageCallback *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (MgFindImageCallback *)jarg3; 
  result = (int)(arg1)->traverseImageShapes(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getViewModelBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getViewModelBox(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getModelBox__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getModelBox(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getModelBox__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->getModelBox(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getHandlePoint(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->getHandlePoint(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getDisplayExtent__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getDisplayExtent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getDisplayExtent__SWIG_1(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  long arg3 ;
  mgvector< float > *arg4 = 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (mgvector< float > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getDisplayExtent(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getBoundingBox__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getBoundingBox(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getBoundingBox__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->getBoundingBox(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_getBoundingBox__SWIG_2(void * jarg1, long jarg2, long jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  long arg3 ;
  mgvector< float > *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (mgvector< float > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->getBoundingBox(arg2,arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_displayToModel(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (mgvector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< float > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->displayToModel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_importSVGPath(void * jarg1, long jarg2, int jarg3, char * jarg4) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  result = (int)(arg1)->importSVGPath(arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgCoreView_exportSVGPath(void * jarg1, long jarg2, int jarg3, char * jarg4, int jarg5) {
  int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  long arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->exportSVGPath(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgCoreView_exportSVGPath2(void * jarg1, void * jarg2, long jarg3, int jarg4) {
  unsigned int jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  MgStringCallback *arg2 = (MgStringCallback *) 0 ;
  long arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (MgStringCallback *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->exportSVGPath2(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgOptionCallback(void * jarg1) {
  MgOptionCallback *arg1 = (MgOptionCallback *) 0 ;
  
  arg1 = (MgOptionCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgOptionCallback_onGetOptionBool(void * jarg1, char * jarg2, unsigned int jarg3) {
  MgOptionCallback *arg1 = (MgOptionCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (MgOptionCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->onGetOptionBool((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgOptionCallback_onGetOptionInt(void * jarg1, char * jarg2, int jarg3) {
  MgOptionCallback *arg1 = (MgOptionCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (MgOptionCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->onGetOptionInt((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgOptionCallback_onGetOptionFloat(void * jarg1, char * jarg2, float jarg3) {
  MgOptionCallback *arg1 = (MgOptionCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (MgOptionCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->onGetOptionFloat((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgOptionCallback_onGetOptionString(void * jarg1, char * jarg2, char * jarg3) {
  MgOptionCallback *arg1 = (MgOptionCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (MgOptionCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->onGetOptionString((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgOptionCallback() {
  void * jresult ;
  MgOptionCallback *result = 0 ;
  
  result = (MgOptionCallback *)new SwigDirector_MgOptionCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgOptionCallback_director_connect(void *objarg, SwigDirector_MgOptionCallback::SWIG_Callback0_t callback0, SwigDirector_MgOptionCallback::SWIG_Callback1_t callback1, SwigDirector_MgOptionCallback::SWIG_Callback2_t callback2, SwigDirector_MgOptionCallback::SWIG_Callback3_t callback3) {
  MgOptionCallback *obj = (MgOptionCallback *)objarg;
  SwigDirector_MgOptionCallback *director = dynamic_cast<SwigDirector_MgOptionCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgRegenLocker(void * jarg1) {
  void * jresult ;
  MgView *arg1 = (MgView *) 0 ;
  MgRegenLocker *result = 0 ;
  
  arg1 = (MgView *)jarg1; 
  result = (MgRegenLocker *)new MgRegenLocker(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgRegenLocker(void * jarg1) {
  MgRegenLocker *arg1 = (MgRegenLocker *) 0 ;
  
  arg1 = (MgRegenLocker *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_kNoCmdType_get() {
  int jresult ;
  int result;
  
  result = (int)GiCoreView::kNoCmdType;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_kTestType_get() {
  int jresult ;
  int result;
  
  result = (int)GiCoreView::kTestType;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_kNormalType_get() {
  int jresult ;
  int result;
  
  result = (int)GiCoreView::kNormalType;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreView_createView__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  GiView *arg1 = (GiView *) 0 ;
  int arg2 ;
  GiCoreView *result = 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GiCoreView *)GiCoreView::createView(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreView_createView__SWIG_1(void * jarg1) {
  void * jresult ;
  GiView *arg1 = (GiView *) 0 ;
  GiCoreView *result = 0 ;
  
  arg1 = (GiView *)jarg1; 
  result = (GiCoreView *)GiCoreView::createView(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreView_createMagnifierView(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GiView *arg1 = (GiView *) 0 ;
  GiCoreView *arg2 = (GiCoreView *) 0 ;
  GiView *arg3 = (GiView *) 0 ;
  GiCoreView *result = 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (GiCoreView *)jarg2; 
  arg3 = (GiView *)jarg3; 
  result = (GiCoreView *)GiCoreView::createMagnifierView(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_destoryView(void * jarg1, void * jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  (arg1)->destoryView(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiCoreView_acquireGraphics(void * jarg1, void * jarg2) {
  long jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  long result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  result = (long)(arg1)->acquireGraphics(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_releaseGraphics(void * jarg1, long jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  long arg2 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->releaseGraphics(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_acquireFrontDocs(void * jarg1, void * jarg2) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< long > *arg2 = 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (mgvector< long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< long > & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->acquireFrontDocs(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_releaseDocs(void * jarg1) {
  mgvector< long > *arg1 = 0 ;
  
  arg1 = (mgvector< long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< long > const & type is null", 0);
    return ;
  } 
  GiCoreView::releaseDocs((mgvector< long > const &)*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getSkipDrawIds(void * jarg1, void * jarg2) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< int > *arg2 = 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (mgvector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->getSkipDrawIds(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_acquireDynamicShapesArray(void * jarg1, void * jarg2) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< long > *arg2 = 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (mgvector< long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< long > & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->acquireDynamicShapesArray(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_releaseShapesArray(void * jarg1) {
  mgvector< long > *arg1 = 0 ;
  
  arg1 = (mgvector< long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< long > const & type is null", 0);
    return ;
  } 
  GiCoreView::releaseShapesArray((mgvector< long > const &)*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_drawAll__SWIG_0(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  long arg2 ;
  long arg3 ;
  GiCanvas *arg4 = (GiCanvas *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (GiCanvas *)jarg4; 
  result = (int)(arg1)->drawAll(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_drawAll__SWIG_1(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< long > *arg2 = 0 ;
  long arg3 ;
  GiCanvas *arg4 = (GiCanvas *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (mgvector< long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< long > const & type is null", 0);
    return 0;
  } 
  arg3 = (long)jarg3; 
  arg4 = (GiCanvas *)jarg4; 
  result = (int)(arg1)->drawAll((mgvector< long > const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_drawAll__SWIG_2(void * jarg1, void * jarg2, long jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< long > *arg2 = 0 ;
  long arg3 ;
  GiCanvas *arg4 = (GiCanvas *) 0 ;
  mgvector< int > *arg5 = 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (mgvector< long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< long > const & type is null", 0);
    return 0;
  } 
  arg3 = (long)jarg3; 
  arg4 = (GiCanvas *)jarg4; 
  arg5 = (mgvector< int > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< int > const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->drawAll((mgvector< long > const &)*arg2,arg3,arg4,(mgvector< int > const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_drawAppend__SWIG_0(void * jarg1, long jarg2, long jarg3, void * jarg4, int jarg5) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  long arg2 ;
  long arg3 ;
  GiCanvas *arg4 = (GiCanvas *) 0 ;
  int arg5 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (GiCanvas *)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->drawAppend(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_dynDraw__SWIG_0(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  long arg2 ;
  long arg3 ;
  GiCanvas *arg4 = (GiCanvas *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (GiCanvas *)jarg4; 
  result = (int)(arg1)->dynDraw(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_dynDraw__SWIG_1(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< long > *arg2 = 0 ;
  long arg3 ;
  GiCanvas *arg4 = (GiCanvas *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (mgvector< long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mgvector< long > const & type is null", 0);
    return 0;
  } 
  arg3 = (long)jarg3; 
  arg4 = (GiCanvas *)jarg4; 
  result = (int)(arg1)->dynDraw((mgvector< long > const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_drawAll__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiCanvas *)jarg3; 
  result = (int)(arg1)->drawAll(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_drawAppend__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiCanvas *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->drawAppend(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_dynDraw__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiCanvas *arg3 = (GiCanvas *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiCanvas *)jarg3; 
  result = (int)(arg1)->dynDraw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_setBkColor(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->setBkColor(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setScreenDpi__SWIG_0(int jarg1, float jarg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  GiCoreView::setScreenDpi(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setScreenDpi__SWIG_1(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  GiCoreView::setScreenDpi(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_onSize(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->onSize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setViewScaleRange(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setViewScaleRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setPenWidthRange(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setPenWidthRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setGestureVelocity(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setGestureVelocity(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_onGesture__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5, float jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureType arg3 ;
  GiGestureState arg4 ;
  float arg5 ;
  float arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiGestureType)jarg3; 
  arg4 = (GiGestureState)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->onGesture(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_onGesture__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureType arg3 ;
  GiGestureState arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiGestureType)jarg3; 
  arg4 = (GiGestureState)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->onGesture(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_twoFingersMove__SWIG_0(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureState arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiGestureState)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->twoFingersMove(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_twoFingersMove__SWIG_1(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  GiGestureState arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (GiGestureState)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->twoFingersMove(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_submitBackDoc(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->submitBackDoc(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_submitDynamicShapes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  result = (bool)(arg1)->submitDynamicShapes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GiCoreView_calcPenWidth(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  float arg3 ;
  float result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->calcPenWidth(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getGestureType(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiGestureType result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (GiGestureType)(arg1)->getGestureType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getGestureState(void * jarg1) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiGestureState result;
  
  arg1 = (GiCoreView *)jarg1; 
  result = (GiGestureState)(arg1)->getGestureState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_getVersion() {
  int jresult ;
  int result;
  
  result = (int)GiCoreView::getVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_isZoomEnabled(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  result = (bool)(arg1)->isZoomEnabled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setZoomEnabled(void * jarg1, void * jarg2, unsigned int jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  bool arg3 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setZoomEnabled(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_exportSVG__SWIG_0(void * jarg1, long jarg2, long jarg3, char * jarg4) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  long arg2 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (char *)jarg4; 
  result = (int)(arg1)->exportSVG(arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreView_exportSVG__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->exportSVG(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_startRecord__SWIG_0(void * jarg1, char * jarg2, long jarg3, unsigned int jarg4, long jarg5, void * jarg6) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  bool arg4 ;
  long arg5 ;
  MgStringCallback *arg6 = (MgStringCallback *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (long)jarg5; 
  arg6 = (MgStringCallback *)jarg6; 
  result = (bool)(arg1)->startRecord((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_startRecord__SWIG_1(void * jarg1, char * jarg2, long jarg3, unsigned int jarg4, long jarg5) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  bool arg4 ;
  long arg5 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (long)jarg5; 
  result = (bool)(arg1)->startRecord((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_stopRecord(void * jarg1, unsigned int jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->stopRecord(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_recordShapes__SWIG_0(void * jarg1, unsigned int jarg2, long jarg3, long jarg4, long jarg5, long jarg6) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (long)jarg5; 
  arg6 = (long)jarg6; 
  result = (bool)(arg1)->recordShapes(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_recordShapes__SWIG_1(void * jarg1, unsigned int jarg2, long jarg3, long jarg4, long jarg5, long jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  mgvector< long > *arg7 = (mgvector< long > *) 0 ;
  MgStringCallback *arg8 = (MgStringCallback *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (long)jarg5; 
  arg6 = (long)jarg6; 
  arg7 = (mgvector< long > *)jarg7; 
  arg8 = (MgStringCallback *)jarg8; 
  result = (bool)(arg1)->recordShapes(arg2,arg3,arg4,arg5,arg6,(mgvector< long > const *)arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_recordShapes__SWIG_2(void * jarg1, unsigned int jarg2, long jarg3, long jarg4, long jarg5, long jarg6, void * jarg7) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  mgvector< long > *arg7 = (mgvector< long > *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (long)jarg5; 
  arg6 = (long)jarg6; 
  arg7 = (mgvector< long > *)jarg7; 
  result = (bool)(arg1)->recordShapes(arg2,arg3,arg4,arg5,arg6,(mgvector< long > const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_undo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  result = (bool)(arg1)->undo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_redo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiView *arg2 = (GiView *) 0 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (GiView *)jarg2; 
  result = (bool)(arg1)->redo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_onPause(void * jarg1, long jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->onPause(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_onResume(void * jarg1, long jarg2) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->onResume(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiCoreView_restoreRecord(void * jarg1, int jarg2, char * jarg3, long jarg4, long jarg5, int jarg6, int jarg7, int jarg8, long jarg9) {
  unsigned int jresult ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  long arg4 ;
  long arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  long arg9 ;
  bool result;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (long)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (long)jarg9; 
  result = (bool)(arg1)->restoreRecord(arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_traverseOptions(void * jarg1, void * jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  MgOptionCallback *arg2 = (MgOptionCallback *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (MgOptionCallback *)jarg2; 
  (arg1)->traverseOptions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setOptionBool(void * jarg1, char * jarg2, unsigned int jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setOptionBool((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setOptionInt(void * jarg1, char * jarg2, int jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setOptionInt((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setOptionFloat(void * jarg1, char * jarg2, float jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setOptionFloat((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreView_setOptionString(void * jarg1, char * jarg2, char * jarg3) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (GiCoreView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setOptionString((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kRect_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kRect;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kLine_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kLine;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kTextAt_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kTextAt;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kEllipse_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kEllipse;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kQuadBezier_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kQuadBezier;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kCubicBezier_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kCubicBezier;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kPolygon_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kPolygon;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kClearRect_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kClearRect;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kClipPath_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kClipPath;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kHandle_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kHandle;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kDynCurves_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kDynCurves;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kRotateText_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kRotateText;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_kClearPolygon_get() {
  int jresult ;
  int result;
  
  result = (int)TestCanvas::kClearPolygon;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_initRand() {
  TestCanvas::initRand();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TestCanvas_randInt(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TestCanvas::randInt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TestCanvas_randFloat(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)TestCanvas::randFloat(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_test__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  TestCanvas::test(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_test__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TestCanvas::test(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_test__SWIG_2(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::test(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testRect(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testRect(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testLine(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testLine(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testEllipse(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testEllipse(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testQuadBezier(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testQuadBezier(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testCubicBezier(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testCubicBezier(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testPolygon(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testPolygon(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testClipPath(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testClipPath(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testHandle(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testHandle(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testDynCurves(void * jarg1) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  
  arg1 = (GiCanvas *)jarg1; 
  TestCanvas::testDynCurves(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testTextAt(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testTextAt(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TestCanvas_testRotateText(void * jarg1, int jarg2) {
  GiCanvas *arg1 = (GiCanvas *) 0 ;
  int arg2 ;
  
  arg1 = (GiCanvas *)jarg1; 
  arg2 = (int)jarg2; 
  TestCanvas::testRotateText(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TestCanvas() {
  void * jresult ;
  TestCanvas *result = 0 ;
  
  result = (TestCanvas *)new TestCanvas();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TestCanvas(void * jarg1) {
  TestCanvas *arg1 = (TestCanvas *) 0 ;
  
  arg1 = (TestCanvas *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiPlaying_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  GiPlaying *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (GiPlaying *)GiPlaying::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiPlaying_toHandle(void * jarg1) {
  long jresult ;
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  long result;
  
  arg1 = (GiPlaying *)jarg1; 
  result = (long)((GiPlaying const *)arg1)->toHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiPlaying_kDrawingTag_get() {
  int jresult ;
  int result;
  
  result = (int)GiPlaying::kDrawingTag;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiPlaying_kPlayingTag_get() {
  int jresult ;
  int result;
  
  result = (int)GiPlaying::kPlayingTag;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiPlaying_create__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  bool arg3 ;
  GiPlaying *result = 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (GiPlaying *)GiPlaying::create(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiPlaying_create__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  MgCoreView *arg1 = (MgCoreView *) 0 ;
  int arg2 ;
  GiPlaying *result = 0 ;
  
  arg1 = (MgCoreView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GiPlaying *)GiPlaying::create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlaying_release(void * jarg1, void * jarg2) {
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  MgCoreView *arg2 = (MgCoreView *) 0 ;
  
  arg1 = (GiPlaying *)jarg1; 
  arg2 = (MgCoreView *)jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlaying_clear(void * jarg1) {
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  
  arg1 = (GiPlaying *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiPlaying_getTag(void * jarg1) {
  int jresult ;
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  int result;
  
  arg1 = (GiPlaying *)jarg1; 
  result = (int)((GiPlaying const *)arg1)->getTag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiPlaying_acquireFrontDoc(void * jarg1) {
  long jresult ;
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  long result;
  
  arg1 = (GiPlaying *)jarg1; 
  result = (long)(arg1)->acquireFrontDoc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlaying_releaseDoc(long jarg1) {
  long arg1 ;
  
  arg1 = (long)jarg1; 
  GiPlaying::releaseDoc(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiPlaying_getBackDoc(void * jarg1) {
  void * jresult ;
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  MgShapeDoc *result = 0 ;
  
  arg1 = (GiPlaying *)jarg1; 
  result = (MgShapeDoc *)(arg1)->getBackDoc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlaying_submitBackDoc(void * jarg1) {
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  
  arg1 = (GiPlaying *)jarg1; 
  (arg1)->submitBackDoc();
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiPlaying_acquireFrontShapes(void * jarg1) {
  long jresult ;
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  long result;
  
  arg1 = (GiPlaying *)jarg1; 
  result = (long)(arg1)->acquireFrontShapes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlaying_releaseShapes(long jarg1) {
  long arg1 ;
  
  arg1 = (long)jarg1; 
  GiPlaying::releaseShapes(arg1);
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiPlaying_getBackShapesHandle(void * jarg1, unsigned int jarg2) {
  long jresult ;
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  bool arg2 ;
  long result;
  
  arg1 = (GiPlaying *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (long)(arg1)->getBackShapesHandle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiPlaying_getBackShapes(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  bool arg2 ;
  MgShapes *result = 0 ;
  
  arg1 = (GiPlaying *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (MgShapes *)(arg1)->getBackShapes(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlaying_submitBackShapes(void * jarg1) {
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  
  arg1 = (GiPlaying *)jarg1; 
  (arg1)->submitBackShapes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlaying_stop(void * jarg1) {
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  
  arg1 = (GiPlaying *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiPlaying_isStopping(void * jarg1) {
  unsigned int jresult ;
  GiPlaying *arg1 = (GiPlaying *) 0 ;
  bool result;
  
  arg1 = (GiPlaying *)jarg1; 
  result = (bool)((GiPlaying const *)arg1)->isStopping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlayShapes_playing_set(void * jarg1, void * jarg2) {
  GiPlayShapes *arg1 = (GiPlayShapes *) 0 ;
  GiPlaying *arg2 = (GiPlaying *) 0 ;
  
  arg1 = (GiPlayShapes *)jarg1; 
  arg2 = (GiPlaying *)jarg2; 
  if (arg1) (arg1)->playing = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiPlayShapes_playing_get(void * jarg1) {
  void * jresult ;
  GiPlayShapes *arg1 = (GiPlayShapes *) 0 ;
  GiPlaying *result = 0 ;
  
  arg1 = (GiPlayShapes *)jarg1; 
  result = (GiPlaying *) ((arg1)->playing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiPlayShapes_player_set(void * jarg1, void * jarg2) {
  GiPlayShapes *arg1 = (GiPlayShapes *) 0 ;
  MgRecordShapes *arg2 = (MgRecordShapes *) 0 ;
  
  arg1 = (GiPlayShapes *)jarg1; 
  arg2 = (MgRecordShapes *)jarg2; 
  if (arg1) (arg1)->player = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiPlayShapes_player_get(void * jarg1) {
  void * jresult ;
  GiPlayShapes *arg1 = (GiPlayShapes *) 0 ;
  MgRecordShapes *result = 0 ;
  
  arg1 = (GiPlayShapes *)jarg1; 
  result = (MgRecordShapes *) ((arg1)->player);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiPlayShapes() {
  void * jresult ;
  GiPlayShapes *result = 0 ;
  
  result = (GiPlayShapes *)new GiPlayShapes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiPlayShapes(void * jarg1) {
  GiPlayShapes *arg1 = (GiPlayShapes *) 0 ;
  
  arg1 = (GiPlayShapes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreViewData_drawing_set(void * jarg1, void * jarg2) {
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  GiPlaying *arg2 = (GiPlaying *) 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = (GiPlaying *)jarg2; 
  if (arg1) (arg1)->drawing = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreViewData_drawing_get(void * jarg1) {
  void * jresult ;
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  GiPlaying *result = 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  result = (GiPlaying *) ((arg1)->drawing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreViewData_backDoc_set(void * jarg1, void * jarg2) {
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  MgShapeDoc *arg2 = (MgShapeDoc *) 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = (MgShapeDoc *)jarg2; 
  if (arg1) (arg1)->backDoc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreViewData_backDoc_get(void * jarg1) {
  void * jresult ;
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  MgShapeDoc *result = 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  result = (MgShapeDoc *) ((arg1)->backDoc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreViewData_play_set(void * jarg1, void * jarg2) {
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  GiPlayShapes *arg2 = (GiPlayShapes *) 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = (GiPlayShapes *)jarg2; 
  if (arg1) (arg1)->play = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreViewData_play_get(void * jarg1) {
  void * jresult ;
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  GiPlayShapes *result = 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  result = (GiPlayShapes *)& ((arg1)->play);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreViewData_submitBackXform(void * jarg1) {
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  (arg1)->submitBackXform();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreViewData_fromHandle(long jarg1) {
  void * jresult ;
  long arg1 ;
  GiCoreViewData *result = 0 ;
  
  arg1 = (long)jarg1; 
  result = (GiCoreViewData *)GiCoreViewData::fromHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiCoreViewData(void * jarg1) {
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GiCoreViewData_recorder(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  bool arg2 ;
  MgRecordShapes *result = 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (MgRecordShapes *)(arg1)->recorder(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreViewData_setRecorder(void * jarg1, unsigned int jarg2, void * jarg3) {
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  bool arg2 ;
  MgRecordShapes *arg3 = (MgRecordShapes *) 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (MgRecordShapes *)jarg3; 
  (arg1)->setRecorder(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GiCoreViewData_getPlayingCount(void * jarg1) {
  int jresult ;
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  int result;
  
  arg1 = (GiCoreViewData *)jarg1; 
  result = (int)(arg1)->getPlayingCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiCoreViewData_acquireFrontDoc(void * jarg1, int jarg2) {
  long jresult ;
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  int arg2 ;
  long result;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = (int)jarg2; 
  result = (long)(arg1)->acquireFrontDoc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GiCoreViewData_acquireFrontShapes(void * jarg1, int jarg2) {
  long jresult ;
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  int arg2 ;
  long result;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = (int)jarg2; 
  result = (long)(arg1)->acquireFrontShapes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreViewData_addPlaying(void * jarg1, void * jarg2) {
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  GiPlaying *arg2 = (GiPlaying *) 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = (GiPlaying *)jarg2; 
  (arg1)->addPlaying(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GiCoreViewData_removePlaying(void * jarg1, void * jarg2) {
  GiCoreViewData *arg1 = (GiCoreViewData *) 0 ;
  GiPlaying *arg2 = (GiPlaying *) 0 ;
  
  arg1 = (GiCoreViewData *)jarg1; 
  arg2 = (GiPlaying *)jarg2; 
  (arg1)->removePlaying(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_ADD_get() {
  int jresult ;
  int result;
  
  result = (int)MgRecordShapes::ADD;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_EDIT_get() {
  int jresult ;
  int result;
  
  result = (int)MgRecordShapes::EDIT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_DEL_get() {
  int jresult ;
  int result;
  
  result = (int)MgRecordShapes::DEL;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_DYN_get() {
  int jresult ;
  int result;
  
  result = (int)MgRecordShapes::DYN;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_DOC_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)MgRecordShapes::DOC_CHANGED;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_SHAPE_APPEND_get() {
  int jresult ;
  int result;
  
  result = (int)MgRecordShapes::SHAPE_APPEND;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_DYN_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)MgRecordShapes::DYN_CHANGED;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MgRecordShapes(char * jarg1, void * jarg2, unsigned int jarg3, long jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MgShapeDoc *arg2 = (MgShapeDoc *) 0 ;
  bool arg3 ;
  long arg4 ;
  MgRecordShapes *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (MgShapeDoc *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (long)jarg4; 
  result = (MgRecordShapes *)new MgRecordShapes((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MgRecordShapes(void * jarg1) {
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  
  arg1 = (MgRecordShapes *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MgRecordShapes_getCurrentTick(void * jarg1, long jarg2) {
  long jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  long arg2 ;
  long result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  arg2 = (long)jarg2; 
  result = (long)((MgRecordShapes const *)arg1)->getCurrentTick(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRecordShapes_isLoading(void * jarg1) {
  unsigned int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  bool result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  result = (bool)((MgRecordShapes const *)arg1)->isLoading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRecordShapes_setLoading(void * jarg1, unsigned int jarg2) {
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  bool arg2 ;
  
  arg1 = (MgRecordShapes *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoading(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRecordShapes_onResume(void * jarg1, long jarg2) {
  unsigned int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->onResume(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRecordShapes_restore(void * jarg1, int jarg2, int jarg3, int jarg4, long jarg5) {
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  long arg5 ;
  
  arg1 = (MgRecordShapes *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (long)jarg5; 
  (arg1)->restore(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MgRecordShapes_stopRecordIndex(void * jarg1) {
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  
  arg1 = (MgRecordShapes *)jarg1; 
  (arg1)->stopRecordIndex();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRecordShapes_isPlaying(void * jarg1) {
  unsigned int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  bool result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  result = (bool)((MgRecordShapes const *)arg1)->isPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_getFileTick(void * jarg1) {
  int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  int result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  result = (int)((MgRecordShapes const *)arg1)->getFileTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_getFileFlags(void * jarg1) {
  int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  int result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  result = (int)((MgRecordShapes const *)arg1)->getFileFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_getFileCount(void * jarg1) {
  int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  int result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  result = (int)((MgRecordShapes const *)arg1)->getFileCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRecordShapes_applyFirstFile__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgShapeDoc *arg3 = (MgShapeDoc *) 0 ;
  bool result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgShapeDoc *)jarg3; 
  result = (bool)(arg1)->applyFirstFile(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MgRecordShapes_applyFirstFile__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  unsigned int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgShapeDoc *arg3 = (MgShapeDoc *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgShapeDoc *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->applyFirstFile(arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_applyRedoFile(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgShapeDoc *arg3 = (MgShapeDoc *) 0 ;
  MgShapes *arg4 = (MgShapes *) 0 ;
  int arg5 ;
  int result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgShapeDoc *)jarg3; 
  arg4 = (MgShapes *)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->applyRedoFile(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MgRecordShapes_applyUndoFile(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, long jarg6) {
  int jresult ;
  MgRecordShapes *arg1 = (MgRecordShapes *) 0 ;
  MgShapeFactory *arg2 = (MgShapeFactory *) 0 ;
  MgShapeDoc *arg3 = (MgShapeDoc *) 0 ;
  MgShapes *arg4 = (MgShapes *) 0 ;
  int arg5 ;
  long arg6 ;
  int result;
  
  arg1 = (MgRecordShapes *)jarg1; 
  arg2 = (MgShapeFactory *)jarg2; 
  arg3 = (MgShapeDoc *)jarg3; 
  arg4 = (MgShapes *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (long)jarg6; 
  result = (int)(arg1)->applyUndoFile(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GiMouseHelper(void * jarg1, void * jarg2) {
  void * jresult ;
  GiView *arg1 = (GiView *) 0 ;
  GiCoreView *arg2 = (GiCoreView *) 0 ;
  GiMouseHelper *result = 0 ;
  
  arg1 = (GiView *)jarg1; 
  arg2 = (GiCoreView *)jarg2; 
  result = (GiMouseHelper *)new GiMouseHelper(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onLButtonDown(void * jarg1, float jarg2, float jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->onLButtonDown(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onRButtonDown(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->onRButtonDown(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onMouseUp(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->onMouseUp(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onMouseMove(void * jarg1, float jarg2, float jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->onMouseMove(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onLButtonDblClk(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->onLButtonDblClk(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GiMouseHelper_onKeyDown(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GiMouseHelper *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->onKeyDown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GiMouseHelper(void * jarg1) {
  GiMouseHelper *arg1 = (GiMouseHelper *) 0 ;
  
  arg1 = (GiMouseHelper *)jarg1; 
  delete arg1;
}


SWIGEXPORT MgObject * SWIGSTDCALL CSharp_MgBaseShape_SWIGUpcast(MgBaseShape *jarg1) {
    return (MgObject *)jarg1;
}

SWIGEXPORT MgBaseShape * SWIGSTDCALL CSharp_MgBaseRect_SWIGUpcast(MgBaseRect *jarg1) {
    return (MgBaseShape *)jarg1;
}

SWIGEXPORT MgBaseRect * SWIGSTDCALL CSharp_MgRect_SWIGUpcast(MgRect *jarg1) {
    return (MgBaseRect *)jarg1;
}

SWIGEXPORT MgBaseShape * SWIGSTDCALL CSharp_MgBaseLines_SWIGUpcast(MgBaseLines *jarg1) {
    return (MgBaseShape *)jarg1;
}

SWIGEXPORT MgBaseLines * SWIGSTDCALL CSharp_MgLines_SWIGUpcast(MgLines *jarg1) {
    return (MgBaseLines *)jarg1;
}

SWIGEXPORT MgBaseShape * SWIGSTDCALL CSharp_MgArc_SWIGUpcast(MgArc *jarg1) {
    return (MgBaseShape *)jarg1;
}

SWIGEXPORT MgBaseRect * SWIGSTDCALL CSharp_MgDiamond_SWIGUpcast(MgDiamond *jarg1) {
    return (MgBaseRect *)jarg1;
}

SWIGEXPORT MgBaseShape * SWIGSTDCALL CSharp_MgDot_SWIGUpcast(MgDot *jarg1) {
    return (MgBaseShape *)jarg1;
}

SWIGEXPORT MgBaseRect * SWIGSTDCALL CSharp_MgEllipse_SWIGUpcast(MgEllipse *jarg1) {
    return (MgBaseRect *)jarg1;
}

SWIGEXPORT MgBaseRect * SWIGSTDCALL CSharp_MgGrid_SWIGUpcast(MgGrid *jarg1) {
    return (MgBaseRect *)jarg1;
}

SWIGEXPORT MgBaseShape * SWIGSTDCALL CSharp_MgLine_SWIGUpcast(MgLine *jarg1) {
    return (MgBaseShape *)jarg1;
}

SWIGEXPORT MgBaseShape * SWIGSTDCALL CSharp_MgParallel_SWIGUpcast(MgParallel *jarg1) {
    return (MgBaseShape *)jarg1;
}

SWIGEXPORT MgBaseShape * SWIGSTDCALL CSharp_MgPathShape_SWIGUpcast(MgPathShape *jarg1) {
    return (MgBaseShape *)jarg1;
}

SWIGEXPORT MgBaseRect * SWIGSTDCALL CSharp_MgRoundRect_SWIGUpcast(MgRoundRect *jarg1) {
    return (MgBaseRect *)jarg1;
}

SWIGEXPORT MgBaseLines * SWIGSTDCALL CSharp_MgSplines_SWIGUpcast(MgSplines *jarg1) {
    return (MgBaseLines *)jarg1;
}

SWIGEXPORT MgObject * SWIGSTDCALL CSharp_MgShape_SWIGUpcast(MgShape *jarg1) {
    return (MgObject *)jarg1;
}

SWIGEXPORT MgObject * SWIGSTDCALL CSharp_MgShapes_SWIGUpcast(MgShapes *jarg1) {
    return (MgObject *)jarg1;
}

SWIGEXPORT MgBaseShape * SWIGSTDCALL CSharp_MgComposite_SWIGUpcast(MgComposite *jarg1) {
    return (MgBaseShape *)jarg1;
}

SWIGEXPORT MgComposite * SWIGSTDCALL CSharp_MgGroup_SWIGUpcast(MgGroup *jarg1) {
    return (MgComposite *)jarg1;
}

SWIGEXPORT MgBaseRect * SWIGSTDCALL CSharp_MgImageShape_SWIGUpcast(MgImageShape *jarg1) {
    return (MgBaseRect *)jarg1;
}

SWIGEXPORT CmdObserver * SWIGSTDCALL CSharp_CmdObserverDefault_SWIGUpcast(CmdObserverDefault *jarg1) {
    return (CmdObserver *)jarg1;
}

SWIGEXPORT CmdObserver * SWIGSTDCALL CSharp_CmdSubject_SWIGUpcast(CmdSubject *jarg1) {
    return (CmdObserver *)jarg1;
}

SWIGEXPORT MgCommand * SWIGSTDCALL CSharp_MgCommandDraw_SWIGUpcast(MgCommandDraw *jarg1) {
    return (MgCommand *)jarg1;
}

SWIGEXPORT MgCommandDraw * SWIGSTDCALL CSharp_MgCmdArc3P_SWIGUpcast(MgCmdArc3P *jarg1) {
    return (MgCommandDraw *)jarg1;
}

SWIGEXPORT MgCmdArc3P * SWIGSTDCALL CSharp_MgCmdArcCSE_SWIGUpcast(MgCmdArcCSE *jarg1) {
    return (MgCmdArc3P *)jarg1;
}

SWIGEXPORT MgCmdArc3P * SWIGSTDCALL CSharp_MgCmdArcTan_SWIGUpcast(MgCmdArcTan *jarg1) {
    return (MgCmdArc3P *)jarg1;
}

SWIGEXPORT MgCommandDraw * SWIGSTDCALL CSharp_MgCmdDrawRect_SWIGUpcast(MgCmdDrawRect *jarg1) {
    return (MgCommandDraw *)jarg1;
}

SWIGEXPORT MgShapes * SWIGSTDCALL CSharp_MgLayer_SWIGUpcast(MgLayer *jarg1) {
    return (MgShapes *)jarg1;
}

SWIGEXPORT MgObject * SWIGSTDCALL CSharp_MgShapeDoc_SWIGUpcast(MgShapeDoc *jarg1) {
    return (MgObject *)jarg1;
}

SWIGEXPORT MgCoreView * SWIGSTDCALL CSharp_GiCoreView_SWIGUpcast(GiCoreView *jarg1) {
    return (MgCoreView *)jarg1;
}

SWIGEXPORT MgView * SWIGSTDCALL CSharp_GiCoreViewData_SWIGUpcast(GiCoreViewData *jarg1) {
    return (MgView *)jarg1;
}

#ifdef __cplusplus
}
#endif

